[@@@warning "-8"]
[@@@warning "-9"]
[@@@warning "-11"]
[@@@warning "-23"]
[@@@warning "-26"]
open Sail_lib;;
module Big_int = Nat_big_num;;

type 'za zoption = | ZSome of 'za | ZNone of unit;;

let string_of_zoption _ = "VARIANT";;

let rec zis_none : 'za. (('za) zoption) -> bool = fun zopt -> sail_call (fun r ->
  begin match zopt with | ZSome (_) -> false | ZNone (()) -> true end)

and zis_some : 'za. (('za) zoption) -> bool = fun zopt -> sail_call (fun r ->
  begin match zopt with | ZSome (_) -> true | ZNone (()) -> false end)

(* Omitting externed function eq_unit *)


and zneq_int ((zx, zy) : (Big_int.num * Big_int.num)) : bool = sail_call (fun r ->
  not (eq_int (zx, zy)))

and zneq_bool ((zx, zy) : (bool * bool)) : bool = sail_call (fun r ->
  not (eq_bool (zx, zy)))

and zneq_anything : 'za. ('za * 'za) -> bool = fun (zx, zy) -> sail_call (fun r ->
  not ((fun (x, y) -> x = y) (zy, zx)))

and zneq_bits ((zx, zy) : ((bit) list * (bit) list)) : bool = sail_call (fun r ->
  not (eq_list (zx, zy)))

and z__id (zx : (Big_int.num)) : Big_int.num = sail_call (fun r -> zx)

and z_shl_int_general ((zm, zn) : (Big_int.num * Big_int.num)) : Big_int.num = sail_call (fun r ->
  (if (gteq (zn, Big_int.zero)) then (shl_int (zm, zn)) else (shr_int (zm, (negate zn)))))

and z_shr_int_general ((zm, zn) : (Big_int.num * Big_int.num)) : Big_int.num = sail_call (fun r ->
  (if (gteq (zn, Big_int.zero)) then (shr_int (zm, zn)) else (shl_int (zm, (negate zn)))))

and zfdiv_int ((zn, zm) : (Big_int.num * Big_int.num)) : Big_int.num = sail_call (fun r ->
  (if ((lt (zn, Big_int.zero)) && (gt (zm, Big_int.zero))) then (sub_int ((tdiv_int ((add_int (zn, (Big_int.of_int (1)))), zm)), (Big_int.of_int (1)))) else ((if ((gt (zn, Big_int.zero)) && (lt (zm, Big_int.zero))) then (sub_int ((tdiv_int ((sub_int (zn, (Big_int.of_int (1)))), zm)), (Big_int.of_int (1)))) else (tdiv_int (zn, zm))))))

and zfmod_int ((zn, zm) : (Big_int.num * Big_int.num)) : Big_int.num = sail_call (fun r ->
  sub_int (zn, (mult (zm, (zfdiv_int (zn, zm))))))

and zconcat_str_bits ((zstr, zx) : (string * (bit) list)) : string = sail_call (fun r ->
  concat_str (zstr, (string_of_bits zx)))

and zconcat_str_dec ((zstr, zx) : (string * Big_int.num)) : string = sail_call (fun r ->
  concat_str (zstr, (dec_str zx)))

and zn_leading_spaces (zs : (string)) : Big_int.num = sail_call (fun r ->
  begin
    match zs with
    | "" -> Big_int.zero
    | _ ->
      begin
        match (string_take (zs, (Big_int.of_int (1)))) with
        | " " ->
          add_int ((Big_int.of_int (1)), (zn_leading_spaces (string_drop (zs, (Big_int.of_int (1))))))
        | _ -> Big_int.zero
      end
  end)

and zspc_forwards (() : (unit)) : string = sail_call (fun r -> " ")

and zspc_forwards_matches (() : (unit)) : bool = sail_call (fun r -> true)

and zspc_backwards (_ : (string)) : unit = sail_call (fun r -> ())

and zspc_backwards_matches (zs : (string)) : bool = sail_call (fun r ->
  let zlen = (string_length zs) in
  (eq_int ((zn_leading_spaces zs), zlen)) && (gt (zlen, Big_int.zero)))

and zopt_spc_forwards (() : (unit)) : string = sail_call (fun r -> "")

and zopt_spc_forwards_matches (() : (unit)) : bool = sail_call (fun r -> true)

and zopt_spc_backwards (_ : (string)) : unit = sail_call (fun r -> ())

and zopt_spc_backwards_matches (zs : (string)) : bool = sail_call (fun r ->
  eq_int ((zn_leading_spaces zs), (string_length zs)))

and zdef_spc_forwards (() : (unit)) : string = sail_call (fun r -> " ")

and zdef_spc_forwards_matches (() : (unit)) : bool = sail_call (fun r -> true)

and zdef_spc_backwards (_ : (string)) : unit = sail_call (fun r -> ())

and zdef_spc_backwards_matches (zs : (string)) : bool = sail_call (fun r ->
  eq_int ((zn_leading_spaces zs), (string_length zs)))

and zsep_forwards (zargz3 : (unit)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | () ->
      string_append ((zopt_spc_forwards ()), (string_append (",", (string_append ((zdef_spc_forwards ()), "")))))
  end)

and zsep_backwards (zargz3 : (string)) : unit = sail_call (fun r ->
  begin match zargz3 with | _ -> exit 0 end)

and zsep_forwards_matches (zargz3 : (unit)) : bool = sail_call (fun r ->
  begin match zargz3 with | () -> true | _ -> false end)

and zsep_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | _ -> exit 0 | _ -> false end)

type  zbits = (bit) list;;

let string_of_zbits (gs130 :  zbits) = string_of_bits gs130;;

let rec zsail_mask ((zlen, zv) : (Big_int.num * (bit) list)) : (bit) list = sail_call (fun r ->
  (if (lteq (zlen, (length zv))) then (vector_truncate (zv, zlen)) else (zero_extend (zv, zlen))))

and zsail_ones (zn : (Big_int.num)) : (bit) list = sail_call (fun r ->
  not_vec (zeros zn))

and zslice_mask ((zn, zi, zl) : (Big_int.num * Big_int.num * Big_int.num)) : (bit) list = sail_call (fun r ->
  (if (gteq (zl, zn)) then (shiftl ((zsail_ones zn), zi)) else (let zone = (zsail_mask (zn, ([B1]))) in
  shiftl ((sub_vec ((shiftl (zone, zl)), zone)), zi))))

type  zregfp =
  | ZRFull of string
  | ZRSlice of (string * Big_int.num * Big_int.num)
  | ZRSliceBit of (string * Big_int.num)
  | ZRField of (string * string);;

let string_of_zregfp _ = "VARIANT";;

type  zregfps = (zregfp) list;;

let string_of_zregfps (gs146 :  zregfps) =
  string_of_list ", " (fun gs147 -> string_of_zregfp gs147) gs146;;

type  zniafp =
  | ZNIAFP_successor of unit
  | ZNIAFP_concrete_address of zbits
  | ZNIAFP_indirect_address of unit;;

let string_of_zniafp _ = "VARIANT";;

type  zniafps = (zniafp) list;;

let string_of_zniafps (gs148 :  zniafps) =
  string_of_list ", " (fun gs149 -> string_of_zniafp gs149) gs148;;

type  zdiafp =
  | ZDIAFP_none of unit
  | ZDIAFP_concrete of zbits
  | ZDIAFP_reg of zregfp;;

let string_of_zdiafp _ = "VARIANT";;

type zread_kind =
  | ZRead_plain
  | ZRead_reserve
  | ZRead_acquire
  | ZRead_exclusive
  | ZRead_exclusive_acquire
  | ZRead_stream
  | ZRead_ifetch
  | ZRead_RISCV_acquire
  | ZRead_RISCV_strong_acquire
  | ZRead_RISCV_reserved
  | ZRead_RISCV_reserved_acquire
  | ZRead_RISCV_reserved_strong_acquire
  | ZRead_X86_locked;;

let string_of_zread_kind = function
  | ZRead_plain -> "Read_plain"
  | ZRead_reserve -> "Read_reserve"
  | ZRead_acquire -> "Read_acquire"
  | ZRead_exclusive -> "Read_exclusive"
  | ZRead_exclusive_acquire -> "Read_exclusive_acquire"
  | ZRead_stream -> "Read_stream"
  | ZRead_ifetch -> "Read_ifetch"
  | ZRead_RISCV_acquire -> "Read_RISCV_acquire"
  | ZRead_RISCV_strong_acquire -> "Read_RISCV_strong_acquire"
  | ZRead_RISCV_reserved -> "Read_RISCV_reserved"
  | ZRead_RISCV_reserved_acquire -> "Read_RISCV_reserved_acquire"
  | ZRead_RISCV_reserved_strong_acquire -> "Read_RISCV_reserved_strong_acquire"
  | ZRead_X86_locked -> "Read_X86_locked";;

let rec zundefined_read_kind (() : (unit)) : zread_kind = sail_call (fun r ->
  internal_pick [ZRead_plain; ZRead_reserve; ZRead_acquire; ZRead_exclusive; ZRead_exclusive_acquire; ZRead_stream; ZRead_ifetch; ZRead_RISCV_acquire; ZRead_RISCV_strong_acquire; ZRead_RISCV_reserved; ZRead_RISCV_reserved_acquire; ZRead_RISCV_reserved_strong_acquire; ZRead_X86_locked])

and zread_kind_of_num (zargz3 : (Big_int.num)) : zread_kind = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__630 when (eq_int (zl__630, Big_int.zero)) -> ZRead_plain
    | zl__631 when (eq_int (zl__631, (Big_int.of_int (1)))) -> ZRead_reserve
    | zl__632 when (eq_int (zl__632, (Big_int.of_int (2)))) -> ZRead_acquire
    | zl__633 when (eq_int (zl__633, (Big_int.of_int (3)))) -> ZRead_exclusive
    | zl__634 when (eq_int (zl__634, (Big_int.of_int (4)))) ->
      ZRead_exclusive_acquire
    | zl__635 when (eq_int (zl__635, (Big_int.of_int (5)))) -> ZRead_stream
    | zl__636 when (eq_int (zl__636, (Big_int.of_int (6)))) -> ZRead_ifetch
    | zl__637 when (eq_int (zl__637, (Big_int.of_int (7)))) ->
      ZRead_RISCV_acquire
    | zl__638 when (eq_int (zl__638, (Big_int.of_int (8)))) ->
      ZRead_RISCV_strong_acquire
    | zl__639 when (eq_int (zl__639, (Big_int.of_int (9)))) ->
      ZRead_RISCV_reserved
    | zl__640 when (eq_int (zl__640, (Big_int.of_int (10)))) ->
      ZRead_RISCV_reserved_acquire
    | zl__641 when (eq_int (zl__641, (Big_int.of_int (11)))) ->
      ZRead_RISCV_reserved_strong_acquire
    | _ -> ZRead_X86_locked
  end)

and znum_of_read_kind (zargz3 : (zread_kind)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRead_plain -> Big_int.zero
    | ZRead_reserve -> (Big_int.of_int (1))
    | ZRead_acquire -> (Big_int.of_int (2))
    | ZRead_exclusive -> (Big_int.of_int (3))
    | ZRead_exclusive_acquire -> (Big_int.of_int (4))
    | ZRead_stream -> (Big_int.of_int (5))
    | ZRead_ifetch -> (Big_int.of_int (6))
    | ZRead_RISCV_acquire -> (Big_int.of_int (7))
    | ZRead_RISCV_strong_acquire -> (Big_int.of_int (8))
    | ZRead_RISCV_reserved -> (Big_int.of_int (9))
    | ZRead_RISCV_reserved_acquire -> (Big_int.of_int (10))
    | ZRead_RISCV_reserved_strong_acquire -> (Big_int.of_int (11))
    | ZRead_X86_locked -> (Big_int.of_int (12))
  end)

type zwrite_kind =
  | ZWrite_plain
  | ZWrite_conditional
  | ZWrite_release
  | ZWrite_exclusive
  | ZWrite_exclusive_release
  | ZWrite_RISCV_release
  | ZWrite_RISCV_strong_release
  | ZWrite_RISCV_conditional
  | ZWrite_RISCV_conditional_release
  | ZWrite_RISCV_conditional_strong_release
  | ZWrite_X86_locked;;

let string_of_zwrite_kind = function
  | ZWrite_plain -> "Write_plain"
  | ZWrite_conditional -> "Write_conditional"
  | ZWrite_release -> "Write_release"
  | ZWrite_exclusive -> "Write_exclusive"
  | ZWrite_exclusive_release -> "Write_exclusive_release"
  | ZWrite_RISCV_release -> "Write_RISCV_release"
  | ZWrite_RISCV_strong_release -> "Write_RISCV_strong_release"
  | ZWrite_RISCV_conditional -> "Write_RISCV_conditional"
  | ZWrite_RISCV_conditional_release -> "Write_RISCV_conditional_release"
  | ZWrite_RISCV_conditional_strong_release -> "Write_RISCV_conditional_strong_release"
  | ZWrite_X86_locked -> "Write_X86_locked";;

let rec zundefined_write_kind (() : (unit)) : zwrite_kind = sail_call (fun r ->
  internal_pick [ZWrite_plain; ZWrite_conditional; ZWrite_release; ZWrite_exclusive; ZWrite_exclusive_release; ZWrite_RISCV_release; ZWrite_RISCV_strong_release; ZWrite_RISCV_conditional; ZWrite_RISCV_conditional_release; ZWrite_RISCV_conditional_strong_release; ZWrite_X86_locked])

and zwrite_kind_of_num (zargz3 : (Big_int.num)) : zwrite_kind = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__620 when (eq_int (zl__620, Big_int.zero)) -> ZWrite_plain
    | zl__621 when (eq_int (zl__621, (Big_int.of_int (1)))) ->
      ZWrite_conditional
    | zl__622 when (eq_int (zl__622, (Big_int.of_int (2)))) -> ZWrite_release
    | zl__623 when (eq_int (zl__623, (Big_int.of_int (3)))) -> ZWrite_exclusive
    | zl__624 when (eq_int (zl__624, (Big_int.of_int (4)))) ->
      ZWrite_exclusive_release
    | zl__625 when (eq_int (zl__625, (Big_int.of_int (5)))) ->
      ZWrite_RISCV_release
    | zl__626 when (eq_int (zl__626, (Big_int.of_int (6)))) ->
      ZWrite_RISCV_strong_release
    | zl__627 when (eq_int (zl__627, (Big_int.of_int (7)))) ->
      ZWrite_RISCV_conditional
    | zl__628 when (eq_int (zl__628, (Big_int.of_int (8)))) ->
      ZWrite_RISCV_conditional_release
    | zl__629 when (eq_int (zl__629, (Big_int.of_int (9)))) ->
      ZWrite_RISCV_conditional_strong_release
    | _ -> ZWrite_X86_locked
  end)

and znum_of_write_kind (zargz3 : (zwrite_kind)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZWrite_plain -> Big_int.zero
    | ZWrite_conditional -> (Big_int.of_int (1))
    | ZWrite_release -> (Big_int.of_int (2))
    | ZWrite_exclusive -> (Big_int.of_int (3))
    | ZWrite_exclusive_release -> (Big_int.of_int (4))
    | ZWrite_RISCV_release -> (Big_int.of_int (5))
    | ZWrite_RISCV_strong_release -> (Big_int.of_int (6))
    | ZWrite_RISCV_conditional -> (Big_int.of_int (7))
    | ZWrite_RISCV_conditional_release -> (Big_int.of_int (8))
    | ZWrite_RISCV_conditional_strong_release -> (Big_int.of_int (9))
    | ZWrite_X86_locked -> (Big_int.of_int (10))
  end)

type za64_barrier_domain =
  | ZA64_FullShare
  | ZA64_InnerShare
  | ZA64_OuterShare
  | ZA64_NonShare;;

let string_of_za64_barrier_domain = function
  | ZA64_FullShare -> "A64_FullShare"
  | ZA64_InnerShare -> "A64_InnerShare"
  | ZA64_OuterShare -> "A64_OuterShare"
  | ZA64_NonShare -> "A64_NonShare";;

let rec zundefined_a64_barrier_domain (() : (unit)) : za64_barrier_domain = sail_call (fun r ->
  internal_pick [ZA64_FullShare; ZA64_InnerShare; ZA64_OuterShare; ZA64_NonShare])

and za64_barrier_domain_of_num (zargz3 : (Big_int.num)) : za64_barrier_domain = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__617 when (eq_int (zl__617, Big_int.zero)) -> ZA64_FullShare
    | zl__618 when (eq_int (zl__618, (Big_int.of_int (1)))) -> ZA64_InnerShare
    | zl__619 when (eq_int (zl__619, (Big_int.of_int (2)))) -> ZA64_OuterShare
    | _ -> ZA64_NonShare
  end)

and znum_of_a64_barrier_domain (zargz3 : (za64_barrier_domain)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZA64_FullShare -> Big_int.zero
    | ZA64_InnerShare -> (Big_int.of_int (1))
    | ZA64_OuterShare -> (Big_int.of_int (2))
    | ZA64_NonShare -> (Big_int.of_int (3))
  end)

type za64_barrier_type = | ZA64_barrier_all | ZA64_barrier_LD | ZA64_barrier_ST;;

let string_of_za64_barrier_type = function
  | ZA64_barrier_all -> "A64_barrier_all"
  | ZA64_barrier_LD -> "A64_barrier_LD"
  | ZA64_barrier_ST -> "A64_barrier_ST";;

let rec zundefined_a64_barrier_type (() : (unit)) : za64_barrier_type = sail_call (fun r ->
  internal_pick [ZA64_barrier_all; ZA64_barrier_LD; ZA64_barrier_ST])

and za64_barrier_type_of_num (zargz3 : (Big_int.num)) : za64_barrier_type = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__615 when (eq_int (zl__615, Big_int.zero)) -> ZA64_barrier_all
    | zl__616 when (eq_int (zl__616, (Big_int.of_int (1)))) -> ZA64_barrier_LD
    | _ -> ZA64_barrier_ST
  end)

and znum_of_a64_barrier_type (zargz3 : (za64_barrier_type)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZA64_barrier_all -> Big_int.zero
    | ZA64_barrier_LD -> (Big_int.of_int (1))
    | ZA64_barrier_ST -> (Big_int.of_int (2))
  end)

type  zbarrier_kind =
  | ZBarrier_Sync of unit
  | ZBarrier_LwSync of unit
  | ZBarrier_Eieio of unit
  | ZBarrier_Isync of unit
  | ZBarrier_DMB of (za64_barrier_domain * za64_barrier_type)
  | ZBarrier_DSB of (za64_barrier_domain * za64_barrier_type)
  | ZBarrier_ISB of unit
  | ZBarrier_MIPS_SYNC of unit
  | ZBarrier_RISCV_rw_rw of unit
  | ZBarrier_RISCV_r_rw of unit
  | ZBarrier_RISCV_r_r of unit
  | ZBarrier_RISCV_rw_w of unit
  | ZBarrier_RISCV_w_w of unit
  | ZBarrier_RISCV_w_rw of unit
  | ZBarrier_RISCV_rw_r of unit
  | ZBarrier_RISCV_r_w of unit
  | ZBarrier_RISCV_w_r of unit
  | ZBarrier_RISCV_tso of unit
  | ZBarrier_RISCV_i of unit
  | ZBarrier_x86_MFENCE of unit;;

let string_of_zbarrier_kind _ = "VARIANT";;

type ztrans_kind =
  | ZTransaction_start
  | ZTransaction_commit
  | ZTransaction_abort;;

let string_of_ztrans_kind = function
  | ZTransaction_start -> "Transaction_start"
  | ZTransaction_commit -> "Transaction_commit"
  | ZTransaction_abort -> "Transaction_abort";;

let rec zundefined_trans_kind (() : (unit)) : ztrans_kind = sail_call (fun r ->
  internal_pick [ZTransaction_start; ZTransaction_commit; ZTransaction_abort])

and ztrans_kind_of_num (zargz3 : (Big_int.num)) : ztrans_kind = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__613 when (eq_int (zl__613, Big_int.zero)) -> ZTransaction_start
    | zl__614 when (eq_int (zl__614, (Big_int.of_int (1)))) ->
      ZTransaction_commit
    | _ -> ZTransaction_abort
  end)

and znum_of_trans_kind (zargz3 : (ztrans_kind)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZTransaction_start -> Big_int.zero
    | ZTransaction_commit -> (Big_int.of_int (1))
    | ZTransaction_abort -> (Big_int.of_int (2))
  end)

type zcache_op_kind =
  | ZCache_op_D_IVAC
  | ZCache_op_D_ISW
  | ZCache_op_D_CSW
  | ZCache_op_D_CISW
  | ZCache_op_D_ZVA
  | ZCache_op_D_CVAC
  | ZCache_op_D_CVAU
  | ZCache_op_D_CIVAC
  | ZCache_op_I_IALLUIS
  | ZCache_op_I_IALLU
  | ZCache_op_I_IVAU;;

let string_of_zcache_op_kind = function
  | ZCache_op_D_IVAC -> "Cache_op_D_IVAC"
  | ZCache_op_D_ISW -> "Cache_op_D_ISW"
  | ZCache_op_D_CSW -> "Cache_op_D_CSW"
  | ZCache_op_D_CISW -> "Cache_op_D_CISW"
  | ZCache_op_D_ZVA -> "Cache_op_D_ZVA"
  | ZCache_op_D_CVAC -> "Cache_op_D_CVAC"
  | ZCache_op_D_CVAU -> "Cache_op_D_CVAU"
  | ZCache_op_D_CIVAC -> "Cache_op_D_CIVAC"
  | ZCache_op_I_IALLUIS -> "Cache_op_I_IALLUIS"
  | ZCache_op_I_IALLU -> "Cache_op_I_IALLU"
  | ZCache_op_I_IVAU -> "Cache_op_I_IVAU";;

let rec zundefined_cache_op_kind (() : (unit)) : zcache_op_kind = sail_call (fun r ->
  internal_pick [ZCache_op_D_IVAC; ZCache_op_D_ISW; ZCache_op_D_CSW; ZCache_op_D_CISW; ZCache_op_D_ZVA; ZCache_op_D_CVAC; ZCache_op_D_CVAU; ZCache_op_D_CIVAC; ZCache_op_I_IALLUIS; ZCache_op_I_IALLU; ZCache_op_I_IVAU])

and zcache_op_kind_of_num (zargz3 : (Big_int.num)) : zcache_op_kind = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__603 when (eq_int (zl__603, Big_int.zero)) -> ZCache_op_D_IVAC
    | zl__604 when (eq_int (zl__604, (Big_int.of_int (1)))) -> ZCache_op_D_ISW
    | zl__605 when (eq_int (zl__605, (Big_int.of_int (2)))) -> ZCache_op_D_CSW
    | zl__606 when (eq_int (zl__606, (Big_int.of_int (3)))) -> ZCache_op_D_CISW
    | zl__607 when (eq_int (zl__607, (Big_int.of_int (4)))) -> ZCache_op_D_ZVA
    | zl__608 when (eq_int (zl__608, (Big_int.of_int (5)))) -> ZCache_op_D_CVAC
    | zl__609 when (eq_int (zl__609, (Big_int.of_int (6)))) -> ZCache_op_D_CVAU
    | zl__610 when (eq_int (zl__610, (Big_int.of_int (7)))) -> ZCache_op_D_CIVAC
    | zl__611 when (eq_int (zl__611, (Big_int.of_int (8)))) ->
      ZCache_op_I_IALLUIS
    | zl__612 when (eq_int (zl__612, (Big_int.of_int (9)))) -> ZCache_op_I_IALLU
    | _ -> ZCache_op_I_IVAU
  end)

and znum_of_cache_op_kind (zargz3 : (zcache_op_kind)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZCache_op_D_IVAC -> Big_int.zero
    | ZCache_op_D_ISW -> (Big_int.of_int (1))
    | ZCache_op_D_CSW -> (Big_int.of_int (2))
    | ZCache_op_D_CISW -> (Big_int.of_int (3))
    | ZCache_op_D_ZVA -> (Big_int.of_int (4))
    | ZCache_op_D_CVAC -> (Big_int.of_int (5))
    | ZCache_op_D_CVAU -> (Big_int.of_int (6))
    | ZCache_op_D_CIVAC -> (Big_int.of_int (7))
    | ZCache_op_I_IALLUIS -> (Big_int.of_int (8))
    | ZCache_op_I_IALLU -> (Big_int.of_int (9))
    | ZCache_op_I_IVAU -> (Big_int.of_int (10))
  end)

type  zinstruction_kind =
  | ZIK_barrier of zbarrier_kind
  | ZIK_mem_read of zread_kind
  | ZIK_mem_write of zwrite_kind
  | ZIK_mem_rmw of (zread_kind * zwrite_kind)
  | ZIK_branch of unit
  | ZIK_trans of ztrans_kind
  | ZIK_simple of unit
  | ZIK_cache_op of zcache_op_kind;;

let string_of_zinstruction_kind _ = "VARIANT";;

let rec zhex_bits_forwards (zbv : ((bit) list)) : (Big_int.num * string) = sail_call (fun r ->
  ((fun (v0, v1) -> (v1, v0)) (hex_str (uint zbv), length zbv)))

and zhex_bits_forwards_matches (zbv : ((bit) list)) : bool = sail_call (fun r ->
  true)

and zhex_bits_backwards ((zn, zstr) : ((Big_int.num * string))) : (bit) list = sail_call (fun r ->
  parse_hex_bits (zn, zstr))

and zhex_bits_backwards_matches ((zn, zstr) : ((Big_int.num * string))) : bool = sail_call (fun r ->
  valid_hex_bits (zn, zstr))

and zhex_bits_1_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__602, zs) when (eq_int (zl__602, (Big_int.of_int (1)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_1_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (1))))
  end)

and zhex_bits_1_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__601, zs) when (eq_int (zl__601, (Big_int.of_int (1)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_1_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_2_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__600, zs) when (eq_int (zl__600, (Big_int.of_int (2)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_2_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (2))))
  end)

and zhex_bits_2_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__599, zs) when (eq_int (zl__599, (Big_int.of_int (2)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_2_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_3_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__598, zs) when (eq_int (zl__598, (Big_int.of_int (3)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_3_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (3))))
  end)

and zhex_bits_3_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__597, zs) when (eq_int (zl__597, (Big_int.of_int (3)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_3_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_4_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__596, zs) when (eq_int (zl__596, (Big_int.of_int (4)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_4_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (4))))
  end)

and zhex_bits_4_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__595, zs) when (eq_int (zl__595, (Big_int.of_int (4)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_4_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_5_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__594, zs) when (eq_int (zl__594, (Big_int.of_int (5)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_5_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (5))))
  end)

and zhex_bits_5_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__593, zs) when (eq_int (zl__593, (Big_int.of_int (5)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_5_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_6_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__592, zs) when (eq_int (zl__592, (Big_int.of_int (6)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_6_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (6))))
  end)

and zhex_bits_6_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__591, zs) when (eq_int (zl__591, (Big_int.of_int (6)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_6_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_7_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__590, zs) when (eq_int (zl__590, (Big_int.of_int (7)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_7_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (7))))
  end)

and zhex_bits_7_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__589, zs) when (eq_int (zl__589, (Big_int.of_int (7)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_7_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_8_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__588, zs) when (eq_int (zl__588, (Big_int.of_int (8)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_8_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (8))))
  end)

and zhex_bits_8_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__587, zs) when (eq_int (zl__587, (Big_int.of_int (8)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_8_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_9_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__586, zs) when (eq_int (zl__586, (Big_int.of_int (9)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_9_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (9))))
  end)

and zhex_bits_9_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__585, zs) when (eq_int (zl__585, (Big_int.of_int (9)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_9_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_10_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__584, zs) when (eq_int (zl__584, (Big_int.of_int (10)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_10_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (10))))
  end)

and zhex_bits_10_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__583, zs) when (eq_int (zl__583, (Big_int.of_int (10)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_10_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_11_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__582, zs) when (eq_int (zl__582, (Big_int.of_int (11)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_11_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (11))))
  end)

and zhex_bits_11_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__581, zs) when (eq_int (zl__581, (Big_int.of_int (11)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_11_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_12_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__580, zs) when (eq_int (zl__580, (Big_int.of_int (12)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_12_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (12))))
  end)

and zhex_bits_12_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__579, zs) when (eq_int (zl__579, (Big_int.of_int (12)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_12_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_13_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__578, zs) when (eq_int (zl__578, (Big_int.of_int (13)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_13_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (13))))
  end)

and zhex_bits_13_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__577, zs) when (eq_int (zl__577, (Big_int.of_int (13)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_13_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_14_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__576, zs) when (eq_int (zl__576, (Big_int.of_int (14)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_14_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (14))))
  end)

and zhex_bits_14_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__575, zs) when (eq_int (zl__575, (Big_int.of_int (14)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_14_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_15_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__574, zs) when (eq_int (zl__574, (Big_int.of_int (15)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_15_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (15))))
  end)

and zhex_bits_15_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__573, zs) when (eq_int (zl__573, (Big_int.of_int (15)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_15_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_16_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__572, zs) when (eq_int (zl__572, (Big_int.of_int (16)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_16_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (16))))
  end)

and zhex_bits_16_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__571, zs) when (eq_int (zl__571, (Big_int.of_int (16)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_16_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_17_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__570, zs) when (eq_int (zl__570, (Big_int.of_int (17)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_17_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (17))))
  end)

and zhex_bits_17_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__569, zs) when (eq_int (zl__569, (Big_int.of_int (17)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_17_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_18_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__568, zs) when (eq_int (zl__568, (Big_int.of_int (18)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_18_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (18))))
  end)

and zhex_bits_18_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__567, zs) when (eq_int (zl__567, (Big_int.of_int (18)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_18_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_19_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__566, zs) when (eq_int (zl__566, (Big_int.of_int (19)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_19_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (19))))
  end)

and zhex_bits_19_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__565, zs) when (eq_int (zl__565, (Big_int.of_int (19)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_19_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_20_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__564, zs) when (eq_int (zl__564, (Big_int.of_int (20)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_20_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (20))))
  end)

and zhex_bits_20_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__563, zs) when (eq_int (zl__563, (Big_int.of_int (20)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_20_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_21_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__562, zs) when (eq_int (zl__562, (Big_int.of_int (21)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_21_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (21))))
  end)

and zhex_bits_21_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__561, zs) when (eq_int (zl__561, (Big_int.of_int (21)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_21_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_22_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__560, zs) when (eq_int (zl__560, (Big_int.of_int (22)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_22_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (22))))
  end)

and zhex_bits_22_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__559, zs) when (eq_int (zl__559, (Big_int.of_int (22)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_22_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_23_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__558, zs) when (eq_int (zl__558, (Big_int.of_int (23)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_23_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (23))))
  end)

and zhex_bits_23_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__557, zs) when (eq_int (zl__557, (Big_int.of_int (23)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_23_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_24_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__556, zs) when (eq_int (zl__556, (Big_int.of_int (24)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_24_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (24))))
  end)

and zhex_bits_24_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__555, zs) when (eq_int (zl__555, (Big_int.of_int (24)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_24_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_25_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__554, zs) when (eq_int (zl__554, (Big_int.of_int (25)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_25_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (25))))
  end)

and zhex_bits_25_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__553, zs) when (eq_int (zl__553, (Big_int.of_int (25)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_25_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_26_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__552, zs) when (eq_int (zl__552, (Big_int.of_int (26)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_26_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (26))))
  end)

and zhex_bits_26_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__551, zs) when (eq_int (zl__551, (Big_int.of_int (26)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_26_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_27_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__550, zs) when (eq_int (zl__550, (Big_int.of_int (27)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_27_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (27))))
  end)

and zhex_bits_27_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__549, zs) when (eq_int (zl__549, (Big_int.of_int (27)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_27_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_28_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__548, zs) when (eq_int (zl__548, (Big_int.of_int (28)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_28_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (28))))
  end)

and zhex_bits_28_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__547, zs) when (eq_int (zl__547, (Big_int.of_int (28)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_28_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_29_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__546, zs) when (eq_int (zl__546, (Big_int.of_int (29)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_29_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (29))))
  end)

and zhex_bits_29_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__545, zs) when (eq_int (zl__545, (Big_int.of_int (29)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_29_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_30_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__544, zs) when (eq_int (zl__544, (Big_int.of_int (30)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_30_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (30))))
  end)

and zhex_bits_30_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__543, zs) when (eq_int (zl__543, (Big_int.of_int (30)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_30_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_31_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__542, zs) when (eq_int (zl__542, (Big_int.of_int (31)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_31_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (31))))
  end)

and zhex_bits_31_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__541, zs) when (eq_int (zl__541, (Big_int.of_int (31)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_31_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and zhex_bits_32_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__540, zs) when (eq_int (zl__540, (Big_int.of_int (32)))) ->
            ZSome zs
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zhex_bits_32_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zs ->
      zhex_bits_backwards ((fun (v0, v1) -> (v1, v0)) (zs, (Big_int.of_int (32))))
  end)

and zhex_bits_32_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zmapping0z3 when (zhex_bits_forwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_forwards zmapping0z3) with
          | (zl__539, zs) when (eq_int (zl__539, (Big_int.of_int (32)))) ->
            ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zhex_bits_32_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | zs -> true | _ -> false end)

and znot_bit (zb : (bit)) : bit = sail_call (fun r ->
  (if (eq_bit (zb, B1)) then B0 else B1))

and znot (zb : (bool)) : bool = sail_call (fun r -> not zb)

and zbit_str (zb : (bit)) : string = sail_call (fun r ->
  begin
    match zb with
    | zp0z3 when (eq_bit (zp0z3, B0)) -> "0b0"
    | zp0z3 when (eq_bit (zp0z3, B1)) -> "0b1"
  end)

(* Omitting externed function get_config_print_instr *)


(* Omitting externed function get_config_print_reg *)


(* Omitting externed function get_config_print_mem *)


(* Omitting externed function get_config_print_platform *)


(* Omitting externed function get_config_print_exception *)


and zsign_extend ((zm, zv) : (Big_int.num * (bit) list)) : (bit) list = sail_call (fun r ->
  sign_extend (zv, zm))

and zzzero_extend ((zm, zv) : (Big_int.num * (bit) list)) : (bit) list = sail_call (fun r ->
  zero_extend (zv, zm))

and zzzeros_implicit (zn : (Big_int.num)) : (bit) list = sail_call (fun r ->
  zeros zn)

and zones (zn : (Big_int.num)) : (bit) list = sail_call (fun r -> zsail_ones zn)

and zbool_to_bit (zx : (bool)) : bit = sail_call (fun r ->
  (if zx then B1 else B0))

and zbool_to_bits (zx : (bool)) : (bit) list = sail_call (fun r ->
  [zbool_to_bit zx])

and zbit_to_bool (zb : (bit)) : bool = sail_call (fun r ->
  begin
    match zb with
    | zp0z3 when (eq_bit (zp0z3, B1)) -> true
    | zp0z3 when (eq_bit (zp0z3, B0)) -> false
  end)

and zto_bits ((zl, zn) : (Big_int.num * Big_int.num)) : (bit) list = sail_call (fun r ->
  get_slice_int (zl, zn, Big_int.zero))

and zz8operatorz0zI_sz9 ((zx, zy) : ((bit) list * (bit) list)) : bool = sail_call (fun r ->
  lt ((sint zx), (sint zy)))

and zz8operatorz0zKzJ_sz9 ((zx, zy) : ((bit) list * (bit) list)) : bool = sail_call (fun r ->
  gteq ((sint zx), (sint zy)))

and zz8operatorz0zI_uz9 ((zx, zy) : ((bit) list * (bit) list)) : bool = sail_call (fun r ->
  lt ((uint zx), (uint zy)))

and zz8operatorz0zKzJ_uz9 ((zx, zy) : ((bit) list * (bit) list)) : bool = sail_call (fun r ->
  gteq ((uint zx), (uint zy)))

and zz8operatorz0zIzJ_uz9 ((zx, zy) : ((bit) list * (bit) list)) : bool = sail_call (fun r ->
  lteq ((uint zx), (uint zy)))

and zshift_right_arith64 ((zv, zshift) : ((bit) list * (bit) list)) : (bit) list = sail_call (fun r ->
  let zv128 = (zsign_extend ((Big_int.of_int (128)), zv)) in
  subrange ((shift_bits_right (zv128, zshift)), (Big_int.of_int (63)), Big_int.zero))

and zshift_right_arith32 ((zv, zshift) : ((bit) list * (bit) list)) : (bit) list = sail_call (fun r ->
  let zv64 = (zsign_extend ((Big_int.of_int (64)), zv)) in
  subrange ((shift_bits_right (zv64, zshift)), (Big_int.of_int (31)), Big_int.zero))

and zrotate_bits_right ((zv, zn) : ((bit) list * (bit) list)) : (bit) list = sail_call (fun r ->
  or_vec ((shift_bits_right (zv, zn)), (shift_bits_left (zv, (sub_vec ((zto_bits ((length zn), (length zv))), zn))))))

and zrotate_bits_left ((zv, zn) : ((bit) list * (bit) list)) : (bit) list = sail_call (fun r ->
  or_vec ((shift_bits_left (zv, zn)), (shift_bits_right (zv, (sub_vec ((zto_bits ((length zn), (length zv))), zn))))))

and zrotater ((zv, zn) : ((bit) list * Big_int.num)) : (bit) list = sail_call (fun r ->
  or_vec ((shiftr (zv, zn)), (shiftl (zv, (sub_int ((length zv), zn))))))

and zrotatel ((zv, zn) : ((bit) list * Big_int.num)) : (bit) list = sail_call (fun r ->
  or_vec ((shiftl (zv, zn)), (shiftr (zv, (sub_int ((length zv), zn))))))

and zreverse_bits_in_byte (zxs : ((bit) list)) : (bit) list = sail_call (fun r ->
  let zys = ref ((zzzeros_implicit (Big_int.of_int (8))) : (bit) list) in
  begin
    let rec loop zi =
      if Big_int.less_equal zi (Big_int.of_int (7))
      then (((zys := (update (!zys, zi, (access (zxs, (sub_int ((Big_int.of_int (7)), zi)))))))); loop (Big_int.add zi (Big_int.of_int (1))))
      else ()
    in
    loop Big_int.zero;
    !zys
  end)

and zlog2 (zn : (Big_int.num)) : Big_int.num = sail_call (fun r ->
  let zresult = (begin
    match zn with
    | zl__533 when (eq_int (zl__533, (Big_int.of_int (1)))) -> Big_int.zero
    | zl__534 when (eq_int (zl__534, (Big_int.of_int (2)))) ->
      (Big_int.of_int (1))
    | zl__535 when (eq_int (zl__535, (Big_int.of_int (4)))) ->
      (Big_int.of_int (2))
    | zl__536 when (eq_int (zl__536, (Big_int.of_int (8)))) ->
      (Big_int.of_int (3))
    | zl__537 when (eq_int (zl__537, (Big_int.of_int (16)))) ->
      (Big_int.of_int (4))
    | zl__538 when (eq_int (zl__538, (Big_int.of_int (32)))) ->
      (Big_int.of_int (5))
    | _ -> (Big_int.of_int (6))
  end) in
  zresult)

type  zxlenbits = zbits;;

let string_of_zxlenbits (gs866 :  zxlenbits) = string_of_zbits gs866;;

type  zflenbits = zbits;;

let string_of_zflenbits (gs867 :  zflenbits) = string_of_zbits gs867;;

let zelen : (zbits) ref = ref (undefined_bitvector (Big_int.of_int (1)));;

let rec zget_elen_pow (() : (unit)) : Big_int.num = sail_call (fun r ->
  begin
    match !zelen with
    | zb__0 when (eq_list (zb__0, [B0])) -> (Big_int.of_int (5))
    | _ -> (Big_int.of_int (6))
  end)

let zvlen : (zbits) ref = ref (undefined_bitvector (Big_int.of_int (4)));;

let rec zget_vlen_pow (() : (unit)) : Big_int.num = sail_call (fun r ->
  begin
    match !zvlen with
    | zb__0 when (eq_list (zb__0, [B0; B0; B0; B0])) -> (Big_int.of_int (5))
    | zb__1 when (eq_list (zb__1, [B0; B0; B0; B1])) -> (Big_int.of_int (6))
    | zb__2 when (eq_list (zb__2, [B0; B0; B1; B0])) -> (Big_int.of_int (7))
    | zb__3 when (eq_list (zb__3, [B0; B0; B1; B1])) -> (Big_int.of_int (8))
    | zb__4 when (eq_list (zb__4, [B0; B1; B0; B0])) -> (Big_int.of_int (9))
    | zb__5 when (eq_list (zb__5, [B0; B1; B0; B1])) -> (Big_int.of_int (10))
    | zb__6 when (eq_list (zb__6, [B0; B1; B1; B0])) -> (Big_int.of_int (11))
    | zb__7 when (eq_list (zb__7, [B0; B1; B1; B1])) -> (Big_int.of_int (12))
    | zb__8 when (eq_list (zb__8, [B1; B0; B0; B0])) -> (Big_int.of_int (13))
    | zb__9 when (eq_list (zb__9, [B1; B0; B0; B1])) -> (Big_int.of_int (14))
    | zb__10 when (eq_list (zb__10, [B1; B0; B1; B0])) -> (Big_int.of_int (15))
    | _ -> (Big_int.of_int (16))
  end)

let rec zextzzv ((zm, zv) : (Big_int.num * (bit) list)) : (bit) list = sail_call (fun r ->
  (if (lt (zm, (length zv))) then (vector_truncate (zv, zm)) else (zero_extend (zv, zm))))

and zextsv ((zm, zv) : (Big_int.num * (bit) list)) : (bit) list = sail_call (fun r ->
  (if (lt (zm, (length zv))) then (vector_truncate (zv, zm)) else (sign_extend (zv, zm))))

and zis_zzero_subrange ((zxs, zi, zj) : ((bit) list * Big_int.num * Big_int.num)) : bool = sail_call (fun r ->
  eq_list ((and_vec (zxs, (zslice_mask ((length zxs), zj, (add_int ((sub_int (zi, zj)), (Big_int.of_int (1)))))))), (zextzzv ((length zxs), ([B0])))))

and zis_zzeros_slice ((zxs, zi, zl) : ((bit) list * Big_int.num * Big_int.num)) : bool = sail_call (fun r ->
  eq_list ((and_vec (zxs, (zslice_mask ((length zxs), zi, zl)))), (zextzzv ((length zxs), ([B0])))))

and zis_ones_subrange ((zxs, zi, zj) : ((bit) list * Big_int.num * Big_int.num)) : bool = sail_call (fun r ->
  let zm = (zslice_mask ((length zxs), zj, (add_int ((sub_int (zi, zj)), (Big_int.of_int (1)))))) in
  eq_list ((and_vec (zxs, zm)), zm))

and zis_ones_slice ((zxs, zi, zj) : ((bit) list * Big_int.num * Big_int.num)) : bool = sail_call (fun r ->
  let zm = (zslice_mask ((length zxs), zi, zj)) in
  eq_list ((and_vec (zxs, zm)), zm))

and zslice_slice_concat ((zr, zxs, zi, zl, zys, ziz7, zlz7) : (Big_int.num * (bit) list * Big_int.num * Big_int.num * (bit) list * Big_int.num * Big_int.num)) : (bit) list = sail_call (fun r ->
  let zxs = (shiftr ((and_vec (zxs, (zslice_mask ((length zxs), zi, zl)))), zi)) in
  let zys = (shiftr ((and_vec (zys, (zslice_mask ((length zys), ziz7, zlz7)))), ziz7)) in
  or_vec ((shiftl ((zextzzv (zr, zxs)), zlz7)), (zextzzv (zr, zys))))

and zslice_zzeros_concat ((zxs, zi, zl, zlz7) : ((bit) list * Big_int.num * Big_int.num * Big_int.num)) : (bit) list = sail_call (fun r ->
  let zxs = (shiftr ((and_vec (zxs, (zslice_mask ((length zxs), zi, zl)))), zi)) in
  shiftl ((zextzzv ((add_int (zl, zlz7)), zxs)), zlz7))

and zsubrange_zzeros_concat ((zxs, zhi, zlo, zlz7) : ((bit) list * Big_int.num * Big_int.num * Big_int.num)) : (bit) list = sail_call (fun r ->
  zslice_zzeros_concat (zxs, zlo, (add_int ((sub_int (zhi, zlo)), (Big_int.of_int (1)))), zlz7))

and zsubrange_subrange_eq ((zxs, zi, zj, zys, ziz7, zjz7) : ((bit) list * Big_int.num * Big_int.num * (bit) list * Big_int.num * Big_int.num)) : bool = sail_call (fun r ->
  let zxs = (shiftr ((and_vec (zxs, (zslice_mask ((length zys), zj, (add_int ((sub_int (zi, zj)), (Big_int.of_int (1)))))))), zj)) in
  let zys = (shiftr ((and_vec (zys, (zslice_mask ((length zys), zjz7, (add_int ((sub_int (ziz7, zjz7)), (Big_int.of_int (1)))))))), zjz7)) in
  eq_list (zxs, zys))

and zsubrange_subrange_concat ((zs, zxs, zi, zj, zys, ziz7, zjz7) : (Big_int.num * (bit) list * Big_int.num * Big_int.num * (bit) list * Big_int.num * Big_int.num)) : (bit) list = sail_call (fun r ->
  let zxs = (shiftr ((and_vec (zxs, (zslice_mask ((length zxs), zj, (add_int ((sub_int (zi, zj)), (Big_int.of_int (1)))))))), zj)) in
  let zys = (shiftr ((and_vec (zys, (zslice_mask ((length zys), zjz7, (add_int ((sub_int (ziz7, zjz7)), (Big_int.of_int (1)))))))), zjz7)) in
  or_vec ((shiftl ((zextzzv (zs, zxs)), (add_int ((sub_int (ziz7, zjz7)), (Big_int.of_int (1)))))), (zextzzv (zs, zys))))

and zplace_subrange ((zm, zxs, zi, zj, zshift) : (Big_int.num * (bit) list * Big_int.num * Big_int.num * Big_int.num)) : (bit) list = sail_call (fun r ->
  let zxs = (shiftr ((and_vec (zxs, (zslice_mask ((length zxs), zj, (add_int ((sub_int (zi, zj)), (Big_int.of_int (1)))))))), zj)) in
  shiftl ((zextzzv (zm, zxs)), zshift))

and zplace_slice ((zm, zxs, zi, zl, zshift) : (Big_int.num * (bit) list * Big_int.num * Big_int.num * Big_int.num)) : (bit) list = sail_call (fun r ->
  let zxs = (shiftr ((and_vec (zxs, (zslice_mask ((length zxs), zi, zl)))), zi)) in
  shiftl ((zextzzv (zm, zxs)), zshift))

and zset_slice_zzeros ((zn, zxs, zi, zl) : (Big_int.num * (bit) list * Big_int.num * Big_int.num)) : (bit) list = sail_call (fun r ->
  let zys = (zslice_mask (zn, zi, zl)) in
  and_vec (zxs, (not_vec zys)))

and zset_subrange_zzeros ((zn, zxs, zhi, zlo) : (Big_int.num * (bit) list * Big_int.num * Big_int.num)) : (bit) list = sail_call (fun r ->
  zset_slice_zzeros (zn, zxs, zlo, (add_int ((sub_int (zhi, zlo)), (Big_int.of_int (1))))))

and zzzext_slice ((zm, zxs, zi, zl) : (Big_int.num * (bit) list * Big_int.num * Big_int.num)) : (bit) list = sail_call (fun r ->
  let zxs = (shiftr ((and_vec (zxs, (zslice_mask ((length zxs), zi, zl)))), zi)) in
  zextzzv (zm, zxs))

and zzzext_subrange ((zm, zxs, zi, zj) : (Big_int.num * (bit) list * Big_int.num * Big_int.num)) : (bit) list = sail_call (fun r ->
  zzzext_slice (zm, zxs, zj, (add_int ((sub_int (zi, zj)), (Big_int.of_int (1))))))

and zsext_slice ((zm, zxs, zi, zl) : (Big_int.num * (bit) list * Big_int.num * Big_int.num)) : (bit) list = sail_call (fun r ->
  let zxs = (arith_shiftr ((shiftl ((and_vec (zxs, (zslice_mask ((length zxs), zi, zl)))), (sub_int ((sub_int ((length zxs), zi)), zl)))), (sub_int ((length zxs), zl)))) in
  zextsv (zm, zxs))

and zsext_subrange ((zm, zxs, zi, zj) : (Big_int.num * (bit) list * Big_int.num * Big_int.num)) : (bit) list = sail_call (fun r ->
  zsext_slice (zm, zxs, zj, (add_int ((sub_int (zi, zj)), (Big_int.of_int (1))))))

and zplace_slice_signed ((zm, zxs, zi, zl, zshift) : (Big_int.num * (bit) list * Big_int.num * Big_int.num * Big_int.num)) : (bit) list = sail_call (fun r ->
  shiftl ((zsext_slice (zm, zxs, zi, zl)), zshift))

and zplace_subrange_signed ((zm, zxs, zi, zj, zshift) : (Big_int.num * (bit) list * Big_int.num * Big_int.num * Big_int.num)) : (bit) list = sail_call (fun r ->
  zplace_slice_signed (zm, zxs, zj, (add_int ((sub_int (zi, zj)), (Big_int.of_int (1)))), zshift))

and zunsigned_slice ((zxs, zi, zl) : ((bit) list * Big_int.num * Big_int.num)) : Big_int.num = sail_call (fun r ->
  let zxs = (shiftr ((and_vec (zxs, (zslice_mask ((length zxs), zi, zl)))), zi)) in
  modulus ((uint zxs), (pow2 zl)))

and zunsigned_subrange ((zxs, zi, zj) : ((bit) list * Big_int.num * Big_int.num)) : Big_int.num = sail_call (fun r ->
  let zxs = (shiftr ((and_vec (zxs, (zslice_mask ((length zxs), zj, (add_int ((sub_int (zi, zj)), (Big_int.of_int (1)))))))), zi)) in
  modulus ((uint zxs), (pow2 (add_int ((sub_int (zi, zj)), (Big_int.of_int (1)))))))

and zzzext_ones ((zn, zm) : (Big_int.num * Big_int.num)) : (bit) list = sail_call (fun r ->
  let zv = (zextsv ((z__id zn), ([B1]))) in
  shiftr (zv, (sub_int (zn, zm))))

and zvector_update_subrange_from_subrange ((zn, zv1, zs1, ze1, zv2, zs2, ze2) : (Big_int.num * (bit) list * Big_int.num * Big_int.num * (bit) list * Big_int.num * Big_int.num)) : (bit) list = sail_call (fun r ->
  let zxs = (shiftr ((and_vec (zv2, (zslice_mask ((length zv2), ze2, (add_int ((sub_int (zs2, ze2)), (Big_int.of_int (1)))))))), ze2)) in
  let zxs = (shiftl ((zextzzv (zn, zxs)), ze1)) in
  let zys = (and_vec (zv1, (not_vec (zslice_mask ((length zxs), ze1, (add_int ((sub_int (zs1, ze1)), (Big_int.of_int (1))))))))) in
  or_vec (zxs, zys))

and zvector_update_subrange_from_integer_subrange ((zn1, zv1, zs1, ze1, zi, zs2, ze2) : (Big_int.num * (bit) list * Big_int.num * Big_int.num * Big_int.num * Big_int.num * Big_int.num)) : (bit) list = sail_call (fun r ->
  let zv2 = (get_slice_int (zn1, zi, ze2)) in
  zvector_update_subrange_from_subrange (zn1, zv1, zs1, ze1, zv2, (sub_int (zs2, ze2)), Big_int.zero))

and zMAX (zn : (Big_int.num)) : Big_int.num = sail_call (fun r ->
  sub_int ((pow2 zn), (Big_int.of_int (1))))

and zalign_down ((zn, zbv) : (Big_int.num * (bit) list)) : (bit) list = sail_call (fun r ->
  update_subrange (zbv, (sub_int ((z__id zn), (Big_int.of_int (1)))), Big_int.zero, (zzzeros_implicit (sub_int ((sub_int ((z__id zn), (Big_int.of_int (1)))), (sub_int (Big_int.zero, (Big_int.of_int (1)))))))))

let zotype_unsealed = Big_int.zero;;

let zotype_sentry = (Big_int.of_int (1));;

let zotype_sentry_id = (Big_int.of_int (2));;

let zotype_sentry_ie = (Big_int.of_int (3));;

let zotype_sentry_bid = (Big_int.of_int (4));;

let zotype_sentry_bie = (Big_int.of_int (5));;

type zCPtrCmpOp = | ZCEQ | ZCNE | ZCLT | ZCLE | ZCLTU | ZCLEU | ZCEXEQ | ZCNEXEQ;;

let string_of_zCPtrCmpOp = function
  | ZCEQ -> "CEQ"
  | ZCNE -> "CNE"
  | ZCLT -> "CLT"
  | ZCLE -> "CLE"
  | ZCLTU -> "CLTU"
  | ZCLEU -> "CLEU"
  | ZCEXEQ -> "CEXEQ"
  | ZCNEXEQ -> "CNEXEQ";;

let rec zundefined_CPtrCmpOp (() : (unit)) : zCPtrCmpOp = sail_call (fun r ->
  internal_pick [ZCEQ; ZCNE; ZCLT; ZCLE; ZCLTU; ZCLEU; ZCEXEQ; ZCNEXEQ])

and zCPtrCmpOp_of_num (zargz3 : (Big_int.num)) : zCPtrCmpOp = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__526 when (eq_int (zl__526, Big_int.zero)) -> ZCEQ
    | zl__527 when (eq_int (zl__527, (Big_int.of_int (1)))) -> ZCNE
    | zl__528 when (eq_int (zl__528, (Big_int.of_int (2)))) -> ZCLT
    | zl__529 when (eq_int (zl__529, (Big_int.of_int (3)))) -> ZCLE
    | zl__530 when (eq_int (zl__530, (Big_int.of_int (4)))) -> ZCLTU
    | zl__531 when (eq_int (zl__531, (Big_int.of_int (5)))) -> ZCLEU
    | zl__532 when (eq_int (zl__532, (Big_int.of_int (6)))) -> ZCEXEQ
    | _ -> ZCNEXEQ
  end)

and znum_of_CPtrCmpOp (zargz3 : (zCPtrCmpOp)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZCEQ -> Big_int.zero
    | ZCNE -> (Big_int.of_int (1))
    | ZCLT -> (Big_int.of_int (2))
    | ZCLE -> (Big_int.of_int (3))
    | ZCLTU -> (Big_int.of_int (4))
    | ZCLEU -> (Big_int.of_int (5))
    | ZCEXEQ -> (Big_int.of_int (6))
    | ZCNEXEQ -> (Big_int.of_int (7))
  end)

type zClearRegSet = | ZGPRegs | ZFPRegs;;

let string_of_zClearRegSet = function
  | ZGPRegs -> "GPRegs"
  | ZFPRegs -> "FPRegs";;

let rec zundefined_ClearRegSet (() : (unit)) : zClearRegSet = sail_call (fun r ->
  internal_pick [ZGPRegs; ZFPRegs])

and zClearRegSet_of_num (zargz3 : (Big_int.num)) : zClearRegSet = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__525 when (eq_int (zl__525, Big_int.zero)) -> ZGPRegs
    | _ -> ZFPRegs
  end)

and znum_of_ClearRegSet (zargz3 : (zClearRegSet)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZGPRegs -> Big_int.zero
    | ZFPRegs -> (Big_int.of_int (1))
  end)

type zCapEx =
  | ZCapEx_None
  | ZCapEx_BoundsViolation
  | ZCapEx_TagViolation
  | ZCapEx_SealViolation
  | ZCapEx_TypeViolation
  | ZCapEx_UserDefViolation
  | ZCapEx_UnalignedBase
  | ZCapEx_GlobalViolation
  | ZCapEx_PermitExecuteViolation
  | ZCapEx_PermitLoadViolation
  | ZCapEx_PermitStoreViolation
  | ZCapEx_PermitLoadCapViolation
  | ZCapEx_PermitStoreCapViolation
  | ZCapEx_AccessSystemRegsViolation
  | ZCapEx_PermitCInvokeViolation
  | ZCapEx_PermitSetCIDViolation;;

let string_of_zCapEx = function
  | ZCapEx_None -> "CapEx_None"
  | ZCapEx_BoundsViolation -> "CapEx_BoundsViolation"
  | ZCapEx_TagViolation -> "CapEx_TagViolation"
  | ZCapEx_SealViolation -> "CapEx_SealViolation"
  | ZCapEx_TypeViolation -> "CapEx_TypeViolation"
  | ZCapEx_UserDefViolation -> "CapEx_UserDefViolation"
  | ZCapEx_UnalignedBase -> "CapEx_UnalignedBase"
  | ZCapEx_GlobalViolation -> "CapEx_GlobalViolation"
  | ZCapEx_PermitExecuteViolation -> "CapEx_PermitExecuteViolation"
  | ZCapEx_PermitLoadViolation -> "CapEx_PermitLoadViolation"
  | ZCapEx_PermitStoreViolation -> "CapEx_PermitStoreViolation"
  | ZCapEx_PermitLoadCapViolation -> "CapEx_PermitLoadCapViolation"
  | ZCapEx_PermitStoreCapViolation -> "CapEx_PermitStoreCapViolation"
  | ZCapEx_AccessSystemRegsViolation -> "CapEx_AccessSystemRegsViolation"
  | ZCapEx_PermitCInvokeViolation -> "CapEx_PermitCInvokeViolation"
  | ZCapEx_PermitSetCIDViolation -> "CapEx_PermitSetCIDViolation";;

let rec zundefined_CapEx (() : (unit)) : zCapEx = sail_call (fun r ->
  internal_pick [ZCapEx_None; ZCapEx_BoundsViolation; ZCapEx_TagViolation; ZCapEx_SealViolation; ZCapEx_TypeViolation; ZCapEx_UserDefViolation; ZCapEx_UnalignedBase; ZCapEx_GlobalViolation; ZCapEx_PermitExecuteViolation; ZCapEx_PermitLoadViolation; ZCapEx_PermitStoreViolation; ZCapEx_PermitLoadCapViolation; ZCapEx_PermitStoreCapViolation; ZCapEx_AccessSystemRegsViolation; ZCapEx_PermitCInvokeViolation; ZCapEx_PermitSetCIDViolation])

and zCapEx_of_num (zargz3 : (Big_int.num)) : zCapEx = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__510 when (eq_int (zl__510, Big_int.zero)) -> ZCapEx_None
    | zl__511 when (eq_int (zl__511, (Big_int.of_int (1)))) ->
      ZCapEx_BoundsViolation
    | zl__512 when (eq_int (zl__512, (Big_int.of_int (2)))) ->
      ZCapEx_TagViolation
    | zl__513 when (eq_int (zl__513, (Big_int.of_int (3)))) ->
      ZCapEx_SealViolation
    | zl__514 when (eq_int (zl__514, (Big_int.of_int (4)))) ->
      ZCapEx_TypeViolation
    | zl__515 when (eq_int (zl__515, (Big_int.of_int (5)))) ->
      ZCapEx_UserDefViolation
    | zl__516 when (eq_int (zl__516, (Big_int.of_int (6)))) ->
      ZCapEx_UnalignedBase
    | zl__517 when (eq_int (zl__517, (Big_int.of_int (7)))) ->
      ZCapEx_GlobalViolation
    | zl__518 when (eq_int (zl__518, (Big_int.of_int (8)))) ->
      ZCapEx_PermitExecuteViolation
    | zl__519 when (eq_int (zl__519, (Big_int.of_int (9)))) ->
      ZCapEx_PermitLoadViolation
    | zl__520 when (eq_int (zl__520, (Big_int.of_int (10)))) ->
      ZCapEx_PermitStoreViolation
    | zl__521 when (eq_int (zl__521, (Big_int.of_int (11)))) ->
      ZCapEx_PermitLoadCapViolation
    | zl__522 when (eq_int (zl__522, (Big_int.of_int (12)))) ->
      ZCapEx_PermitStoreCapViolation
    | zl__523 when (eq_int (zl__523, (Big_int.of_int (13)))) ->
      ZCapEx_AccessSystemRegsViolation
    | zl__524 when (eq_int (zl__524, (Big_int.of_int (14)))) ->
      ZCapEx_PermitCInvokeViolation
    | _ -> ZCapEx_PermitSetCIDViolation
  end)

and znum_of_CapEx (zargz3 : (zCapEx)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZCapEx_None -> Big_int.zero
    | ZCapEx_BoundsViolation -> (Big_int.of_int (1))
    | ZCapEx_TagViolation -> (Big_int.of_int (2))
    | ZCapEx_SealViolation -> (Big_int.of_int (3))
    | ZCapEx_TypeViolation -> (Big_int.of_int (4))
    | ZCapEx_UserDefViolation -> (Big_int.of_int (5))
    | ZCapEx_UnalignedBase -> (Big_int.of_int (6))
    | ZCapEx_GlobalViolation -> (Big_int.of_int (7))
    | ZCapEx_PermitExecuteViolation -> (Big_int.of_int (8))
    | ZCapEx_PermitLoadViolation -> (Big_int.of_int (9))
    | ZCapEx_PermitStoreViolation -> (Big_int.of_int (10))
    | ZCapEx_PermitLoadCapViolation -> (Big_int.of_int (11))
    | ZCapEx_PermitStoreCapViolation -> (Big_int.of_int (12))
    | ZCapEx_AccessSystemRegsViolation -> (Big_int.of_int (13))
    | ZCapEx_PermitCInvokeViolation -> (Big_int.of_int (14))
    | ZCapEx_PermitSetCIDViolation -> (Big_int.of_int (15))
  end)

and zCapExCode (zex : (zCapEx)) : (bit) list = sail_call (fun r ->
  begin
    match zex with
    | ZCapEx_None -> [B0; B0; B0; B0; B0]
    | ZCapEx_BoundsViolation -> [B0; B0; B0; B0; B1]
    | ZCapEx_TagViolation -> [B0; B0; B0; B1; B0]
    | ZCapEx_SealViolation -> [B0; B0; B0; B1; B1]
    | ZCapEx_TypeViolation -> [B0; B0; B1; B0; B0]
    | ZCapEx_UserDefViolation -> [B0; B1; B0; B0; B0]
    | ZCapEx_UnalignedBase -> [B0; B1; B0; B1; B1]
    | ZCapEx_GlobalViolation -> [B1; B0; B0; B0; B0]
    | ZCapEx_PermitExecuteViolation -> [B1; B0; B0; B0; B1]
    | ZCapEx_PermitLoadViolation -> [B1; B0; B0; B1; B0]
    | ZCapEx_PermitStoreViolation -> [B1; B0; B0; B1; B1]
    | ZCapEx_PermitLoadCapViolation -> [B1; B0; B1; B0; B0]
    | ZCapEx_PermitStoreCapViolation -> [B1; B0; B1; B0; B1]
    | ZCapEx_AccessSystemRegsViolation -> [B1; B1; B0; B0; B0]
    | ZCapEx_PermitCInvokeViolation -> [B1; B1; B0; B0; B1]
    | ZCapEx_PermitSetCIDViolation -> [B1; B1; B1; B0; B0]
  end)

and zstring_of_capex (zex : (zCapEx)) : string = sail_call (fun r ->
  begin
    match zex with
    | ZCapEx_None -> "None"
    | ZCapEx_BoundsViolation -> "BoundsViolation"
    | ZCapEx_TagViolation -> "TagViolation"
    | ZCapEx_SealViolation -> "SealViolation"
    | ZCapEx_TypeViolation -> "TypeViolation"
    | ZCapEx_UserDefViolation -> "UserDefViolation"
    | ZCapEx_UnalignedBase -> "UnalignedBounds"
    | ZCapEx_GlobalViolation -> "GlobalViolation"
    | ZCapEx_PermitExecuteViolation -> "PermitExecuteViolation"
    | ZCapEx_PermitLoadViolation -> "PermitLoadViolation"
    | ZCapEx_PermitStoreViolation -> "PermitStoreViolation"
    | ZCapEx_PermitLoadCapViolation -> "PermitLoadCapViolation"
    | ZCapEx_PermitStoreCapViolation -> "PermitStoreCapViolation"
    | ZCapEx_AccessSystemRegsViolation -> "AccessSystemRegsViolation"
    | ZCapEx_PermitCInvokeViolation -> "PermitCInvokeViolation"
    | ZCapEx_PermitSetCIDViolation -> "PermitSetCIDViolation"
  end)

type  zcapreg_idx = zbits;;

let string_of_zcapreg_idx (gs1117 :  zcapreg_idx) = string_of_zbits gs1117;;

let zPCC_IDX = [B1; B0; B0; B0; B0; B0];;

let zDDC_IDX = [B1; B0; B0; B0; B0; B1];;

let zCGP_IDX = [B0; B0; B0; B1; B1];;

type  zscreg = zbits;;

let string_of_zscreg (gs1118 :  zscreg) = string_of_zbits gs1118;;

let zcap_sizze = (Big_int.of_int (8));;

let zlog2_cap_sizze = (Big_int.of_int (3));;

type  zCapBits = zbits;;

let string_of_zCapBits (gs1119 :  zCapBits) = string_of_zbits gs1119;;

let zcap_otype_width = (Big_int.of_int (4));;

let zcap_mantissa_width = (Big_int.of_int (9));;

let zcap_E_width = (Big_int.of_int (5));;

let zcap_addr_width = (Big_int.of_int (32));;

let zcap_len_width = (add_int ((Big_int.of_int (32)), (Big_int.of_int (1))));;

let zlog2_revocation_granule_sizze = (Big_int.of_int (3));;

module ZEncCapability = struct
  type  zEncCapability = {
    zreserved : zbits;
    zcperms : zbits;
    zcotype : zbits;
    zcE : zbits;
    zT : zbits;
    zB : zbits;
    zaddress : zbits
  }
  end;;

let string_of_zEncCapability (gs1120 :  ZEncCapability.zEncCapability) =
  "{reserved = " ^ string_of_zbits gs1120.ZEncCapability.zreserved
  ^ ", cperms = " ^ string_of_zbits gs1120.ZEncCapability.zcperms
  ^ ", cotype = " ^ string_of_zbits gs1120.ZEncCapability.zcotype
  ^ ", cE = " ^ string_of_zbits gs1120.ZEncCapability.zcE
  ^ ", T = " ^ string_of_zbits gs1120.ZEncCapability.zT
  ^ ", B = " ^ string_of_zbits gs1120.ZEncCapability.zB
  ^ ", address = " ^ string_of_zbits gs1120.ZEncCapability.zaddress ^ "}";;

let rec zundefined_EncCapability (() : (unit)) : ZEncCapability.zEncCapability = sail_call (fun r ->
  {ZEncCapability.zreserved = undefined_bitvector (Big_int.of_int (1));
  ZEncCapability.zcperms = undefined_bitvector (Big_int.of_int (6));
  ZEncCapability.zcotype = undefined_bitvector (Big_int.of_int (3));
  ZEncCapability.zcE = undefined_bitvector (Big_int.of_int (4));
  ZEncCapability.zT = undefined_bitvector (Big_int.of_int (9));
  ZEncCapability.zB = undefined_bitvector (Big_int.of_int (9));
  ZEncCapability.zaddress = undefined_bitvector (Big_int.of_int (32))})

and zcapBitsToEncCapability (zc : ((bit) list)) : ZEncCapability.zEncCapability = sail_call (fun r ->
  {ZEncCapability.zreserved = subrange (zc, (Big_int.of_int (63)), (Big_int.of_int (63)));
  ZEncCapability.zcperms = subrange (zc, (Big_int.of_int (62)), (Big_int.of_int (57)));
  ZEncCapability.zcotype = subrange (zc, (Big_int.of_int (56)), (Big_int.of_int (54)));
  ZEncCapability.zcE = subrange (zc, (Big_int.of_int (53)), (Big_int.of_int (50)));
  ZEncCapability.zT = subrange (zc, (Big_int.of_int (49)), (Big_int.of_int (41)));
  ZEncCapability.zB = subrange (zc, (Big_int.of_int (40)), (Big_int.of_int (32)));
  ZEncCapability.zaddress = subrange (zc, (Big_int.of_int (31)), Big_int.zero)})

and zencCapToBits (zcap : (ZEncCapability.zEncCapability)) : (bit) list = sail_call (fun r ->
  append ((zcap.zreserved), (append ((zcap.zcperms), (append ((zcap.zcotype), (append ((zcap.zcE), (append ((zcap.zT), (append ((zcap.zB), (zcap.zaddress)))))))))))))

let zcap_max_addr = (zMAX zcap_addr_width);;

let zcap_max_otype = (zMAX zcap_otype_width);;

let zcap_perms_width = (Big_int.of_int (12));;

type  zCapAddrBits = zbits;;

let string_of_zCapAddrBits (gs1133 :  zCapAddrBits) = string_of_zbits gs1133;;

type  zCapAddrInt = Big_int.num;;

let string_of_zCapAddrInt (gs1134 :  zCapAddrInt) = string_of_zint gs1134;;

type  zCapLenBits = zbits;;

let string_of_zCapLenBits (gs1135 :  zCapLenBits) = string_of_zbits gs1135;;

type  zCapLen = Big_int.num;;

let string_of_zCapLen (gs1136 :  zCapLen) = string_of_zint gs1136;;

type  zCapPermsBits = zbits;;

let string_of_zCapPermsBits (gs1137 :  zCapPermsBits) = string_of_zbits gs1137;;

let zcap_max_E = (Big_int.of_int (24));;

let zcap_max_E_bits = (zto_bits (zcap_E_width, (Big_int.of_int (24))));;

let zcap_reset_T = (append ([B1], (zzzeros_implicit (sub_int (zcap_mantissa_width, (Big_int.of_int (1)))))));;

module ZCapability = struct
  type  zCapability = {
    ztag : bool;
    zperm_user0 : bool;
    zpermit_seal : bool;
    zpermit_unseal : bool;
    zpermit_execute : bool;
    zaccess_system_regs : bool;
    zpermit_load_store_cap : bool;
    zpermit_load : bool;
    zpermit_store_local_cap : bool;
    zpermit_load_mutable : bool;
    zpermit_store : bool;
    zpermit_load_global : bool;
    zglobal : bool;
    zreserved : zbits;
    zE : zbits;
    zB : zbits;
    zT : zbits;
    zotype : zbits;
    zaddress : zbits
  }
  end;;

let string_of_zCapability (gs1138 :  ZCapability.zCapability) =
  "{tag = " ^ string_of_zbool gs1138.ZCapability.ztag
  ^ ", perm_user0 = " ^ string_of_zbool gs1138.ZCapability.zperm_user0
  ^ ", permit_seal = " ^ string_of_zbool gs1138.ZCapability.zpermit_seal
  ^ ", permit_unseal = " ^ string_of_zbool gs1138.ZCapability.zpermit_unseal
  ^ ", permit_execute = " ^ string_of_zbool gs1138.ZCapability.zpermit_execute
  ^ ", access_system_regs = " ^ string_of_zbool gs1138.ZCapability.zaccess_system_regs
  ^ ", permit_load_store_cap = " ^ string_of_zbool gs1138.ZCapability.zpermit_load_store_cap
  ^ ", permit_load = " ^ string_of_zbool gs1138.ZCapability.zpermit_load
  ^ ", permit_store_local_cap = " ^ string_of_zbool gs1138.ZCapability.zpermit_store_local_cap
  ^ ", permit_load_mutable = " ^ string_of_zbool gs1138.ZCapability.zpermit_load_mutable
  ^ ", permit_store = " ^ string_of_zbool gs1138.ZCapability.zpermit_store
  ^ ", permit_load_global = " ^ string_of_zbool gs1138.ZCapability.zpermit_load_global
  ^ ", global = " ^ string_of_zbool gs1138.ZCapability.zglobal
  ^ ", reserved = " ^ string_of_zbits gs1138.ZCapability.zreserved
  ^ ", E = " ^ string_of_zbits gs1138.ZCapability.zE
  ^ ", B = " ^ string_of_zbits gs1138.ZCapability.zB
  ^ ", T = " ^ string_of_zbits gs1138.ZCapability.zT
  ^ ", otype = " ^ string_of_zbits gs1138.ZCapability.zotype
  ^ ", address = " ^ string_of_zbits gs1138.ZCapability.zaddress ^ "}";;

let rec zundefined_Capability (() : (unit)) : ZCapability.zCapability = sail_call (fun r ->
  {ZCapability.ztag = undefined_bool ();
  ZCapability.zperm_user0 = undefined_bool ();
  ZCapability.zpermit_seal = undefined_bool ();
  ZCapability.zpermit_unseal = undefined_bool ();
  ZCapability.zpermit_execute = undefined_bool ();
  ZCapability.zaccess_system_regs = undefined_bool ();
  ZCapability.zpermit_load_store_cap = undefined_bool ();
  ZCapability.zpermit_load = undefined_bool ();
  ZCapability.zpermit_store_local_cap = undefined_bool ();
  ZCapability.zpermit_load_mutable = undefined_bool ();
  ZCapability.zpermit_store = undefined_bool ();
  ZCapability.zpermit_load_global = undefined_bool ();
  ZCapability.zglobal = undefined_bool ();
  ZCapability.zreserved = undefined_bitvector (Big_int.of_int (1));
  ZCapability.zE = undefined_bitvector (Big_int.of_int (5));
  ZCapability.zB = undefined_bitvector (Big_int.of_int (9));
  ZCapability.zT = undefined_bitvector (Big_int.of_int (9));
  ZCapability.zotype = undefined_bitvector (Big_int.of_int (4));
  ZCapability.zaddress = undefined_bitvector (Big_int.of_int (32))})

let znull_cap = ({ZCapability.ztag = false;
ZCapability.zperm_user0 = false;
ZCapability.zpermit_seal = false;
ZCapability.zpermit_unseal = false;
ZCapability.zpermit_execute = false;
ZCapability.zaccess_system_regs = false;
ZCapability.zpermit_load_store_cap = false;
ZCapability.zpermit_load = false;
ZCapability.zpermit_store_local_cap = false;
ZCapability.zpermit_load_mutable = false;
ZCapability.zpermit_store = false;
ZCapability.zpermit_load_global = false;
ZCapability.zglobal = false;
ZCapability.zreserved = zzzeros_implicit (Big_int.of_int (1));
ZCapability.zB = zzzeros_implicit (Big_int.of_int (9));
ZCapability.zT = zzzeros_implicit (Big_int.of_int (9));
ZCapability.zE = zzzeros_implicit (Big_int.of_int (5));
ZCapability.zotype = zto_bits (zcap_otype_width, zotype_unsealed);
ZCapability.zaddress = zzzeros_implicit (Big_int.of_int (32))});;

let zmax_bounds_cap = ({znull_cap with ZCapability.zE = zcap_max_E_bits; ZCapability.zT = zcap_reset_T; ZCapability.ztag = true; ZCapability.zglobal = true});;

let zroot_cap_exe = ({zmax_bounds_cap with ZCapability.zpermit_execute = true; ZCapability.zaccess_system_regs = true; ZCapability.zpermit_load_store_cap = true; ZCapability.zpermit_load = true; ZCapability.zpermit_load_mutable = true; ZCapability.zpermit_load_global = true});;

let zroot_cap_mem = ({zmax_bounds_cap with ZCapability.zpermit_load_store_cap = true; ZCapability.zpermit_load = true; ZCapability.zpermit_store_local_cap = true; ZCapability.zpermit_load_mutable = true; ZCapability.zpermit_store = true; ZCapability.zpermit_load_global = true});;

let zroot_cap_seal = ({zmax_bounds_cap with ZCapability.zperm_user0 = true; ZCapability.zpermit_seal = true; ZCapability.zpermit_unseal = true});;

let rec zencCapabilityToCapability ((zt, zc) : (bool * ZEncCapability.zEncCapability)) : ZCapability.zCapability = sail_call (fun r ->
  let zperm_user0 = ref (false : bool) in
  let zpermit_seal = ref (false : bool) in
  let zpermit_unseal = ref (false : bool) in
  let zpermit_execute = ref (false : bool) in
  let zaccess_system_regs = ref (false : bool) in
  let zpermit_load_store_cap = ref (false : bool) in
  let zpermit_load = ref (false : bool) in
  let zpermit_store_local_cap = ref (false : bool) in
  let zpermit_load_mutable = ref (false : bool) in
  let zpermit_store = ref (false : bool) in
  let zpermit_load_global = ref (false : bool) in
  let zglobal = ref ((zbit_to_bool (access ((zc.zcperms), (Big_int.of_int (5))))) : bool) in
  let zisExe = ref (false : bool) in
  begin
    begin
      match (subrange ((zc.zcperms), (Big_int.of_int (4)), Big_int.zero)) with
      | zv__0 when (eq_list ((subrange (zv__0, (Big_int.of_int (4)), (Big_int.of_int (3)))), [B1; B1])) ->
        let zSL = (access (zv__0, (Big_int.of_int (2)))) in
        let zLM = (access (zv__0, (Big_int.of_int (1)))) in
        let zLG = (access (zv__0, Big_int.zero)) in
        begin
          (zpermit_load := (true));
          (zpermit_load_store_cap := (true));
          (zpermit_store := (true));
          (zpermit_store_local_cap := (zbit_to_bool zSL));
          (zpermit_load_mutable := (zbit_to_bool zLM));
          (zpermit_load_global := (zbit_to_bool zLG))
        end
      | zv__3 when (eq_list ((subrange (zv__3, (Big_int.of_int (4)), (Big_int.of_int (2)))), [B1; B0; B1])) ->
        let zLM = (access (zv__3, (Big_int.of_int (1)))) in
        let zLG = (access (zv__3, Big_int.zero)) in
        begin
          (zpermit_load := (true));
          (zpermit_load_store_cap := (true));
          (zpermit_load_mutable := (zbit_to_bool zLM));
          (zpermit_load_global := (zbit_to_bool zLG))
        end
      | zb__0 when (eq_list (zb__0, [B1; B0; B0; B0; B0])) ->
        begin (zpermit_store := (true)); (zpermit_load_store_cap := (true)) end
      | zv__6 when (eq_list ((subrange (zv__6, (Big_int.of_int (4)), (Big_int.of_int (2)))), [B1; B0; B0])) ->
        let zLD = (access (zv__6, (Big_int.of_int (1)))) in
        let zSD = (access (zv__6, Big_int.zero)) in
        begin
          (zpermit_load := (zbit_to_bool zLD));
          (zpermit_store := (zbit_to_bool zSD))
        end
      | zv__9 when (eq_list ((subrange (zv__9, (Big_int.of_int (4)), (Big_int.of_int (3)))), [B0; B1])) ->
        let zSR = (access (zv__9, (Big_int.of_int (2)))) in
        let zLM = (access (zv__9, (Big_int.of_int (1)))) in
        let zLG = (access (zv__9, Big_int.zero)) in
        begin
          (zisExe := (true));
          (zpermit_execute := (true));
          (zpermit_load := (true));
          (zpermit_load_store_cap := (true));
          (zaccess_system_regs := (zbit_to_bool zSR));
          (zpermit_load_mutable := (zbit_to_bool zLM));
          (zpermit_load_global := (zbit_to_bool zLG))
        end
      | zv__12 ->
        let zU0 = (access (zv__12, (Big_int.of_int (2)))) in
        let zSE = (access (zv__12, (Big_int.of_int (1)))) in
        let zUS = (access (zv__12, Big_int.zero)) in
        begin
          (zperm_user0 := (zbit_to_bool zU0));
          (zpermit_seal := (zbit_to_bool zSE));
          (zpermit_unseal := (zbit_to_bool zUS))
        end
    end;
    let zotype = (append (((if (!zisExe || (eq_list ((zc.zcotype), [B0; B0; B0]))) then [B0] else [B1])), (zc.zcotype))) in
    let zE = ((if (eq_list ((zc.zcE), [B1; B1; B1; B1])) then zcap_max_E_bits else (zzzero_extend ((Big_int.of_int (5)), (zc.zcE))))) in
    r.return ({ZCapability.ztag = zt;
    ZCapability.zperm_user0 = !zperm_user0;
    ZCapability.zpermit_seal = !zpermit_seal;
    ZCapability.zpermit_unseal = !zpermit_unseal;
    ZCapability.zpermit_execute = !zpermit_execute;
    ZCapability.zaccess_system_regs = !zaccess_system_regs;
    ZCapability.zpermit_load_store_cap = !zpermit_load_store_cap;
    ZCapability.zpermit_load = !zpermit_load;
    ZCapability.zpermit_store_local_cap = !zpermit_store_local_cap;
    ZCapability.zpermit_load_mutable = !zpermit_load_mutable;
    ZCapability.zpermit_store = !zpermit_store;
    ZCapability.zpermit_load_global = !zpermit_load_global;
    ZCapability.zglobal = !zglobal;
    ZCapability.zreserved = zc.zreserved;
    ZCapability.zE = zE;
    ZCapability.zB = zc.zB;
    ZCapability.zT = zc.zT;
    ZCapability.zotype = zotype;
    ZCapability.zaddress = zc.zaddress})
  end)

and zcapBitsToCapability ((zt, zc) : (bool * (bit) list)) : ZCapability.zCapability = sail_call (fun r ->
  zencCapabilityToCapability (zt, (zcapBitsToEncCapability zc)))

and zcapToEncCap (zcap : (ZCapability.zCapability)) : ZEncCapability.zEncCapability = sail_call (fun r ->
  let zcperms = ref ((zzzeros_implicit (Big_int.of_int (6))) : (bit) list) in
  begin
    (zcperms := (update (!zcperms, (Big_int.of_int (5)), (zbool_to_bit (zcap.zglobal)))));
    (if ((zcap.zpermit_execute) && ((zcap.zpermit_load) && (zcap.zpermit_load_store_cap))) then (begin
      (zcperms := (update_subrange (!zcperms, (Big_int.of_int (4)), (Big_int.of_int (3)), [B0; B1])));
      (zcperms := (update (!zcperms, (Big_int.of_int (2)), (zbool_to_bit (zcap.zaccess_system_regs)))));
      (zcperms := (update (!zcperms, (Big_int.of_int (1)), (zbool_to_bit (zcap.zpermit_load_mutable)))));
      (zcperms := (update (!zcperms, Big_int.zero, (zbool_to_bit (zcap.zpermit_load_global)))))
    end) else ((if ((zcap.zpermit_load) && ((zcap.zpermit_load_store_cap) && (zcap.zpermit_store))) then (begin
      (zcperms := (update_subrange (!zcperms, (Big_int.of_int (4)), (Big_int.of_int (3)), [B1; B1])));
      (zcperms := (update (!zcperms, (Big_int.of_int (2)), (zbool_to_bit (zcap.zpermit_store_local_cap)))));
      (zcperms := (update (!zcperms, (Big_int.of_int (1)), (zbool_to_bit (zcap.zpermit_load_mutable)))));
      (zcperms := (update (!zcperms, Big_int.zero, (zbool_to_bit (zcap.zpermit_load_global)))))
    end) else ((if ((zcap.zpermit_load) && (zcap.zpermit_load_store_cap)) then (begin
      (zcperms := (update_subrange (!zcperms, (Big_int.of_int (4)), (Big_int.of_int (2)), [B1; B0; B1])));
      (zcperms := (update (!zcperms, (Big_int.of_int (1)), (zbool_to_bit (zcap.zpermit_load_mutable)))));
      (zcperms := (update (!zcperms, Big_int.zero, (zbool_to_bit (zcap.zpermit_load_global)))))
    end) else ((if ((zcap.zpermit_store) && (zcap.zpermit_load_store_cap)) then ((zcperms := (update_subrange (!zcperms, (Big_int.of_int (4)), Big_int.zero, [B1; B0; B0; B0; B0])))) else ((if ((zcap.zpermit_load) || (zcap.zpermit_store)) then (begin
      (zcperms := (update_subrange (!zcperms, (Big_int.of_int (4)), (Big_int.of_int (2)), [B1; B0; B0])));
      (zcperms := (update (!zcperms, (Big_int.of_int (1)), (zbool_to_bit (zcap.zpermit_load)))));
      (zcperms := (update (!zcperms, Big_int.zero, (zbool_to_bit (zcap.zpermit_store)))))
    end) else (begin
      (zcperms := (update_subrange (!zcperms, (Big_int.of_int (4)), (Big_int.of_int (3)), [B0; B0])));
      (zcperms := (update (!zcperms, (Big_int.of_int (2)), (zbool_to_bit (zcap.zperm_user0)))));
      (zcperms := (update (!zcperms, (Big_int.of_int (1)), (zbool_to_bit (zcap.zpermit_seal)))));
      (zcperms := (update (!zcperms, Big_int.zero, (zbool_to_bit (zcap.zpermit_unseal)))))
    end))))))))));
    r.return ({ZEncCapability.zcperms = !zcperms;
    ZEncCapability.zreserved = zcap.zreserved;
    ZEncCapability.zcotype = subrange ((zcap.zotype), (Big_int.of_int (2)), Big_int.zero);
    ZEncCapability.zcE = (if (eq_list ((zcap.zE), zcap_max_E_bits)) then [B1; B1; B1; B1] else (subrange ((zcap.zE), (Big_int.of_int (3)), Big_int.zero)));
    ZEncCapability.zT = zcap.zT;
    ZEncCapability.zB = zcap.zB;
    ZEncCapability.zaddress = zcap.zaddress})
  end)

and zcapToBits (zcap : (ZCapability.zCapability)) : (bit) list = sail_call (fun r ->
  zencCapToBits (zcapToEncCap zcap))

let znull_cap_bits = (zcapToBits znull_cap);;

let rec zgetCapBoundsBits (zc : (ZCapability.zCapability)) : ((bit) list * (bit) list) = sail_call (fun r ->
  let zE = (uint (zc.zE)) in
  let za = (zc.zaddress) in
  let za_mid = (vector_truncate ((shiftr (za, zE)), zcap_mantissa_width)) in
  let za_hi = ((if (zz8operatorz0zI_uz9 (za_mid, (zc.zB))) then (Big_int.of_int (1)) else Big_int.zero)) in
  let zt_hi = ((if (zz8operatorz0zI_uz9 ((zc.zT), (zc.zB))) then (Big_int.of_int (1)) else Big_int.zero)) in
  let zc_b = (sub_int (Big_int.zero, za_hi)) in
  let zc_t = (sub_int (zt_hi, za_hi)) in
  let za_top = (shiftr (za, (add_int (zE, zcap_mantissa_width)))) in
  let zbase = (vector_truncate ((append ((add_vec_int (za_top, zc_b)), (append ((zc.zB), (zzzeros_implicit zE))))), zcap_addr_width)) in
  let ztop = (vector_truncate ((append ((add_vec_int (za_top, zc_t)), (append ((zc.zT), (zzzeros_implicit zE))))), zcap_len_width)) in
  ((fun (v0, v1) -> (v1, v0)) (ztop, zbase)))

and zgetCapBounds (zcap : (ZCapability.zCapability)) : (Big_int.num * Big_int.num) = sail_call (fun r ->
  let (zbase, ztop) = (zgetCapBoundsBits zcap) in
  ((fun (v0, v1) -> (v1, v0)) (uint ztop, uint zbase)))

and zsetCapBounds ((zcap, zbase, zlength) : (ZCapability.zCapability * (bit) list * (bit) list)) : (bool * ZCapability.zCapability) = sail_call (fun r ->
  let zext_base = (append ([B0], zbase)) in
  let ztop = (add_vec (zext_base, (append ([B0], zlength)))) in
  let ze = (sub_int ((Big_int.of_int (23)), (count_leading_zeros (vector_truncateLSB (zlength, (Big_int.of_int (23))))))) in
  let ze_sat = ref (((if (gt (ze, (Big_int.of_int (14)))) then zcap_max_E else ze)) : Big_int.num) in
  let zB = ref ((vector_truncate ((shiftr (zbase, !ze_sat)), (add_int (zcap_mantissa_width, (Big_int.of_int (1)))))) : (bit) list) in
  let zT = ref ((vector_truncate ((shiftr (ztop, !ze_sat)), (add_int (zcap_mantissa_width, (Big_int.of_int (1)))))) : (bit) list) in
  let zmaskLo = ref ((zzzero_extend ((add_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (zones !ze_sat))) : (bit) list) in
  let zlostSignificantTop = ref ((zneq_int ((uint (and_vec (ztop, !zmaskLo))), Big_int.zero)) : bool) in
  begin
    (if !zlostSignificantTop then ((zT := (add_vec_int (!zT, (Big_int.of_int (1)))))) else ());
    (if (zz8operatorz0zI_uz9 ([B0; B1; B1; B1; B1; B1; B1; B1; B1; B1], (sub_vec (!zT, !zB)))) then (begin
      (if (lt (!ze_sat, (Big_int.of_int (14)))) then ((ze_sat := (min_int ((add_int (!ze_sat, (Big_int.of_int (1)))), zcap_max_E)))) else ((ze_sat := (zcap_max_E))));
      (zB := (vector_truncate ((shiftr (zbase, !ze_sat)), (add_int (zcap_mantissa_width, (Big_int.of_int (1)))))));
      (zT := (vector_truncate ((shiftr (ztop, !ze_sat)), (add_int (zcap_mantissa_width, (Big_int.of_int (1)))))));
      (zmaskLo := (zzzero_extend ((add_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (zones !ze_sat))));
      (zlostSignificantTop := (zneq_int ((uint (and_vec (ztop, !zmaskLo))), Big_int.zero)));
      (if !zlostSignificantTop then ((zT := (add_vec_int (!zT, (Big_int.of_int (1)))))) else ())
    end) else ());
    let zencE = (zto_bits (zcap_E_width, !ze_sat)) in
    let znewCap = ({zcap with ZCapability.zaddress = zbase; ZCapability.zE = zencE; ZCapability.zB = vector_truncate (!zB, zcap_mantissa_width); ZCapability.zT = vector_truncate (!zT, zcap_mantissa_width)}) in
    let zlostSignificantBase = ref ((zneq_int ((uint (and_vec (zext_base, !zmaskLo))), Big_int.zero)) : bool) in
    let zexact = (znot (!zlostSignificantBase || (!zlostSignificantTop))) in
    ((fun (v0, v1) -> (v1, v0)) (znewCap, zexact))
  end)

(* Omitting externed function count_trailing_zeros *)


and zsetCapBoundsRoundDown ((zcap, zbase, zlength) : (ZCapability.zCapability * (bit) list * (bit) list)) : ZCapability.zCapability = sail_call (fun r ->
  let zext_base = (append ([B0], zbase)) in
  let ztop = (add_vec (zext_base, (append ([B0], zlength)))) in
  let ze_l = (sub_int ((Big_int.of_int (23)), (count_leading_zeros (vector_truncateLSB (zlength, (Big_int.of_int (23))))))) in
  let ze_b = (count_trailing_zeros zbase) in
  let zE = (min_int ((Big_int.of_int (14)), (min_int (ze_l, ze_b)))) in
  let zB = (vector_truncate ((shiftr (zbase, zE)), zcap_mantissa_width)) in
  let zT = ((if ((gt (ze_l, ze_b)) || (gt (ze_l, (Big_int.of_int (14))))) then (sub_vec_int (zB, (Big_int.of_int (1)))) else (vector_truncate ((shiftr (ztop, ze_l)), zcap_mantissa_width)))) in
  {zcap with ZCapability.zaddress = zbase; ZCapability.zE = zto_bits (zcap_E_width, zE); ZCapability.zB = zB; ZCapability.zT = zT})

and zgetCapPerms (zcap : (ZCapability.zCapability)) : (bit) list = sail_call (fun r ->
  [zbool_to_bit (zcap.zperm_user0); zbool_to_bit (zcap.zpermit_seal); zbool_to_bit (zcap.zpermit_unseal); zbool_to_bit (zcap.zpermit_execute); zbool_to_bit (zcap.zaccess_system_regs); zbool_to_bit (zcap.zpermit_load_store_cap); zbool_to_bit (zcap.zpermit_load); zbool_to_bit (zcap.zpermit_store_local_cap); zbool_to_bit (zcap.zpermit_load_mutable); zbool_to_bit (zcap.zpermit_store); zbool_to_bit (zcap.zpermit_load_global); zbool_to_bit (zcap.zglobal)])

and zsetCapPerms ((zcap, zperms) : (ZCapability.zCapability * (bit) list)) : ZCapability.zCapability = sail_call (fun r ->
  {zcap with ZCapability.zperm_user0 = zbit_to_bool (access (zperms, (Big_int.of_int (11)))); ZCapability.zpermit_seal = zbit_to_bool (access (zperms, (Big_int.of_int (10)))); ZCapability.zpermit_unseal = zbit_to_bool (access (zperms, (Big_int.of_int (9)))); ZCapability.zpermit_execute = zbit_to_bool (access (zperms, (Big_int.of_int (8)))); ZCapability.zaccess_system_regs = zbit_to_bool (access (zperms, (Big_int.of_int (7)))); ZCapability.zpermit_load_store_cap = zbit_to_bool (access (zperms, (Big_int.of_int (6)))); ZCapability.zpermit_load = zbit_to_bool (access (zperms, (Big_int.of_int (5)))); ZCapability.zpermit_store_local_cap = zbit_to_bool (access (zperms, (Big_int.of_int (4)))); ZCapability.zpermit_load_mutable = zbit_to_bool (access (zperms, (Big_int.of_int (3)))); ZCapability.zpermit_store = zbit_to_bool (access (zperms, (Big_int.of_int (2)))); ZCapability.zpermit_load_global = zbit_to_bool (access (zperms, (Big_int.of_int (1)))); ZCapability.zglobal = zbit_to_bool (access (zperms, Big_int.zero))})

and zisCapSealed (zcap : (ZCapability.zCapability)) : bool = sail_call (fun r ->
  zneq_int ((sint (zcap.zotype)), zotype_unsealed))

and zisCapSentry (zcap : (ZCapability.zCapability)) : bool = sail_call (fun r ->
  begin
    match (uint (zcap.zotype)) with
    | zotype when (eq_int (zotype, zotype_sentry)) -> true
    | zotype when (eq_int (zotype, zotype_sentry_id)) -> true
    | zotype when (eq_int (zotype, zotype_sentry_ie)) -> true
    | zotype when (eq_int (zotype, zotype_sentry_bid)) -> true
    | zotype when (eq_int (zotype, zotype_sentry_bie)) -> true
    | _ -> false
  end)

and zisCapForwardSentry (zcap : (ZCapability.zCapability)) : bool = sail_call (fun r ->
  begin
    match (uint (zcap.zotype)) with
    | zotype when (eq_int (zotype, zotype_sentry)) -> true
    | zotype when (eq_int (zotype, zotype_sentry_id)) -> true
    | zotype when (eq_int (zotype, zotype_sentry_ie)) -> true
    | _ -> false
  end)

and zisCapForwardControlSentry (zcap : (ZCapability.zCapability)) : bool = sail_call (fun r ->
  begin
    match (uint (zcap.zotype)) with
    | zotype when (eq_int (zotype, zotype_sentry_id)) -> true
    | zotype when (eq_int (zotype, zotype_sentry_ie)) -> true
    | _ -> false
  end)

and zisCapBackwardSentry (zcap : (ZCapability.zCapability)) : bool = sail_call (fun r ->
  begin
    match (uint (zcap.zotype)) with
    | zotype when (eq_int (zotype, zotype_sentry_bid)) -> true
    | zotype when (eq_int (zotype, zotype_sentry_bie)) -> true
    | _ -> false
  end)

and zisCapForwardInheritSentry (zcap : (ZCapability.zCapability)) : bool = sail_call (fun r ->
  begin
    match (uint (zcap.zotype)) with
    | zotype when (eq_int (zotype, zotype_sentry)) -> true
    | _ -> false
  end)

and zsealCap ((zcap, zotyp) : (ZCapability.zCapability * (bit) list)) : ZCapability.zCapability = sail_call (fun r ->
  {zcap with ZCapability.zotype = zotyp})

and zunsealCap (zcap : (ZCapability.zCapability)) : ZCapability.zCapability = sail_call (fun r ->
  {zcap with ZCapability.zotype = zto_bits (zcap_otype_width, zotype_unsealed)})

and zgetCapBaseBits (zc : (ZCapability.zCapability)) : (bit) list = sail_call (fun r ->
  let (zbase, _) = (zgetCapBoundsBits zc) in
  zbase)

and zgetCapBase (zc : (ZCapability.zCapability)) : Big_int.num = sail_call (fun r ->
  uint (zgetCapBaseBits zc))

and zgetCapTopBits (zc : (ZCapability.zCapability)) : (bit) list = sail_call (fun r ->
  let (_, ztop) = (zgetCapBoundsBits zc) in
  ztop)

and zgetCapTop (zc : (ZCapability.zCapability)) : Big_int.num = sail_call (fun r ->
  uint (zgetCapTopBits zc))

and zgetCapOffsetBits (zc : (ZCapability.zCapability)) : (bit) list = sail_call (fun r ->
  let zbase = (zgetCapBaseBits zc) in
  sub_vec ((zc.zaddress), zbase))

and zgetCapOffset (zc : (ZCapability.zCapability)) : Big_int.num = sail_call (fun r ->
  uint (zgetCapOffsetBits zc))

and zgetCapLength (zc : (ZCapability.zCapability)) : Big_int.num = sail_call (fun r ->
  let (zbase, ztop) = (zgetCapBounds zc) in
  begin
    assert ((znot (zc.ztag)) || (gteq (ztop, zbase)));
    modulus ((sub_int (ztop, zbase)), (pow2 zcap_len_width))
  end)

and zinCapBounds ((zcap, zaddr, zsizze) : (ZCapability.zCapability * (bit) list * Big_int.num)) : bool = sail_call (fun r ->
  let (zbase, ztop) = (zgetCapBounds zcap) in
  let za = (uint zaddr) in
  (gteq (za, zbase)) && (lteq ((add_int (za, zsizze)), ztop)))

and zint_to_cap (zoffset : ((bit) list)) : ZCapability.zCapability = sail_call (fun r ->
  {znull_cap with ZCapability.zaddress = zoffset})

and zclearTagIf ((zcap, zcond) : (ZCapability.zCapability * bool)) : ZCapability.zCapability = sail_call (fun r ->
  {zcap with ZCapability.ztag = (zcap.ztag) && (znot zcond)})

and zclearTagIfSealed (zcap : (ZCapability.zCapability)) : ZCapability.zCapability = sail_call (fun r ->
  zclearTagIf (zcap, (zisCapSealed zcap)))

and zclearTag (zcap : (ZCapability.zCapability)) : ZCapability.zCapability = sail_call (fun r ->
  zclearTagIf (zcap, true))

and zcapBoundsEqual ((zc1, zc2) : (ZCapability.zCapability * ZCapability.zCapability)) : bool = sail_call (fun r ->
  let (zbase1, ztop1) = (zgetCapBounds zc1) in
  let (zbase2, ztop2) = (zgetCapBounds zc2) in
  (eq_int (zbase1, zbase2)) && (eq_int (ztop1, ztop2)))

and zsetCapAddr ((zc, zaddr) : (ZCapability.zCapability * (bit) list)) : (bool * ZCapability.zCapability) = sail_call (fun r ->
  let znewCap = ({zc with ZCapability.zaddress = zaddr}) in
  let zrepresentable = (zcapBoundsEqual (zc, znewCap)) in
  ((fun (v0, v1) -> (v1, v0)) (znewCap, zrepresentable)))

and zsetCapAddrChecked ((zcap, zaddr) : (ZCapability.zCapability * (bit) list)) : ZCapability.zCapability = sail_call (fun r ->
  let (zrepresentable, znewCap) = (zsetCapAddr (zcap, zaddr)) in
  zclearTagIf (znewCap, ((znot zrepresentable) || (zisCapSealed zcap))))

and zsetCapOffset ((zc, zoffset) : (ZCapability.zCapability * (bit) list)) : (bool * ZCapability.zCapability) = sail_call (fun r ->
  let zbase = (zgetCapBaseBits zc) in
  let znewAddress = (add_vec (zbase, zoffset)) in
  let znewCap = ({zc with ZCapability.zaddress = znewAddress}) in
  let zrepresentable = (zcapBoundsEqual (zc, znewCap)) in
  ((fun (v0, v1) -> (v1, v0)) (znewCap, zrepresentable)))

and zsetCapOffsetChecked ((zcap, zoffset) : (ZCapability.zCapability * (bit) list)) : ZCapability.zCapability = sail_call (fun r ->
  let (zrepresentable, znewCap) = (zsetCapOffset (zcap, zoffset)) in
  zclearTagIf (znewCap, ((znot zrepresentable) || (zisCapSealed zcap))))

and zincCapAddr ((zc, zdelta) : (ZCapability.zCapability * (bit) list)) : (bool * ZCapability.zCapability) = sail_call (fun r ->
  let znewAddress = (add_vec ((zc.zaddress), zdelta)) in
  let znewCap = ({zc with ZCapability.zaddress = znewAddress}) in
  let zrepresentable = (zcapBoundsEqual (zc, znewCap)) in
  ((fun (v0, v1) -> (v1, v0)) (znewCap, zrepresentable)))

and zcapToString (zcap : (ZCapability.zCapability)) : string = sail_call (fun r ->
  let zlen = (zgetCapLength zcap) in
  let zlen_str = (string_of_bits (zto_bits ((add_int (zcap_len_width, (Big_int.of_int (3)))), zlen))) in
  let (zbase, ztop) = (zgetCapBoundsBits zcap) in
  let ztop_str = (string_of_bits (append ([B0; B0; B0], ztop))) in
  concat_str ((string_of_bits (zcap.zaddress)), (concat_str (" (v:", (concat_str (((if (zcap.ztag) then "1 " else "0 ")), (concat_str ((string_of_bits zbase), (concat_str ("-", (concat_str (ztop_str, (concat_str (" l:", (concat_str (zlen_str, (concat_str (" o:", (concat_str ((string_of_bits (zcap.zotype)), (concat_str (" p:", (concat_str (((if (zcap.zglobal) then "G " else "- ")), (concat_str (((if (zcap.zpermit_load) then "R" else "-")), (concat_str (((if (zcap.zpermit_store) then "W" else "-")), (concat_str (((if (zcap.zpermit_load_store_cap) then "c" else "-")), (concat_str (((if (zcap.zpermit_load_mutable) then "m" else "-")), (concat_str (((if (zcap.zpermit_load_global) then "g" else "-")), (concat_str (((if (zcap.zpermit_store_local_cap) then "l " else "- ")), (concat_str (((if (zcap.zpermit_execute) then "X" else "-")), (concat_str (((if (zcap.zaccess_system_regs) then "a " else "- ")), (concat_str (((if (zcap.zpermit_seal) then "S" else "-")), (concat_str (((if (zcap.zpermit_unseal) then "U" else "-")), (concat_str (((if (zcap.zperm_user0) then "0" else "-")), ")"))))))))))))))))))))))))))))))))))))))))))))))

and zgetRepresentableAlignmentMask (zlen : ((bit) list)) : (bit) list = sail_call (fun r ->
  let (zexact, zc) = (zsetCapBounds (zroot_cap_mem, (zto_bits ((Big_int.of_int (32)), Big_int.zero)), zlen)) in
  let ze = ref ((uint (zc.zE)) : Big_int.num) in
  shiftl ((zones (Big_int.of_int (32))), !ze))

and zgetRepresentableLength (zlen : ((bit) list)) : (bit) list = sail_call (fun r ->
  let zm = (zgetRepresentableAlignmentMask zlen) in
  and_vec ((add_vec (zlen, (not_vec zm))), zm))

type  zmem_meta = bool;;

let string_of_zmem_meta (gs1328 :  zmem_meta) = string_of_zbool gs1328;;

let zdefault_meta = false;;

type  ztagaddrbits = zbits;;

let string_of_ztagaddrbits (gs1329 :  ztagaddrbits) = string_of_zbits gs1329;;

let rec zaddr_to_tag_addr (zaddr : ((bit) list)) : (bit) list = sail_call (fun r ->
  vector_truncateLSB (zaddr, (sub_int ((Big_int.of_int (32)), zlog2_cap_sizze))))

and ztag_addr_to_addr (ztag_addr : ((bit) list)) : (bit) list = sail_call (fun r ->
  append (ztag_addr, (zzzeros_implicit zlog2_cap_sizze)))

and z__WriteRAM_Meta ((zaddr, zwidth, ztag) : ((bit) list * Big_int.num * bool)) : unit = sail_call (fun r ->
  let ztag_addr = (zaddr_to_tag_addr zaddr) in
  begin
    (if (Platform.get_config_print_mem ()) then (Platform.print_mem_access (concat_str ("tag[", (concat_str ((string_of_bits (ztag_addr_to_addr ztag_addr)), (concat_str ("] <- ", ((if ztag then "1" else "0"))))))))) else ());
    write_tag_bool ((zzzero_extend ((Big_int.of_int (64)), ztag_addr)), ztag);
    let ztag_addr2 = (zaddr_to_tag_addr (sub_vec_int ((add_vec_int (zaddr, zwidth)), (Big_int.of_int (1))))) in
    (if (zneq_bits (ztag_addr, ztag_addr2)) then (begin
      (if (Platform.get_config_print_mem ()) then (Platform.print_mem_access (concat_str ("tag[", (concat_str ((string_of_bits (ztag_addr_to_addr ztag_addr2)), (concat_str ("] <- ", ((if ztag then "1" else "0"))))))))) else ());
      write_tag_bool ((zzzero_extend ((Big_int.of_int (64)), ztag_addr2)), ztag)
    end) else ())
  end)

and z__ReadRAM_Meta ((zaddr, zwidth) : ((bit) list * Big_int.num)) : bool = sail_call (fun r ->
  let ztag_addr = (zaddr_to_tag_addr zaddr) in
  let ztag = (read_tag_bool (zzzero_extend ((Big_int.of_int (64)), ztag_addr))) in
  begin
    (if (Platform.get_config_print_mem ()) then (Platform.print_mem_access (concat_str ("tag[R,", (concat_str ((string_of_bits (ztag_addr_to_addr ztag_addr)), (concat_str ("] -> ", ((if ztag then "1" else "0"))))))))) else ());
    ztag
  end)

let rec zwrite_ram ((zwk, zaddr, zwidth, zdata, zmeta) : (zwrite_kind * (bit) list * Big_int.num * (bit) list * bool)) : bool = sail_call (fun r ->
  let zret = (Platform.write_mem (zwk, (Big_int.of_int (32)), zaddr, zwidth, zdata)) in
  begin
    (if zret then (z__WriteRAM_Meta (zaddr, zwidth, zmeta)) else ());
    zret
  end)

and zwrite_ram_ea ((zwk, zaddr, zwidth) : (zwrite_kind * (bit) list * Big_int.num)) : unit = sail_call (fun r ->
  Platform.write_mem_ea (zwk, (Big_int.of_int (32)), zaddr, zwidth))

and zread_ram ((zrk, zaddr, zwidth, zread_meta) : (zread_kind * (bit) list * Big_int.num * bool)) : ((bit) list * bool) = sail_call (fun r ->
  let zmeta = ((if zread_meta then (z__ReadRAM_Meta (zaddr, zwidth)) else zdefault_meta)) in
  ((fun (v0, v1) -> (v1, v0)) (zmeta, Platform.read_mem (zrk, (Big_int.of_int (32)), zaddr, zwidth))))

type  zexc_code = zbits;;

let string_of_zexc_code (gs1372 :  zexc_code) = string_of_zbits gs1372;;

type zext_ptw_lc = | ZPTW_LC_OK | ZPTW_LC_CLEAR;;

let string_of_zext_ptw_lc = function
  | ZPTW_LC_OK -> "PTW_LC_OK"
  | ZPTW_LC_CLEAR -> "PTW_LC_CLEAR";;

let rec zundefined_ext_ptw_lc (() : (unit)) : zext_ptw_lc = sail_call (fun r ->
  internal_pick [ZPTW_LC_OK; ZPTW_LC_CLEAR])

and zext_ptw_lc_of_num (zargz3 : (Big_int.num)) : zext_ptw_lc = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__509 when (eq_int (zl__509, Big_int.zero)) -> ZPTW_LC_OK
    | _ -> ZPTW_LC_CLEAR
  end)

and znum_of_ext_ptw_lc (zargz3 : (zext_ptw_lc)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZPTW_LC_OK -> Big_int.zero
    | ZPTW_LC_CLEAR -> (Big_int.of_int (1))
  end)

type zext_ptw_sc = | ZPTW_SC_OK | ZPTW_SC_TRAP;;

let string_of_zext_ptw_sc = function
  | ZPTW_SC_OK -> "PTW_SC_OK"
  | ZPTW_SC_TRAP -> "PTW_SC_TRAP";;

let rec zundefined_ext_ptw_sc (() : (unit)) : zext_ptw_sc = sail_call (fun r ->
  internal_pick [ZPTW_SC_OK; ZPTW_SC_TRAP])

and zext_ptw_sc_of_num (zargz3 : (Big_int.num)) : zext_ptw_sc = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__508 when (eq_int (zl__508, Big_int.zero)) -> ZPTW_SC_OK
    | _ -> ZPTW_SC_TRAP
  end)

and znum_of_ext_ptw_sc (zargz3 : (zext_ptw_sc)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZPTW_SC_OK -> Big_int.zero
    | ZPTW_SC_TRAP -> (Big_int.of_int (1))
  end)

module Zext_ptw = struct
  type  zext_ptw = { zptw_lc : zext_ptw_lc; zptw_sc : zext_ptw_sc
  }
  end;;

let string_of_zext_ptw (gs1397 :  Zext_ptw.zext_ptw) =
  "{ptw_lc = " ^ string_of_zext_ptw_lc gs1397.Zext_ptw.zptw_lc
  ^ ", ptw_sc = " ^ string_of_zext_ptw_sc gs1397.Zext_ptw.zptw_sc ^ "}";;

let rec zundefined_ext_ptw (() : (unit)) : Zext_ptw.zext_ptw = sail_call (fun r ->
  {Zext_ptw.zptw_lc = zundefined_ext_ptw_lc ();
  Zext_ptw.zptw_sc = zundefined_ext_ptw_sc ()})

and zext_ptw_lc_join ((ze, zl) : (Zext_ptw.zext_ptw * zext_ptw_lc)) : Zext_ptw.zext_ptw = sail_call (fun r ->
  {ze with Zext_ptw.zptw_lc = begin
    match zl with
    | ZPTW_LC_OK -> ze.zptw_lc
    | ZPTW_LC_CLEAR -> zl
  end})

and zext_ptw_sc_join ((ze, zs) : (Zext_ptw.zext_ptw * zext_ptw_sc)) : Zext_ptw.zext_ptw = sail_call (fun r ->
  {ze with Zext_ptw.zptw_sc = begin
    match zs with
    | ZPTW_SC_OK -> ze.zptw_sc
    | ZPTW_SC_TRAP -> zs
  end})

let zinit_ext_ptw = ({Zext_ptw.zptw_lc = ZPTW_LC_OK;
Zext_ptw.zptw_sc = ZPTW_SC_OK});;

type zext_ptw_fail = | ZEPTWF_NO_PERM | ZEPTWF_CAP_ERR;;

let string_of_zext_ptw_fail = function
  | ZEPTWF_NO_PERM -> "EPTWF_NO_PERM"
  | ZEPTWF_CAP_ERR -> "EPTWF_CAP_ERR";;

let rec zundefined_ext_ptw_fail (() : (unit)) : zext_ptw_fail = sail_call (fun r ->
  internal_pick [ZEPTWF_NO_PERM; ZEPTWF_CAP_ERR])

and zext_ptw_fail_of_num (zargz3 : (Big_int.num)) : zext_ptw_fail = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__507 when (eq_int (zl__507, Big_int.zero)) -> ZEPTWF_NO_PERM
    | _ -> ZEPTWF_CAP_ERR
  end)

and znum_of_ext_ptw_fail (zargz3 : (zext_ptw_fail)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZEPTWF_NO_PERM -> Big_int.zero
    | ZEPTWF_CAP_ERR -> (Big_int.of_int (1))
  end)

type zext_ptw_error = | ZAT_CAP_ERR;;

let string_of_zext_ptw_error = function | ZAT_CAP_ERR -> "AT_CAP_ERR";;

let rec zundefined_ext_ptw_error (() : (unit)) : zext_ptw_error = sail_call (fun r ->
  internal_pick [ZAT_CAP_ERR])

and zext_ptw_error_of_num (zargz3 : (Big_int.num)) : zext_ptw_error = sail_call (fun r ->
  begin match zargz3 with | _ -> ZAT_CAP_ERR end)

and znum_of_ext_ptw_error (zargz3 : (zext_ptw_error)) : Big_int.num = sail_call (fun r ->
  begin match zargz3 with | ZAT_CAP_ERR -> Big_int.zero end)

type zext_exc_type =
  | ZEXC_LOAD_CAP_PAGE_FAULT
  | ZEXC_SAMO_CAP_PAGE_FAULT
  | ZEXC_CHERI;;

let string_of_zext_exc_type = function
  | ZEXC_LOAD_CAP_PAGE_FAULT -> "EXC_LOAD_CAP_PAGE_FAULT"
  | ZEXC_SAMO_CAP_PAGE_FAULT -> "EXC_SAMO_CAP_PAGE_FAULT"
  | ZEXC_CHERI -> "EXC_CHERI";;

let rec zundefined_ext_exc_type (() : (unit)) : zext_exc_type = sail_call (fun r ->
  internal_pick [ZEXC_LOAD_CAP_PAGE_FAULT; ZEXC_SAMO_CAP_PAGE_FAULT; ZEXC_CHERI])

and zext_exc_type_of_num (zargz3 : (Big_int.num)) : zext_exc_type = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__505 when (eq_int (zl__505, Big_int.zero)) -> ZEXC_LOAD_CAP_PAGE_FAULT
    | zl__506 when (eq_int (zl__506, (Big_int.of_int (1)))) ->
      ZEXC_SAMO_CAP_PAGE_FAULT
    | _ -> ZEXC_CHERI
  end)

and zext_exc_type_to_bits (ze : (zext_exc_type)) : (bit) list = sail_call (fun r ->
  begin
    match ze with
    | ZEXC_LOAD_CAP_PAGE_FAULT -> [B0; B0; B0; B1; B1; B0; B1; B0]
    | ZEXC_SAMO_CAP_PAGE_FAULT -> [B0; B0; B0; B1; B1; B0; B1; B1]
    | ZEXC_CHERI -> [B0; B0; B0; B1; B1; B1; B0; B0]
  end)

and znum_of_ext_exc_type (ze : (zext_exc_type)) : Big_int.num = sail_call (fun r ->
  begin
    match ze with
    | ZEXC_LOAD_CAP_PAGE_FAULT -> (Big_int.of_int (26))
    | ZEXC_SAMO_CAP_PAGE_FAULT -> (Big_int.of_int (27))
    | ZEXC_CHERI -> (Big_int.of_int (28))
  end)

and zext_exc_type_to_str (ze : (zext_exc_type)) : string = sail_call (fun r ->
  begin
    match ze with
    | ZEXC_LOAD_CAP_PAGE_FAULT -> "load-cap-page-fault"
    | ZEXC_SAMO_CAP_PAGE_FAULT -> "store/amo-cap-page-fault"
    | ZEXC_CHERI -> "cheri"
  end)

let zxlen_val = (Big_int.of_int (32));;

let zxlen_max_unsigned = (sub_int ((pow2 (Big_int.of_int (32))), (Big_int.of_int (1))));;

let zxlen_max_signed = (sub_int ((pow2 (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1))))), (Big_int.of_int (1))));;

let zxlen_min_signed = (sub_int (Big_int.zero, (pow2 (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))))));;

type  zhalf = zbits;;

let string_of_zhalf (gs1456 :  zhalf) = string_of_zbits gs1456;;

type  zword = zbits;;

let string_of_zword (gs1457 :  zword) = string_of_zbits gs1457;;

type  zregidx = zbits;;

let string_of_zregidx (gs1458 :  zregidx) = string_of_zbits gs1458;;

type  zcregidx = zbits;;

let string_of_zcregidx (gs1459 :  zcregidx) = string_of_zbits gs1459;;

type  zcsreg = zbits;;

let string_of_zcsreg (gs1460 :  zcsreg) = string_of_zbits gs1460;;

type  zregno = Big_int.num;;

let string_of_zregno (gs1461 :  zregno) = string_of_zint gs1461;;

let rec zregidx_to_regno (zb : ((bit) list)) : Big_int.num = sail_call (fun r ->
  let zr = (uint zb) in
  zr)

and zcreg2reg_idx (zcreg : ((bit) list)) : (bit) list = sail_call (fun r ->
  append ([B0; B1], zcreg))

let zzzreg = [B0; B0; B0; B0; B0];;

let zra = [B0; B0; B0; B0; B1];;

let zsp = [B0; B0; B0; B1; B0];;

type  zopcode = zbits;;

let string_of_zopcode (gs1470 :  zopcode) = string_of_zbits gs1470;;

type  zimm12 = zbits;;

let string_of_zimm12 (gs1471 :  zimm12) = string_of_zbits gs1471;;

type  zimm20 = zbits;;

let string_of_zimm20 (gs1472 :  zimm20) = string_of_zbits gs1472;;

type  zamo = zbits;;

let string_of_zamo (gs1473 :  zamo) = string_of_zbits gs1473;;

type zArchitecture = | ZRV32 | ZRV64 | ZRV128;;

let string_of_zArchitecture = function
  | ZRV32 -> "RV32"
  | ZRV64 -> "RV64"
  | ZRV128 -> "RV128";;

let rec zundefined_Architecture (() : (unit)) : zArchitecture = sail_call (fun r ->
  internal_pick [ZRV32; ZRV64; ZRV128])

and zArchitecture_of_num (zargz3 : (Big_int.num)) : zArchitecture = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__503 when (eq_int (zl__503, Big_int.zero)) -> ZRV32
    | zl__504 when (eq_int (zl__504, (Big_int.of_int (1)))) -> ZRV64
    | _ -> ZRV128
  end)

and znum_of_Architecture (zargz3 : (zArchitecture)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRV32 -> Big_int.zero
    | ZRV64 -> (Big_int.of_int (1))
    | ZRV128 -> (Big_int.of_int (2))
  end)

type  zarch_xlen = zbits;;

let string_of_zarch_xlen (gs1486 :  zarch_xlen) = string_of_zbits gs1486;;

let rec zarchitecture (za : ((bit) list)) : (zArchitecture) zoption = sail_call (fun r ->
  begin
    match za with
    | zb__0 when (eq_list (zb__0, [B0; B1])) -> ZSome ZRV32
    | zb__1 when (eq_list (zb__1, [B1; B0])) -> ZSome ZRV64
    | zb__2 when (eq_list (zb__2, [B1; B1])) -> ZSome ZRV128
    | _ -> ZNone ()
  end)

and zarch_to_bits (za : (zArchitecture)) : (bit) list = sail_call (fun r ->
  begin
    match za with
    | ZRV32 -> [B0; B1]
    | ZRV64 -> [B1; B0]
    | ZRV128 -> [B1; B1]
  end)

exception ZError_not_rv32e_register of unit;;
exception ZError_not_implemented of string;;
exception ZError_internal_error of unit;;

let rec znot_implemented : 'za. (string) -> 'za = fun zmessage -> sail_call (fun r ->
  raise (ZError_not_implemented zmessage))

and zinternal_error : 'za. (string * Big_int.num * string) -> 'za = fun (zfile, zline, zs) -> sail_call (fun r ->
  begin assert false; exit 0 end)

type  zpriv_level = zbits;;

let string_of_zpriv_level (gs1505 :  zpriv_level) = string_of_zbits gs1505;;

type zPrivilege = | ZUser | ZSupervisor | ZMachine;;

let string_of_zPrivilege = function
  | ZUser -> "User"
  | ZSupervisor -> "Supervisor"
  | ZMachine -> "Machine";;

let rec zundefined_Privilege (() : (unit)) : zPrivilege = sail_call (fun r ->
  internal_pick [ZUser; ZSupervisor; ZMachine])

and zPrivilege_of_num (zargz3 : (Big_int.num)) : zPrivilege = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__501 when (eq_int (zl__501, Big_int.zero)) -> ZUser
    | zl__502 when (eq_int (zl__502, (Big_int.of_int (1)))) -> ZSupervisor
    | _ -> ZMachine
  end)

and znum_of_Privilege (zargz3 : (zPrivilege)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZUser -> Big_int.zero
    | ZSupervisor -> (Big_int.of_int (1))
    | ZMachine -> (Big_int.of_int (2))
  end)

and zprivLevel_to_bits (zp : (zPrivilege)) : (bit) list = sail_call (fun r ->
  begin
    match zp with
    | ZUser -> [B0; B0]
    | ZSupervisor -> [B0; B1]
    | ZMachine -> [B1; B1]
  end)

and zprivLevel_of_bits (zp : ((bit) list)) : zPrivilege = sail_call (fun r ->
  begin
    match zp with
    | zb__0 when (eq_list (zb__0, [B0; B0])) -> ZUser
    | zb__1 when (eq_list (zb__1, [B0; B1])) -> ZSupervisor
    | zb__2 when (eq_list (zb__2, [B1; B1])) -> ZMachine
    | _ ->
      zinternal_error ("sail-riscv/model/riscv_types.sail", (Big_int.of_int (119)), (concat_str ("Invalid privilege level: ", (string_of_bits zp))))
  end)

and zprivLevel_to_str (zp : (zPrivilege)) : string = sail_call (fun r ->
  begin match zp with | ZUser -> "U" | ZSupervisor -> "S" | ZMachine -> "M" end)

type 'za zAccessType =
  | ZRead of 'za
  | ZWrite of 'za
  | ZReadWrite of ('za * 'za)
  | ZExecute of unit;;

let string_of_zAccessType _ = "VARIANT";;

type zext_access_type = | ZData | ZCap;;

let string_of_zext_access_type = function
  | ZData -> "Data"
  | ZCap -> "Cap";;

let rec zaccessType_to_str (za : ((zext_access_type) zAccessType)) : string = sail_call (fun r ->
  begin
    match za with
    | ZRead (ZData) -> "R"
    | ZWrite (ZData) -> "W"
    | ZReadWrite ((ZData, ZData)) -> "RW"
    | ZRead (ZCap) -> "RC"
    | ZWrite (ZCap) -> "WC"
    | ZReadWrite ((ZCap, ZCap)) -> "RCWC"
    | ZReadWrite ((ZData, ZCap)) -> "RWC"
    | ZReadWrite ((ZCap, ZData)) -> "RCW"
    | ZExecute (()) -> "X"
  end)

and zreg_name_abi (zr : ((bit) list)) : string = sail_call (fun r ->
  begin
    match zr with
    | zb__0 when (eq_list (zb__0, [B0; B0; B0; B0; B0])) -> "zero"
    | zb__1 when (eq_list (zb__1, [B0; B0; B0; B0; B1])) -> "ra"
    | zb__2 when (eq_list (zb__2, [B0; B0; B0; B1; B0])) -> "sp"
    | zb__3 when (eq_list (zb__3, [B0; B0; B0; B1; B1])) -> "gp"
    | zb__4 when (eq_list (zb__4, [B0; B0; B1; B0; B0])) -> "tp"
    | zb__5 when (eq_list (zb__5, [B0; B0; B1; B0; B1])) -> "t0"
    | zb__6 when (eq_list (zb__6, [B0; B0; B1; B1; B0])) -> "t1"
    | zb__7 when (eq_list (zb__7, [B0; B0; B1; B1; B1])) -> "t2"
    | zb__8 when (eq_list (zb__8, [B0; B1; B0; B0; B0])) -> "fp"
    | zb__9 when (eq_list (zb__9, [B0; B1; B0; B0; B1])) -> "s1"
    | zb__10 when (eq_list (zb__10, [B0; B1; B0; B1; B0])) -> "a0"
    | zb__11 when (eq_list (zb__11, [B0; B1; B0; B1; B1])) -> "a1"
    | zb__12 when (eq_list (zb__12, [B0; B1; B1; B0; B0])) -> "a2"
    | zb__13 when (eq_list (zb__13, [B0; B1; B1; B0; B1])) -> "a3"
    | zb__14 when (eq_list (zb__14, [B0; B1; B1; B1; B0])) -> "a4"
    | zb__15 when (eq_list (zb__15, [B0; B1; B1; B1; B1])) -> "a5"
    | zb__16 when (eq_list (zb__16, [B1; B0; B0; B0; B0])) -> "a6"
    | zb__17 when (eq_list (zb__17, [B1; B0; B0; B0; B1])) -> "a7"
    | zb__18 when (eq_list (zb__18, [B1; B0; B0; B1; B0])) -> "s2"
    | zb__19 when (eq_list (zb__19, [B1; B0; B0; B1; B1])) -> "s3"
    | zb__20 when (eq_list (zb__20, [B1; B0; B1; B0; B0])) -> "s4"
    | zb__21 when (eq_list (zb__21, [B1; B0; B1; B0; B1])) -> "s5"
    | zb__22 when (eq_list (zb__22, [B1; B0; B1; B1; B0])) -> "s6"
    | zb__23 when (eq_list (zb__23, [B1; B0; B1; B1; B1])) -> "s7"
    | zb__24 when (eq_list (zb__24, [B1; B1; B0; B0; B0])) -> "s8"
    | zb__25 when (eq_list (zb__25, [B1; B1; B0; B0; B1])) -> "s9"
    | zb__26 when (eq_list (zb__26, [B1; B1; B0; B1; B0])) -> "s10"
    | zb__27 when (eq_list (zb__27, [B1; B1; B0; B1; B1])) -> "s11"
    | zb__28 when (eq_list (zb__28, [B1; B1; B1; B0; B0])) -> "t3"
    | zb__29 when (eq_list (zb__29, [B1; B1; B1; B0; B1])) -> "t4"
    | zb__30 when (eq_list (zb__30, [B1; B1; B1; B1; B0])) -> "t5"
    | _ -> "t6"
  end)

and zcap_reg_name_abi (zr : ((bit) list)) : string = sail_call (fun r ->
  begin
    match zr with
    | zb__0 when (eq_list (zb__0, [B0; B0; B0; B0; B0])) -> "cnull"
    | _ -> concat_str ("c", (zreg_name_abi zr))
  end)

and zcsr_name_map_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      "ustatus"
    | zb__1 when (eq_list (zb__1, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B0])) ->
      "uie"
    | zb__2 when (eq_list (zb__2, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B1])) ->
      "utvec"
    | zb__3 when (eq_list (zb__3, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0; B0])) ->
      "uscratch"
    | zb__4 when (eq_list (zb__4, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0; B1])) ->
      "uepc"
    | zb__5 when (eq_list (zb__5, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B1; B0])) ->
      "ucause"
    | zb__6 when (eq_list (zb__6, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B1; B1])) ->
      "utval"
    | zb__7 when (eq_list (zb__7, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B1; B0; B0])) ->
      "uip"
    | zb__8 when (eq_list (zb__8, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1])) ->
      "fflags"
    | zb__9 when (eq_list (zb__9, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      "frm"
    | zb__10 when (eq_list (zb__10, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B1])) ->
      "fcsr"
    | zb__11 when (eq_list (zb__11, [B0; B0; B0; B0; B0; B0; B0; B1; B0; B1; B0; B1])) ->
      "seed"
    | zb__12 when (eq_list (zb__12, [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      "cycle"
    | zb__13 when (eq_list (zb__13, [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1])) ->
      "time"
    | zb__14 when (eq_list (zb__14, [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      "instret"
    | zb__15 when (eq_list (zb__15, [B1; B1; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0])) ->
      "cycleh"
    | zb__16 when (eq_list (zb__16, [B1; B1; B0; B0; B1; B0; B0; B0; B0; B0; B0; B1])) ->
      "timeh"
    | zb__17 when (eq_list (zb__17, [B1; B1; B0; B0; B1; B0; B0; B0; B0; B0; B1; B0])) ->
      "instreth"
    | zb__18 when (eq_list (zb__18, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      "sstatus"
    | zb__19 when (eq_list (zb__19, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      "sedeleg"
    | zb__20 when (eq_list (zb__20, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B1; B1])) ->
      "sideleg"
    | zb__21 when (eq_list (zb__21, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B1; B0; B0])) ->
      "sie"
    | zb__22 when (eq_list (zb__22, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B1; B0; B1])) ->
      "stvec"
    | zb__23 when (eq_list (zb__23, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B1; B1; B0])) ->
      "scounteren"
    | zb__24 when (eq_list (zb__24, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B0; B0])) ->
      "sscratch"
    | zb__25 when (eq_list (zb__25, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B0; B1])) ->
      "sepc"
    | zb__26 when (eq_list (zb__26, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B1; B0])) ->
      "scause"
    | zb__27 when (eq_list (zb__27, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B1; B1])) ->
      "stval"
    | zb__28 when (eq_list (zb__28, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B1; B0; B0])) ->
      "sip"
    | zb__29 when (eq_list (zb__29, [B0; B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0])) ->
      "satp"
    | zb__30 when (eq_list (zb__30, [B0; B0; B0; B1; B0; B0; B0; B0; B1; B0; B1; B0])) ->
      "senvcfg"
    | zb__31 when (eq_list (zb__31, [B1; B1; B1; B1; B0; B0; B0; B1; B0; B0; B0; B1])) ->
      "mvendorid"
    | zb__32 when (eq_list (zb__32, [B1; B1; B1; B1; B0; B0; B0; B1; B0; B0; B1; B0])) ->
      "marchid"
    | zb__33 when (eq_list (zb__33, [B1; B1; B1; B1; B0; B0; B0; B1; B0; B0; B1; B1])) ->
      "mimpid"
    | zb__34 when (eq_list (zb__34, [B1; B1; B1; B1; B0; B0; B0; B1; B0; B1; B0; B0])) ->
      "mhartid"
    | zb__35 when (eq_list (zb__35, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      "mstatus"
    | zb__36 when (eq_list (zb__36, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0; B1])) ->
      "misa"
    | zb__37 when (eq_list (zb__37, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      "medeleg"
    | zb__38 when (eq_list (zb__38, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B1; B1])) ->
      "mideleg"
    | zb__39 when (eq_list (zb__39, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B1; B0; B0])) ->
      "mie"
    | zb__40 when (eq_list (zb__40, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B1; B0; B1])) ->
      "mtvec"
    | zb__41 when (eq_list (zb__41, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B1; B1; B0])) ->
      "mcounteren"
    | zb__42 when (eq_list (zb__42, [B0; B0; B1; B1; B0; B0; B1; B0; B0; B0; B0; B0])) ->
      "mcountinhibit"
    | zb__43 when (eq_list (zb__43, [B0; B0; B1; B1; B0; B0; B0; B0; B1; B0; B1; B0])) ->
      "menvcfg"
    | zb__44 when (eq_list (zb__44, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B0; B0])) ->
      "mscratch"
    | zb__45 when (eq_list (zb__45, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B0; B1])) ->
      "mepc"
    | zb__46 when (eq_list (zb__46, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B1; B0])) ->
      "mcause"
    | zb__47 when (eq_list (zb__47, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B1; B1])) ->
      "mtval"
    | zb__48 when (eq_list (zb__48, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B1; B0; B0])) ->
      "mip"
    | zb__49 when (eq_list (zb__49, [B0; B0; B1; B1; B1; B0; B1; B0; B0; B0; B0; B0])) ->
      "pmpcfg0"
    | zb__50 when (eq_list (zb__50, [B0; B0; B1; B1; B1; B0; B1; B0; B0; B0; B0; B1])) ->
      "pmpcfg1"
    | zb__51 when (eq_list (zb__51, [B0; B0; B1; B1; B1; B0; B1; B0; B0; B0; B1; B0])) ->
      "pmpcfg2"
    | zb__52 when (eq_list (zb__52, [B0; B0; B1; B1; B1; B0; B1; B0; B0; B0; B1; B1])) ->
      "pmpcfg3"
    | zb__53 when (eq_list (zb__53, [B0; B0; B1; B1; B1; B0; B1; B0; B0; B1; B0; B0])) ->
      "pmpcfg4"
    | zb__54 when (eq_list (zb__54, [B0; B0; B1; B1; B1; B0; B1; B0; B0; B1; B0; B1])) ->
      "pmpcfg5"
    | zb__55 when (eq_list (zb__55, [B0; B0; B1; B1; B1; B0; B1; B0; B0; B1; B1; B0])) ->
      "pmpcfg6"
    | zb__56 when (eq_list (zb__56, [B0; B0; B1; B1; B1; B0; B1; B0; B0; B1; B1; B1])) ->
      "pmpcfg7"
    | zb__57 when (eq_list (zb__57, [B0; B0; B1; B1; B1; B0; B1; B0; B1; B0; B0; B0])) ->
      "pmpcfg8"
    | zb__58 when (eq_list (zb__58, [B0; B0; B1; B1; B1; B0; B1; B0; B1; B0; B0; B1])) ->
      "pmpcfg9"
    | zb__59 when (eq_list (zb__59, [B0; B0; B1; B1; B1; B0; B1; B0; B1; B0; B1; B0])) ->
      "pmpcfg10"
    | zb__60 when (eq_list (zb__60, [B0; B0; B1; B1; B1; B0; B1; B0; B1; B0; B1; B1])) ->
      "pmpcfg11"
    | zb__61 when (eq_list (zb__61, [B0; B0; B1; B1; B1; B0; B1; B0; B1; B1; B0; B0])) ->
      "pmpcfg12"
    | zb__62 when (eq_list (zb__62, [B0; B0; B1; B1; B1; B0; B1; B0; B1; B1; B0; B1])) ->
      "pmpcfg13"
    | zb__63 when (eq_list (zb__63, [B0; B0; B1; B1; B1; B0; B1; B0; B1; B1; B1; B0])) ->
      "pmpcfg14"
    | zb__64 when (eq_list (zb__64, [B0; B0; B1; B1; B1; B0; B1; B0; B1; B1; B1; B1])) ->
      "pmpcfg15"
    | zb__65 when (eq_list (zb__65, [B0; B0; B1; B1; B1; B0; B1; B1; B0; B0; B0; B0])) ->
      "pmpaddr0"
    | zb__66 when (eq_list (zb__66, [B0; B0; B1; B1; B1; B0; B1; B1; B0; B0; B0; B1])) ->
      "pmpaddr1"
    | zb__67 when (eq_list (zb__67, [B0; B0; B1; B1; B1; B0; B1; B1; B0; B0; B1; B0])) ->
      "pmpaddr2"
    | zb__68 when (eq_list (zb__68, [B0; B0; B1; B1; B1; B0; B1; B1; B0; B0; B1; B1])) ->
      "pmpaddr3"
    | zb__69 when (eq_list (zb__69, [B0; B0; B1; B1; B1; B0; B1; B1; B0; B1; B0; B0])) ->
      "pmpaddr4"
    | zb__70 when (eq_list (zb__70, [B0; B0; B1; B1; B1; B0; B1; B1; B0; B1; B0; B1])) ->
      "pmpaddr5"
    | zb__71 when (eq_list (zb__71, [B0; B0; B1; B1; B1; B0; B1; B1; B0; B1; B1; B0])) ->
      "pmpaddr6"
    | zb__72 when (eq_list (zb__72, [B0; B0; B1; B1; B1; B0; B1; B1; B0; B1; B1; B1])) ->
      "pmpaddr7"
    | zb__73 when (eq_list (zb__73, [B0; B0; B1; B1; B1; B0; B1; B1; B1; B0; B0; B0])) ->
      "pmpaddr8"
    | zb__74 when (eq_list (zb__74, [B0; B0; B1; B1; B1; B0; B1; B1; B1; B0; B0; B1])) ->
      "pmpaddr9"
    | zb__75 when (eq_list (zb__75, [B0; B0; B1; B1; B1; B0; B1; B1; B1; B0; B1; B0])) ->
      "pmpaddr10"
    | zb__76 when (eq_list (zb__76, [B0; B0; B1; B1; B1; B0; B1; B1; B1; B0; B1; B1])) ->
      "pmpaddr11"
    | zb__77 when (eq_list (zb__77, [B0; B0; B1; B1; B1; B0; B1; B1; B1; B1; B0; B0])) ->
      "pmpaddr12"
    | zb__78 when (eq_list (zb__78, [B0; B0; B1; B1; B1; B0; B1; B1; B1; B1; B0; B1])) ->
      "pmpaddr13"
    | zb__79 when (eq_list (zb__79, [B0; B0; B1; B1; B1; B0; B1; B1; B1; B1; B1; B0])) ->
      "pmpaddr14"
    | zb__80 when (eq_list (zb__80, [B0; B0; B1; B1; B1; B0; B1; B1; B1; B1; B1; B1])) ->
      "pmpaddr15"
    | zb__81 when (eq_list (zb__81, [B0; B0; B1; B1; B1; B1; B0; B0; B0; B0; B0; B0])) ->
      "pmpaddr16"
    | zb__82 when (eq_list (zb__82, [B0; B0; B1; B1; B1; B1; B0; B0; B0; B0; B0; B1])) ->
      "pmpaddr17"
    | zb__83 when (eq_list (zb__83, [B0; B0; B1; B1; B1; B1; B0; B0; B0; B0; B1; B0])) ->
      "pmpaddr18"
    | zb__84 when (eq_list (zb__84, [B0; B0; B1; B1; B1; B1; B0; B0; B0; B0; B1; B1])) ->
      "pmpaddr19"
    | zb__85 when (eq_list (zb__85, [B0; B0; B1; B1; B1; B1; B0; B0; B0; B1; B0; B0])) ->
      "pmpaddr20"
    | zb__86 when (eq_list (zb__86, [B0; B0; B1; B1; B1; B1; B0; B0; B0; B1; B0; B1])) ->
      "pmpaddr21"
    | zb__87 when (eq_list (zb__87, [B0; B0; B1; B1; B1; B1; B0; B0; B0; B1; B1; B0])) ->
      "pmpaddr22"
    | zb__88 when (eq_list (zb__88, [B0; B0; B1; B1; B1; B1; B0; B0; B0; B1; B1; B1])) ->
      "pmpaddr23"
    | zb__89 when (eq_list (zb__89, [B0; B0; B1; B1; B1; B1; B0; B0; B1; B0; B0; B0])) ->
      "pmpaddr24"
    | zb__90 when (eq_list (zb__90, [B0; B0; B1; B1; B1; B1; B0; B0; B1; B0; B0; B1])) ->
      "pmpaddr25"
    | zb__91 when (eq_list (zb__91, [B0; B0; B1; B1; B1; B1; B0; B0; B1; B0; B1; B0])) ->
      "pmpaddr26"
    | zb__92 when (eq_list (zb__92, [B0; B0; B1; B1; B1; B1; B0; B0; B1; B0; B1; B1])) ->
      "pmpaddr27"
    | zb__93 when (eq_list (zb__93, [B0; B0; B1; B1; B1; B1; B0; B0; B1; B1; B0; B0])) ->
      "pmpaddr28"
    | zb__94 when (eq_list (zb__94, [B0; B0; B1; B1; B1; B1; B0; B0; B1; B1; B0; B1])) ->
      "pmpaddr29"
    | zb__95 when (eq_list (zb__95, [B0; B0; B1; B1; B1; B1; B0; B0; B1; B1; B1; B0])) ->
      "pmpaddr30"
    | zb__96 when (eq_list (zb__96, [B0; B0; B1; B1; B1; B1; B0; B0; B1; B1; B1; B1])) ->
      "pmpaddr31"
    | zb__97 when (eq_list (zb__97, [B0; B0; B1; B1; B1; B1; B0; B1; B0; B0; B0; B0])) ->
      "pmpaddr32"
    | zb__98 when (eq_list (zb__98, [B0; B0; B1; B1; B1; B1; B0; B1; B0; B0; B0; B1])) ->
      "pmpaddr33"
    | zb__99 when (eq_list (zb__99, [B0; B0; B1; B1; B1; B1; B0; B1; B0; B0; B1; B0])) ->
      "pmpaddr34"
    | zb__100 when (eq_list (zb__100, [B0; B0; B1; B1; B1; B1; B0; B1; B0; B0; B1; B1])) ->
      "pmpaddr35"
    | zb__101 when (eq_list (zb__101, [B0; B0; B1; B1; B1; B1; B0; B1; B0; B1; B0; B0])) ->
      "pmpaddr36"
    | zb__102 when (eq_list (zb__102, [B0; B0; B1; B1; B1; B1; B0; B1; B0; B1; B0; B1])) ->
      "pmpaddr37"
    | zb__103 when (eq_list (zb__103, [B0; B0; B1; B1; B1; B1; B0; B1; B0; B1; B1; B0])) ->
      "pmpaddr38"
    | zb__104 when (eq_list (zb__104, [B0; B0; B1; B1; B1; B1; B0; B1; B0; B1; B1; B1])) ->
      "pmpaddr39"
    | zb__105 when (eq_list (zb__105, [B0; B0; B1; B1; B1; B1; B0; B1; B1; B0; B0; B0])) ->
      "pmpaddr40"
    | zb__106 when (eq_list (zb__106, [B0; B0; B1; B1; B1; B1; B0; B1; B1; B0; B0; B1])) ->
      "pmpaddr41"
    | zb__107 when (eq_list (zb__107, [B0; B0; B1; B1; B1; B1; B0; B1; B1; B0; B1; B0])) ->
      "pmpaddr42"
    | zb__108 when (eq_list (zb__108, [B0; B0; B1; B1; B1; B1; B0; B1; B1; B0; B1; B1])) ->
      "pmpaddr43"
    | zb__109 when (eq_list (zb__109, [B0; B0; B1; B1; B1; B1; B0; B1; B1; B1; B0; B0])) ->
      "pmpaddr44"
    | zb__110 when (eq_list (zb__110, [B0; B0; B1; B1; B1; B1; B0; B1; B1; B1; B0; B1])) ->
      "pmpaddr45"
    | zb__111 when (eq_list (zb__111, [B0; B0; B1; B1; B1; B1; B0; B1; B1; B1; B1; B0])) ->
      "pmpaddr46"
    | zb__112 when (eq_list (zb__112, [B0; B0; B1; B1; B1; B1; B0; B1; B1; B1; B1; B1])) ->
      "pmpaddr47"
    | zb__113 when (eq_list (zb__113, [B0; B0; B1; B1; B1; B1; B1; B0; B0; B0; B0; B0])) ->
      "pmpaddr48"
    | zb__114 when (eq_list (zb__114, [B0; B0; B1; B1; B1; B1; B1; B0; B0; B0; B0; B1])) ->
      "pmpaddr49"
    | zb__115 when (eq_list (zb__115, [B0; B0; B1; B1; B1; B1; B1; B0; B0; B0; B1; B0])) ->
      "pmpaddr50"
    | zb__116 when (eq_list (zb__116, [B0; B0; B1; B1; B1; B1; B1; B0; B0; B0; B1; B1])) ->
      "pmpaddr51"
    | zb__117 when (eq_list (zb__117, [B0; B0; B1; B1; B1; B1; B1; B0; B0; B1; B0; B0])) ->
      "pmpaddr52"
    | zb__118 when (eq_list (zb__118, [B0; B0; B1; B1; B1; B1; B1; B0; B0; B1; B0; B1])) ->
      "pmpaddr53"
    | zb__119 when (eq_list (zb__119, [B0; B0; B1; B1; B1; B1; B1; B0; B0; B1; B1; B0])) ->
      "pmpaddr54"
    | zb__120 when (eq_list (zb__120, [B0; B0; B1; B1; B1; B1; B1; B0; B0; B1; B1; B1])) ->
      "pmpaddr55"
    | zb__121 when (eq_list (zb__121, [B0; B0; B1; B1; B1; B1; B1; B0; B1; B0; B0; B0])) ->
      "pmpaddr56"
    | zb__122 when (eq_list (zb__122, [B0; B0; B1; B1; B1; B1; B1; B0; B1; B0; B0; B1])) ->
      "pmpaddr57"
    | zb__123 when (eq_list (zb__123, [B0; B0; B1; B1; B1; B1; B1; B0; B1; B0; B1; B0])) ->
      "pmpaddr58"
    | zb__124 when (eq_list (zb__124, [B0; B0; B1; B1; B1; B1; B1; B0; B1; B0; B1; B1])) ->
      "pmpaddr59"
    | zb__125 when (eq_list (zb__125, [B0; B0; B1; B1; B1; B1; B1; B0; B1; B1; B0; B0])) ->
      "pmpaddr60"
    | zb__126 when (eq_list (zb__126, [B0; B0; B1; B1; B1; B1; B1; B0; B1; B1; B0; B1])) ->
      "pmpaddr61"
    | zb__127 when (eq_list (zb__127, [B0; B0; B1; B1; B1; B1; B1; B0; B1; B1; B1; B0])) ->
      "pmpaddr62"
    | zb__128 when (eq_list (zb__128, [B0; B0; B1; B1; B1; B1; B1; B0; B1; B1; B1; B1])) ->
      "pmpaddr63"
    | zb__129 when (eq_list (zb__129, [B1; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      "mcycle"
    | zb__130 when (eq_list (zb__130, [B1; B0; B1; B1; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      "minstret"
    | zb__131 when (eq_list (zb__131, [B1; B0; B1; B1; B1; B0; B0; B0; B0; B0; B0; B0])) ->
      "mcycleh"
    | zb__132 when (eq_list (zb__132, [B1; B0; B1; B1; B1; B0; B0; B0; B0; B0; B1; B0])) ->
      "minstreth"
    | zb__133 when (eq_list (zb__133, [B0; B1; B1; B1; B1; B0; B1; B0; B0; B0; B0; B0])) ->
      "tselect"
    | zb__134 when (eq_list (zb__134, [B0; B1; B1; B1; B1; B0; B1; B0; B0; B0; B0; B1])) ->
      "tdata1"
    | zb__135 when (eq_list (zb__135, [B0; B1; B1; B1; B1; B0; B1; B0; B0; B0; B1; B0])) ->
      "tdata2"
    | zb__136 when (eq_list (zb__136, [B0; B1; B1; B1; B1; B0; B1; B0; B0; B0; B1; B1])) ->
      "tdata3"
    | zb__137 when (eq_list (zb__137, [B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B0; B0])) ->
      "vstart"
    | zb__138 when (eq_list (zb__138, [B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B0; B1])) ->
      "vxsat"
    | zb__139 when (eq_list (zb__139, [B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B1; B0])) ->
      "vxrm"
    | zb__140 when (eq_list (zb__140, [B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B1; B1])) ->
      "vcsr"
    | zb__141 when (eq_list (zb__141, [B1; B1; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0])) ->
      "vl"
    | zb__142 when (eq_list (zb__142, [B1; B1; B0; B0; B0; B0; B1; B0; B0; B0; B0; B1])) ->
      "vtype"
    | zb__143 when (eq_list (zb__143, [B1; B1; B0; B0; B0; B0; B1; B0; B0; B0; B1; B0])) ->
      "vlenb"
    | zreg -> zhex_bits_12_forwards zreg
  end)

and zcsr_name (zcsr : ((bit) list)) : string = sail_call (fun r ->
  zcsr_name_map_forwards zcsr)

type  zExceptionType =
  | ZE_Fetch_Addr_Align of unit
  | ZE_Fetch_Access_Fault of unit
  | ZE_Illegal_Instr of unit
  | ZE_Breakpoint of unit
  | ZE_Load_Addr_Align of unit
  | ZE_Load_Access_Fault of unit
  | ZE_SAMO_Addr_Align of unit
  | ZE_SAMO_Access_Fault of unit
  | ZE_U_EnvCall of unit
  | ZE_S_EnvCall of unit
  | ZE_Reserved_10 of unit
  | ZE_M_EnvCall of unit
  | ZE_Fetch_Page_Fault of unit
  | ZE_Load_Page_Fault of unit
  | ZE_Reserved_14 of unit
  | ZE_SAMO_Page_Fault of unit
  | ZE_Extension of zext_exc_type;;

let string_of_zExceptionType _ = "VARIANT";;

let rec zexceptionType_to_str (ze : (zExceptionType)) : string = sail_call (fun r ->
  begin
    match ze with
    | ZE_Fetch_Addr_Align (()) -> "misaligned-fetch"
    | ZE_Fetch_Access_Fault (()) -> "fetch-access-fault"
    | ZE_Illegal_Instr (()) -> "illegal-instruction"
    | ZE_Breakpoint (()) -> "breakpoint"
    | ZE_Load_Addr_Align (()) -> "misaligned-load"
    | ZE_Load_Access_Fault (()) -> "load-access-fault"
    | ZE_SAMO_Addr_Align (()) -> "misaliged-store/amo"
    | ZE_SAMO_Access_Fault (()) -> "store/amo-access-fault"
    | ZE_U_EnvCall (()) -> "u-call"
    | ZE_S_EnvCall (()) -> "s-call"
    | ZE_Reserved_10 (()) -> "reserved-0"
    | ZE_M_EnvCall (()) -> "m-call"
    | ZE_Fetch_Page_Fault (()) -> "fetch-page-fault"
    | ZE_Load_Page_Fault (()) -> "load-page-fault"
    | ZE_Reserved_14 (()) -> "reserved-1"
    | ZE_SAMO_Page_Fault (()) -> "store/amo-page-fault"
    | ZE_Extension (ze) -> zext_exc_type_to_str ze
  end)

type zbop =
  | ZRISCV_BEQ
  | ZRISCV_BNE
  | ZRISCV_BLT
  | ZRISCV_BGE
  | ZRISCV_BLTU
  | ZRISCV_BGEU;;

let string_of_zbop = function
  | ZRISCV_BEQ -> "RISCV_BEQ"
  | ZRISCV_BNE -> "RISCV_BNE"
  | ZRISCV_BLT -> "RISCV_BLT"
  | ZRISCV_BGE -> "RISCV_BGE"
  | ZRISCV_BLTU -> "RISCV_BLTU"
  | ZRISCV_BGEU -> "RISCV_BGEU";;

let rec zbtype_mnemonic_forwards (zargz3 : (zbop)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_BEQ -> "beq"
    | ZRISCV_BNE -> "bne"
    | ZRISCV_BLT -> "blt"
    | ZRISCV_BGE -> "bge"
    | ZRISCV_BLTU -> "bltu"
    | ZRISCV_BGEU -> "bgeu"
  end)

and zcreg_name_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0; B0])) -> "s0"
    | zb__1 when (eq_list (zb__1, [B0; B0; B1])) -> "s1"
    | zb__2 when (eq_list (zb__2, [B0; B1; B0])) -> "a0"
    | zb__3 when (eq_list (zb__3, [B0; B1; B1])) -> "a1"
    | zb__4 when (eq_list (zb__4, [B1; B0; B0])) -> "a2"
    | zb__5 when (eq_list (zb__5, [B1; B0; B1])) -> "a3"
    | zb__6 when (eq_list (zb__6, [B1; B1; B0])) -> "a4"
    | _ -> "a5"
  end)

and zcap_creg_name_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | zr -> string_append ("c", (string_append ((zcreg_name_forwards zr), "")))
  end)

and zreg_name_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0; B0; B0; B0])) -> "zero"
    | zb__1 when (eq_list (zb__1, [B0; B0; B0; B0; B1])) -> "ra"
    | zb__2 when (eq_list (zb__2, [B0; B0; B0; B1; B0])) -> "sp"
    | zb__3 when (eq_list (zb__3, [B0; B0; B0; B1; B1])) -> "gp"
    | zb__4 when (eq_list (zb__4, [B0; B0; B1; B0; B0])) -> "tp"
    | zb__5 when (eq_list (zb__5, [B0; B0; B1; B0; B1])) -> "t0"
    | zb__6 when (eq_list (zb__6, [B0; B0; B1; B1; B0])) -> "t1"
    | zb__7 when (eq_list (zb__7, [B0; B0; B1; B1; B1])) -> "t2"
    | zb__8 when (eq_list (zb__8, [B0; B1; B0; B0; B0])) -> "fp"
    | zb__9 when (eq_list (zb__9, [B0; B1; B0; B0; B1])) -> "s1"
    | zb__10 when (eq_list (zb__10, [B0; B1; B0; B1; B0])) -> "a0"
    | zb__11 when (eq_list (zb__11, [B0; B1; B0; B1; B1])) -> "a1"
    | zb__12 when (eq_list (zb__12, [B0; B1; B1; B0; B0])) -> "a2"
    | zb__13 when (eq_list (zb__13, [B0; B1; B1; B0; B1])) -> "a3"
    | zb__14 when (eq_list (zb__14, [B0; B1; B1; B1; B0])) -> "a4"
    | zb__15 when (eq_list (zb__15, [B0; B1; B1; B1; B1])) -> "a5"
    | zb__16 when (eq_list (zb__16, [B1; B0; B0; B0; B0])) -> "a6"
    | zb__17 when (eq_list (zb__17, [B1; B0; B0; B0; B1])) -> "a7"
    | zb__18 when (eq_list (zb__18, [B1; B0; B0; B1; B0])) -> "s2"
    | zb__19 when (eq_list (zb__19, [B1; B0; B0; B1; B1])) -> "s3"
    | zb__20 when (eq_list (zb__20, [B1; B0; B1; B0; B0])) -> "s4"
    | zb__21 when (eq_list (zb__21, [B1; B0; B1; B0; B1])) -> "s5"
    | zb__22 when (eq_list (zb__22, [B1; B0; B1; B1; B0])) -> "s6"
    | zb__23 when (eq_list (zb__23, [B1; B0; B1; B1; B1])) -> "s7"
    | zb__24 when (eq_list (zb__24, [B1; B1; B0; B0; B0])) -> "s8"
    | zb__25 when (eq_list (zb__25, [B1; B1; B0; B0; B1])) -> "s9"
    | zb__26 when (eq_list (zb__26, [B1; B1; B0; B1; B0])) -> "s10"
    | zb__27 when (eq_list (zb__27, [B1; B1; B0; B1; B1])) -> "s11"
    | zb__28 when (eq_list (zb__28, [B1; B1; B1; B0; B0])) -> "t3"
    | zb__29 when (eq_list (zb__29, [B1; B1; B1; B0; B1])) -> "t4"
    | zb__30 when (eq_list (zb__30, [B1; B1; B1; B1; B0])) -> "t5"
    | _ -> "t6"
  end)

and zcap_reg_name_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0; B0; B0; B0])) -> "cnull"
    | zr -> string_append ("c", (string_append ((zreg_name_forwards zr), "")))
  end)

type zcsrop = | ZCSRRW | ZCSRRS | ZCSRRC;;

let string_of_zcsrop = function
  | ZCSRRW -> "CSRRW"
  | ZCSRRS -> "CSRRS"
  | ZCSRRC -> "CSRRC";;

let rec zcsr_mnemonic_forwards (zargz3 : (zcsrop)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | ZCSRRW -> "csrrw"
    | ZCSRRS -> "csrrs"
    | ZCSRRC -> "csrrc"
  end)

and zbit_maybe_i_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B1])) -> "i"
    | _ -> ""
  end)

and zbit_maybe_o_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B1])) -> "o"
    | _ -> ""
  end)

and zbit_maybe_r_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B1])) -> "r"
    | _ -> ""
  end)

and zbit_maybe_w_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B1])) -> "w"
    | _ -> ""
  end)

and zfence_bits_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | zv__26 ->
      let zi = (subrange (zv__26, (Big_int.of_int (3)), (Big_int.of_int (3)))) in
      let zw = (subrange (zv__26, Big_int.zero, Big_int.zero)) in
      let zr = (subrange (zv__26, (Big_int.of_int (1)), (Big_int.of_int (1)))) in
      let zo = (subrange (zv__26, (Big_int.of_int (2)), (Big_int.of_int (2)))) in
      let zi = (subrange (zv__26, (Big_int.of_int (3)), (Big_int.of_int (3)))) in
      string_append ((zbit_maybe_i_forwards zi), (string_append ((zbit_maybe_o_forwards zo), (string_append ((zbit_maybe_r_forwards zr), (string_append ((zbit_maybe_w_forwards zw), "")))))))
  end)

type ziop =
  | ZRISCV_ADDI
  | ZRISCV_SLTI
  | ZRISCV_SLTIU
  | ZRISCV_XORI
  | ZRISCV_ORI
  | ZRISCV_ANDI;;

let string_of_ziop = function
  | ZRISCV_ADDI -> "RISCV_ADDI"
  | ZRISCV_SLTI -> "RISCV_SLTI"
  | ZRISCV_SLTIU -> "RISCV_SLTIU"
  | ZRISCV_XORI -> "RISCV_XORI"
  | ZRISCV_ORI -> "RISCV_ORI"
  | ZRISCV_ANDI -> "RISCV_ANDI";;

let rec zitype_mnemonic_forwards (zargz3 : (ziop)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_ADDI -> "addi"
    | ZRISCV_SLTI -> "slti"
    | ZRISCV_SLTIU -> "sltiu"
    | ZRISCV_XORI -> "xori"
    | ZRISCV_ORI -> "ori"
    | ZRISCV_ANDI -> "andi"
  end)

and zmaybe_aq_forwards (zargz3 : (bool)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | zp0z3 when (eq_bool (zp0z3, true)) -> ".aq"
    | zp0z3 when (eq_bool (zp0z3, false)) -> ""
  end)

and zmaybe_not_u_forwards (zargz3 : (bool)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | zp0z3 when (eq_bool (zp0z3, false)) -> "u"
    | zp0z3 when (eq_bool (zp0z3, true)) -> ""
  end)

and zmaybe_rl_forwards (zargz3 : (bool)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | zp0z3 when (eq_bool (zp0z3, true)) -> ".rl"
    | zp0z3 when (eq_bool (zp0z3, false)) -> ""
  end)

and zmaybe_u_forwards (zargz3 : (bool)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | zp0z3 when (eq_bool (zp0z3, true)) -> "u"
    | zp0z3 when (eq_bool (zp0z3, false)) -> ""
  end)

and zmul_mnemonic_forwards (zargz3 : ((bool * bool * bool))) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, true)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, false))) ->
      "mul"
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, true)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, true))) ->
      "mulh"
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, false)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, true))) ->
      "mulhsu"
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, false)) && (eq_bool (zp1z3, false))) && (eq_bool (zp0z3, true))) ->
      "mulhu"
  end)

type zrop =
  | ZRISCV_ADD
  | ZRISCV_SUB
  | ZRISCV_SLL
  | ZRISCV_SLT
  | ZRISCV_SLTU
  | ZRISCV_XOR
  | ZRISCV_SRL
  | ZRISCV_SRA
  | ZRISCV_OR
  | ZRISCV_AND;;

let string_of_zrop = function
  | ZRISCV_ADD -> "RISCV_ADD"
  | ZRISCV_SUB -> "RISCV_SUB"
  | ZRISCV_SLL -> "RISCV_SLL"
  | ZRISCV_SLT -> "RISCV_SLT"
  | ZRISCV_SLTU -> "RISCV_SLTU"
  | ZRISCV_XOR -> "RISCV_XOR"
  | ZRISCV_SRL -> "RISCV_SRL"
  | ZRISCV_SRA -> "RISCV_SRA"
  | ZRISCV_OR -> "RISCV_OR"
  | ZRISCV_AND -> "RISCV_AND";;

let rec zrtype_mnemonic_forwards (zargz3 : (zrop)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_ADD -> "add"
    | ZRISCV_SLT -> "slt"
    | ZRISCV_SLTU -> "sltu"
    | ZRISCV_AND -> "and"
    | ZRISCV_OR -> "or"
    | ZRISCV_XOR -> "xor"
    | ZRISCV_SLL -> "sll"
    | ZRISCV_SRL -> "srl"
    | ZRISCV_SUB -> "sub"
    | ZRISCV_SRA -> "sra"
  end)

type zropw =
  | ZRISCV_ADDW
  | ZRISCV_SUBW
  | ZRISCV_SLLW
  | ZRISCV_SRLW
  | ZRISCV_SRAW;;

let string_of_zropw = function
  | ZRISCV_ADDW -> "RISCV_ADDW"
  | ZRISCV_SUBW -> "RISCV_SUBW"
  | ZRISCV_SLLW -> "RISCV_SLLW"
  | ZRISCV_SRLW -> "RISCV_SRLW"
  | ZRISCV_SRAW -> "RISCV_SRAW";;

let rec zrtypew_mnemonic_forwards (zargz3 : (zropw)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_ADDW -> "addw"
    | ZRISCV_SUBW -> "subw"
    | ZRISCV_SLLW -> "sllw"
    | ZRISCV_SRLW -> "srlw"
    | ZRISCV_SRAW -> "sraw"
  end)

and zscr_name_map_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0; B0; B0; B0])) -> "pcc"
    | zb__1 when (eq_list (zb__1, [B0; B0; B0; B0; B1])) -> "ddc"
    | zb__2 when (eq_list (zb__2, [B0; B0; B1; B0; B0])) -> "utcc"
    | zb__3 when (eq_list (zb__3, [B0; B0; B1; B0; B1])) -> "utdc"
    | zb__4 when (eq_list (zb__4, [B0; B0; B1; B1; B0])) -> "uscratchc"
    | zb__5 when (eq_list (zb__5, [B0; B0; B1; B1; B1])) -> "uepcc"
    | zb__6 when (eq_list (zb__6, [B1; B0; B1; B0; B0])) -> "stcc"
    | zb__7 when (eq_list (zb__7, [B1; B0; B1; B0; B1])) -> "stdc"
    | zb__8 when (eq_list (zb__8, [B1; B0; B1; B1; B0])) -> "sscratchc"
    | zb__9 when (eq_list (zb__9, [B1; B0; B1; B1; B1])) -> "sepcc"
    | zb__10 when (eq_list (zb__10, [B1; B1; B1; B0; B0])) -> "mtcc"
    | zb__11 when (eq_list (zb__11, [B1; B1; B1; B0; B1])) -> "mtdc"
    | zb__12 when (eq_list (zb__12, [B1; B1; B1; B1; B0])) -> "mscratchc"
    | zb__13 when (eq_list (zb__13, [B1; B1; B1; B1; B1])) -> "mepcc"
    | zb__14 when (eq_list (zb__14, [B0; B0; B0; B1; B0])) -> "0x2"
    | zb__15 when (eq_list (zb__15, [B0; B0; B0; B1; B1])) -> "0x3"
    | zb__16 when (eq_list (zb__16, [B0; B1; B0; B0; B0])) -> "0x8"
    | zb__17 when (eq_list (zb__17, [B0; B1; B0; B0; B1])) -> "0x9"
    | zb__18 when (eq_list (zb__18, [B0; B1; B0; B1; B0])) -> "0xA"
    | zb__19 when (eq_list (zb__19, [B0; B1; B0; B1; B1])) -> "0xB"
    | zb__20 when (eq_list (zb__20, [B0; B1; B1; B0; B0])) -> "0xC"
    | zb__21 when (eq_list (zb__21, [B0; B1; B1; B0; B1])) -> "0xD"
    | zb__22 when (eq_list (zb__22, [B0; B1; B1; B1; B0])) -> "0xE"
    | zb__23 when (eq_list (zb__23, [B0; B1; B1; B1; B1])) -> "0xF"
    | zb__24 when (eq_list (zb__24, [B1; B0; B0; B0; B0])) -> "0x10"
    | zb__25 when (eq_list (zb__25, [B1; B0; B0; B0; B1])) -> "0x11"
    | zb__26 when (eq_list (zb__26, [B1; B0; B0; B1; B0])) -> "0x12"
    | zb__27 when (eq_list (zb__27, [B1; B0; B0; B1; B1])) -> "0x13"
    | zb__28 when (eq_list (zb__28, [B1; B1; B0; B0; B0])) -> "0x18"
    | zb__29 when (eq_list (zb__29, [B1; B1; B0; B0; B1])) -> "0x19"
    | zb__30 when (eq_list (zb__30, [B1; B1; B0; B1; B0])) -> "0x1A"
    | _ -> "0x1B"
  end)

type zsop = | ZRISCV_SLLI | ZRISCV_SRLI | ZRISCV_SRAI;;

let string_of_zsop = function
  | ZRISCV_SLLI -> "RISCV_SLLI"
  | ZRISCV_SRLI -> "RISCV_SRLI"
  | ZRISCV_SRAI -> "RISCV_SRAI";;

let rec zshiftiop_mnemonic_forwards (zargz3 : (zsop)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_SLLI -> "slli"
    | ZRISCV_SRLI -> "srli"
    | ZRISCV_SRAI -> "srai"
  end)

type zsopw = | ZRISCV_SLLIW | ZRISCV_SRLIW | ZRISCV_SRAIW;;

let string_of_zsopw = function
  | ZRISCV_SLLIW -> "RISCV_SLLIW"
  | ZRISCV_SRLIW -> "RISCV_SRLIW"
  | ZRISCV_SRAIW -> "RISCV_SRAIW";;

let rec zshiftiwop_mnemonic_forwards (zargz3 : (zsopw)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_SLLIW -> "slliw"
    | ZRISCV_SRLIW -> "srliw"
    | ZRISCV_SRAIW -> "sraiw"
  end)

type zword_width = | ZBYTE | ZHALF | ZWORD | ZDOUBLE;;

let string_of_zword_width = function
  | ZBYTE -> "BYTE"
  | ZHALF -> "HALF"
  | ZWORD -> "WORD"
  | ZDOUBLE -> "DOUBLE";;

let rec zsizze_mnemonic_forwards (zargz3 : (zword_width)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | ZBYTE -> "b"
    | ZHALF -> "h"
    | ZWORD -> "w"
    | ZDOUBLE -> "d"
  end)

type zuop = | ZRISCV_LUI | ZRISCV_AUIPC;;

let string_of_zuop = function
  | ZRISCV_LUI -> "RISCV_LUI"
  | ZRISCV_AUIPC -> "RISCV_AUIPC";;

let rec zutype_mnemonic_forwards (zargz3 : (zuop)) : string = sail_call (fun r ->
  begin match zargz3 with | ZRISCV_LUI -> "lui" | ZRISCV_AUIPC -> "auipc" end)

type  zast =
  | ZILLEGAL of zword
  | ZC_ILLEGAL of zhalf
  | ZUTYPE of (zbits * zregidx * zuop)
  | ZRISCV_JAL of (zbits * zregidx)
  | ZRISCV_JALR of (zbits * zregidx * zregidx)
  | ZBTYPE of (zbits * zregidx * zregidx * zbop)
  | ZITYPE of (zbits * zregidx * zregidx * ziop)
  | ZSHIFTIOP of (zbits * zregidx * zregidx * zsop)
  | ZRTYPE of (zregidx * zregidx * zregidx * zrop)
  | ZLOAD of (zbits * zregidx * zregidx * bool * zword_width * bool * bool)
  | ZSTORE of (zbits * zregidx * zregidx * zword_width * bool * bool)
  | ZADDIW of (zbits * zregidx * zregidx)
  | ZRTYPEW of (zregidx * zregidx * zregidx * zropw)
  | ZSHIFTIWOP of (zbits * zregidx * zregidx * zsopw)
  | ZFENCE of (zbits * zbits)
  | ZFENCE_TSO of (zbits * zbits)
  | ZFENCEI of unit
  | ZECALL of unit
  | ZMRET of unit
  | ZSRET of unit
  | ZEBREAK of unit
  | ZWFI of unit
  | ZSFENCE_VMA of (zregidx * zregidx)
  | ZC_NOP of unit
  | ZC_ADDI4SPN of (zcregidx * zbits)
  | ZC_LW of (zbits * zcregidx * zcregidx)
  | ZC_LD of (zbits * zcregidx * zcregidx)
  | ZC_SW of (zbits * zcregidx * zcregidx)
  | ZC_SD of (zbits * zcregidx * zcregidx)
  | ZC_ADDI of (zbits * zregidx)
  | ZC_JAL of zbits
  | ZC_ADDIW of (zbits * zregidx)
  | ZC_LI of (zbits * zregidx)
  | ZC_ADDI16SP of zbits
  | ZC_LUI of (zbits * zregidx)
  | ZC_SRLI of (zbits * zcregidx)
  | ZC_SRAI of (zbits * zcregidx)
  | ZC_ANDI of (zbits * zcregidx)
  | ZC_SUB of (zcregidx * zcregidx)
  | ZC_XOR of (zcregidx * zcregidx)
  | ZC_OR of (zcregidx * zcregidx)
  | ZC_AND of (zcregidx * zcregidx)
  | ZC_SUBW of (zcregidx * zcregidx)
  | ZC_ADDW of (zcregidx * zcregidx)
  | ZC_J of zbits
  | ZC_BEQZ of (zbits * zcregidx)
  | ZC_BNEZ of (zbits * zcregidx)
  | ZC_SLLI of (zbits * zregidx)
  | ZC_LWSP of (zbits * zregidx)
  | ZC_LDSP of (zbits * zregidx)
  | ZC_SWSP of (zbits * zregidx)
  | ZC_SDSP of (zbits * zregidx)
  | ZC_JR of zregidx
  | ZC_JALR of zregidx
  | ZC_MV of (zregidx * zregidx)
  | ZC_EBREAK of unit
  | ZC_ADD of (zregidx * zregidx)
  | ZMUL of (zregidx * zregidx * zregidx * bool * bool * bool)
  | ZDIV of (zregidx * zregidx * zregidx * bool)
  | ZREM of (zregidx * zregidx * zregidx * bool)
  | ZMULW of (zregidx * zregidx * zregidx)
  | ZDIVW of (zregidx * zregidx * zregidx * bool)
  | ZREMW of (zregidx * zregidx * zregidx * bool)
  | ZCSR of (zbits * zregidx * zregidx * bool * zcsrop)
  | ZC_NOP_HINT of zbits
  | ZC_ADDI_HINT of zregidx
  | ZC_LI_HINT of zbits
  | ZC_LUI_HINT of zbits
  | ZC_MV_HINT of zregidx
  | ZC_ADD_HINT of zregidx
  | ZC_SLLI_HINT of (zbits * zregidx)
  | ZC_SRLI_HINT of zcregidx
  | ZC_SRAI_HINT of zcregidx
  | ZFENCE_RESERVED of (zbits * zbits * zbits * zregidx * zregidx)
  | ZFENCEI_RESERVED of (zbits * zregidx * zregidx)
  | ZAUIPCC of (zbits * zregidx)
  | ZAUICGP of (zbits * zregidx)
  | ZCJAL of (zbits * zregidx)
  | ZCJALR of (zbits * zregidx * zregidx)
  | ZCGetPerm of (zregidx * zregidx)
  | ZCGetType of (zregidx * zregidx)
  | ZCGetBase of (zregidx * zregidx)
  | ZCGetLen of (zregidx * zregidx)
  | ZCGetTag of (zregidx * zregidx)
  | ZCGetAddr of (zregidx * zregidx)
  | ZCGetHigh of (zregidx * zregidx)
  | ZCGetTop of (zregidx * zregidx)
  | ZCSetHigh of (zregidx * zregidx * zregidx)
  | ZCSpecialRW of (zregidx * zscreg * zregidx)
  | ZCAndPerm of (zregidx * zregidx * zregidx)
  | ZCSub of (zregidx * zregidx * zregidx)
  | ZCIncAddr of (zregidx * zregidx * zregidx)
  | ZCIncAddrImmediate of (zregidx * zregidx * zbits)
  | ZCSetAddr of (zregidx * zregidx * zregidx)
  | ZCSetBounds of (zregidx * zregidx * zregidx)
  | ZCSetBoundsImmediate of (zregidx * zregidx * zbits)
  | ZCSetBoundsExact of (zregidx * zregidx * zregidx)
  | ZCSetBoundsRoundDown of (zregidx * zregidx * zregidx)
  | ZCClearTag of (zregidx * zregidx)
  | ZCMove of (zregidx * zregidx)
  | ZCRRL of (zregidx * zregidx)
  | ZCRAM of (zregidx * zregidx)
  | ZCTestSubset of (zregidx * zregidx * zregidx)
  | ZCSEQX of (zregidx * zregidx * zregidx)
  | ZCSeal of (zregidx * zregidx * zregidx)
  | ZCUnseal of (zregidx * zregidx * zregidx)
  | ZLoadCapImm of (zregidx * zregidx * zbits)
  | ZStoreCapImm of (zregidx * zregidx * zbits)
  | ZC_CLC of (zcregidx * zcregidx * zbits)
  | ZC_CLCSP of (zregidx * zbits)
  | ZC_CSC of (zcregidx * zcregidx * zbits)
  | ZC_CSCSP of (zregidx * zbits)
  | ZC_CIncAddr16CSP of zbits
  | ZC_CIncAddr4CSPN of (zcregidx * zbits)
  | ZC_CJALR of zregidx
  | ZC_CJR of zregidx
  | ZC_CJAL of zbits
  | ZNOT_CAPMODE of zword
  | ZNOT_C_CAPMODE of zhalf;;

let string_of_zast _ = "VARIANT";;

let rec zassembly_forwards (zargz3 : (zast)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | ZUTYPE ((zimm, zrd, zop)) ->
      string_append ((zutype_mnemonic_forwards zop), (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_20_forwards zimm), "")))))))))
    | ZRISCV_JAL ((zimm, zrd)) ->
      string_append ("jal", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_21_forwards zimm), "")))))))))
    | ZRISCV_JALR ((zimm, zrs1, zrd)) ->
      string_append ("jalr", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_12_forwards zimm), (string_append ("(", (string_append ((zreg_name_forwards zrs1), (string_append (")", "")))))))))))))))
    | ZBTYPE ((zimm, zrs2, zrs1, zop)) ->
      string_append ((zbtype_mnemonic_forwards zop), (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrs1), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs2), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_13_forwards zimm), "")))))))))))))
    | ZITYPE ((zimm, zrs1, zrd, zop)) ->
      string_append ((zitype_mnemonic_forwards zop), (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs1), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_12_forwards zimm), "")))))))))))))
    | ZSHIFTIOP ((zshamt, zrs1, zrd, zop)) ->
      string_append ((zshiftiop_mnemonic_forwards zop), (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs1), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_6_forwards zshamt), "")))))))))))))
    | ZRTYPE ((zrs2, zrs1, zrd, zop)) ->
      string_append ((zrtype_mnemonic_forwards zop), (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs1), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs2), "")))))))))))))
    | ZLOAD ((zimm, zrs1, zrd, zis_unsigned, zsizze, zaq, zrl)) ->
      string_append ("l", (string_append ((zsizze_mnemonic_forwards zsizze), (string_append ((zmaybe_u_forwards zis_unsigned), (string_append ((zmaybe_aq_forwards zaq), (string_append ((zmaybe_rl_forwards zrl), (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_12_forwards zimm), (string_append ("(", (string_append ((zreg_name_forwards zrs1), (string_append (")", "")))))))))))))))))))))))
    | ZSTORE ((zimm, zrs2, zrs1, zsizze, zaq, zrl)) ->
      string_append ("s", (string_append ((zsizze_mnemonic_forwards zsizze), (string_append ((zmaybe_aq_forwards zaq), (string_append ((zmaybe_rl_forwards zrl), (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrs2), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_12_forwards zimm), (string_append ((zopt_spc_forwards ()), (string_append ("(", (string_append ((zopt_spc_forwards ()), (string_append ((zreg_name_forwards zrs1), (string_append ((zopt_spc_forwards ()), (string_append (")", "")))))))))))))))))))))))))))
    | ZADDIW ((zimm, zrs1, zrd)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      string_append ("addiw", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs1), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_12_forwards zimm), "")))))))))))))
    | ZRTYPEW ((zrs2, zrs1, zrd, zop)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      string_append ((zrtypew_mnemonic_forwards zop), (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs1), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs2), "")))))))))))))
    | ZSHIFTIWOP ((zshamt, zrs1, zrd, zop)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      string_append ((zshiftiwop_mnemonic_forwards zop), (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs1), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_5_forwards zshamt), "")))))))))))))
    | ZFENCE ((zpred, zsucc)) ->
      string_append ("fence", (string_append ((zspc_forwards ()), (string_append ((zfence_bits_forwards zpred), (string_append ((zsep_forwards ()), (string_append ((zfence_bits_forwards zsucc), "")))))))))
    | ZFENCE_TSO ((zpred, zsucc)) ->
      string_append ("fence.tso", (string_append ((zspc_forwards ()), (string_append ((zfence_bits_forwards zpred), (string_append ((zsep_forwards ()), (string_append ((zfence_bits_forwards zsucc), "")))))))))
    | ZFENCEI (()) -> "fence.i"
    | ZECALL (()) -> "ecall"
    | ZMRET (()) -> "mret"
    | ZSRET (()) -> "sret"
    | ZEBREAK (()) -> "ebreak"
    | ZWFI (()) -> "wfi"
    | ZSFENCE_VMA ((zrs1, zrs2)) ->
      string_append ("sfence.vma", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrs1), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs2), "")))))))))
    | ZC_NOP (()) -> "c.nop"
    | ZC_ADDI4SPN ((zrdc, znzzimm)) when (zneq_bits (znzzimm, [B0; B0; B0; B0; B0; B0; B0; B0])) ->
      string_append ("c.addi4spn", (string_append ((zspc_forwards ()), (string_append ((zcreg_name_forwards zrdc), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_10_forwards (append ((znzzimm), [B0; B0]))), "")))))))))
    | ZC_LW ((zuimm, zrsc, zrdc)) ->
      string_append ("c.lw", (string_append ((zspc_forwards ()), (string_append ((zcreg_name_forwards zrdc), (string_append ((zsep_forwards ()), (string_append ((zcreg_name_forwards zrsc), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_7_forwards (append ((zuimm), [B0; B0]))), "")))))))))))))
    | ZC_LD ((zuimm, zrsc, zrdc)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      string_append ("c.ld", (string_append ((zspc_forwards ()), (string_append ((zcreg_name_forwards zrdc), (string_append ((zsep_forwards ()), (string_append ((zcreg_name_forwards zrsc), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_8_forwards (append ((zuimm), [B0; B0; B0]))), "")))))))))))))
    | ZC_SW ((zuimm, zrsc1, zrsc2)) ->
      string_append ("c.sw", (string_append ((zspc_forwards ()), (string_append ((zcreg_name_forwards zrsc1), (string_append ((zsep_forwards ()), (string_append ((zcreg_name_forwards zrsc2), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_7_forwards (append ((zuimm), [B0; B0]))), "")))))))))))))
    | ZC_SD ((zuimm, zrsc1, zrsc2)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      string_append ("c.sd", (string_append ((zspc_forwards ()), (string_append ((zcreg_name_forwards zrsc1), (string_append ((zsep_forwards ()), (string_append ((zcreg_name_forwards zrsc2), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_8_forwards (append ((zuimm), [B0; B0; B0]))), "")))))))))))))
    | ZC_ADDI ((znzzi, zrsd)) when ((zneq_bits (znzzi, [B0; B0; B0; B0; B0; B0])) && (zneq_bits (zrsd, zzzreg))) ->
      string_append ("c.addi", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrsd), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_6_forwards znzzi), "")))))))))
    | ZC_JAL (zimm) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) ->
      string_append ("c.jal", (string_append ((zspc_forwards ()), (string_append ((zhex_bits_12_forwards (append ((zimm), [B0]))), "")))))
    | ZC_ADDIW ((zimm, zrsd)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      string_append ("c.addiw", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrsd), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_6_forwards zimm), "")))))))))
    | ZC_LI ((zimm, zrd)) when (zneq_bits (zrd, zzzreg)) ->
      string_append ("c.li", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_6_forwards zimm), "")))))))))
    | ZC_ADDI16SP (zimm) when (zneq_bits (zimm, [B0; B0; B0; B0; B0; B0])) ->
      string_append ("c.addi16sp", (string_append ((zspc_forwards ()), (string_append ((zhex_bits_6_forwards zimm), "")))))
    | ZC_LUI ((zimm, zrd)) when ((zneq_bits (zrd, zzzreg)) && ((zneq_bits (zrd, zsp)) && (zneq_bits (zimm, [B0; B0; B0; B0; B0; B0])))) ->
      string_append ("c.lui", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_6_forwards zimm), "")))))))))
    | ZC_SRLI ((zshamt, zrsd)) when (zneq_bits (zshamt, [B0; B0; B0; B0; B0; B0])) ->
      string_append ("c.srli", (string_append ((zspc_forwards ()), (string_append ((zcreg_name_forwards zrsd), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_6_forwards zshamt), "")))))))))
    | ZC_SRAI ((zshamt, zrsd)) when (zneq_bits (zshamt, [B0; B0; B0; B0; B0; B0])) ->
      string_append ("c.srai", (string_append ((zspc_forwards ()), (string_append ((zcreg_name_forwards zrsd), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_6_forwards zshamt), "")))))))))
    | ZC_ANDI ((zimm, zrsd)) ->
      string_append ("c.andi", (string_append ((zspc_forwards ()), (string_append ((zcreg_name_forwards zrsd), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_6_forwards zimm), "")))))))))
    | ZC_SUB ((zrsd, zrs2)) ->
      string_append ("c.sub", (string_append ((zspc_forwards ()), (string_append ((zcreg_name_forwards zrsd), (string_append ((zsep_forwards ()), (string_append ((zcreg_name_forwards zrs2), "")))))))))
    | ZC_XOR ((zrsd, zrs2)) ->
      string_append ("c.xor", (string_append ((zspc_forwards ()), (string_append ((zcreg_name_forwards zrsd), (string_append ((zsep_forwards ()), (string_append ((zcreg_name_forwards zrs2), "")))))))))
    | ZC_OR ((zrsd, zrs2)) ->
      string_append ("c.or", (string_append ((zspc_forwards ()), (string_append ((zcreg_name_forwards zrsd), (string_append ((zsep_forwards ()), (string_append ((zcreg_name_forwards zrs2), "")))))))))
    | ZC_AND ((zrsd, zrs2)) ->
      string_append ("c.and", (string_append ((zspc_forwards ()), (string_append ((zcreg_name_forwards zrsd), (string_append ((zsep_forwards ()), (string_append ((zcreg_name_forwards zrs2), "")))))))))
    | ZC_SUBW ((zrsd, zrs2)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      string_append ("c.subw", (string_append ((zspc_forwards ()), (string_append ((zcreg_name_forwards zrsd), (string_append ((zsep_forwards ()), (string_append ((zcreg_name_forwards zrs2), "")))))))))
    | ZC_ADDW ((zrsd, zrs2)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      string_append ("c.addw", (string_append ((zspc_forwards ()), (string_append ((zcreg_name_forwards zrsd), (string_append ((zsep_forwards ()), (string_append ((zcreg_name_forwards zrs2), "")))))))))
    | ZC_J (zimm) ->
      string_append ("c.j", (string_append ((zspc_forwards ()), (string_append ((zhex_bits_11_forwards zimm), "")))))
    | ZC_BEQZ ((zimm, zrs)) ->
      string_append ("c.beqz", (string_append ((zspc_forwards ()), (string_append ((zcreg_name_forwards zrs), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_8_forwards zimm), "")))))))))
    | ZC_BNEZ ((zimm, zrs)) ->
      string_append ("c.bnez", (string_append ((zspc_forwards ()), (string_append ((zcreg_name_forwards zrs), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_8_forwards zimm), "")))))))))
    | ZC_SLLI ((zshamt, zrsd)) when ((zneq_bits (zshamt, [B0; B0; B0; B0; B0; B0])) && (zneq_bits (zrsd, zzzreg))) ->
      string_append ("c.slli", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrsd), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_6_forwards zshamt), "")))))))))
    | ZC_LWSP ((zuimm, zrd)) when (zneq_bits (zrd, zzzreg)) ->
      string_append ("c.lwsp", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_6_forwards zuimm), "")))))))))
    | ZC_LDSP ((zuimm, zrd)) when ((zneq_bits (zrd, zzzreg)) && (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64))))) ->
      string_append ("c.ldsp", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_6_forwards zuimm), "")))))))))
    | ZC_SWSP ((zuimm, zrs2)) ->
      string_append ("c.swsp", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrs2), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_6_forwards zuimm), "")))))))))
    | ZC_SDSP ((zuimm, zrs2)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      string_append ("c.sdsp", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrs2), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_6_forwards zuimm), "")))))))))
    | ZC_JR (zrs1) when (zneq_bits (zrs1, zzzreg)) ->
      string_append ("c.jr", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrs1), "")))))
    | ZC_JALR (zrs1) when (zneq_bits (zrs1, zzzreg)) ->
      string_append ("c.jalr", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrs1), "")))))
    | ZC_MV ((zrd, zrs2)) when ((zneq_bits (zrd, zzzreg)) && (zneq_bits (zrs2, zzzreg))) ->
      string_append ("c.mv", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs2), "")))))))))
    | ZC_EBREAK (()) -> "c.ebreak"
    | ZC_ADD ((zrsd, zrs2)) when ((zneq_bits (zrsd, zzzreg)) && (zneq_bits (zrs2, zzzreg))) ->
      string_append ("c.add", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrsd), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs2), "")))))))))
    | ZMUL ((zrs2, zrs1, zrd, zhigh, zsigned1, zsigned2)) ->
      string_append ((zmul_mnemonic_forwards ((fun (v0, v1, v2) -> (v2, v1, v0)) (zsigned2, zsigned1, zhigh))), (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs1), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs2), "")))))))))))))
    | ZDIV ((zrs2, zrs1, zrd, zs)) ->
      string_append ("div", (string_append ((zmaybe_not_u_forwards zs), (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs1), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs2), "")))))))))))))))
    | ZREM ((zrs2, zrs1, zrd, zs)) ->
      string_append ("rem", (string_append ((zmaybe_not_u_forwards zs), (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs1), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs2), "")))))))))))))))
    | ZMULW ((zrs2, zrs1, zrd)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      string_append ("mulw", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs1), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs2), "")))))))))))))
    | ZDIVW ((zrs2, zrs1, zrd, zs)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      string_append ("div", (string_append ((zmaybe_not_u_forwards zs), (string_append ("w", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs1), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs2), "")))))))))))))))))
    | ZREMW ((zrs2, zrs1, zrd, zs)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      string_append ("rem", (string_append ((zmaybe_not_u_forwards zs), (string_append ("w", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs1), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs2), "")))))))))))))))))
    | ZCSR ((zcsr, zrs1, zrd, zp0z3, zop)) when (eq_bool (zp0z3, true)) ->
      string_append ((zcsr_mnemonic_forwards zop), (string_append ("i", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zcsr_name_map_forwards zcsr), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_5_forwards zrs1), "")))))))))))))))
    | ZCSR ((zcsr, zrs1, zrd, zp0z3, zop)) when (eq_bool (zp0z3, false)) ->
      string_append ((zcsr_mnemonic_forwards zop), (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zcsr_name_map_forwards zcsr), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs1), "")))))))))))))
    | ZC_NOP_HINT (zimm) ->
      string_append ("c.nop.hint.", (string_append ((zhex_bits_6_forwards zimm), "")))
    | ZC_ADDI_HINT (zrsd) when (zneq_bits (zrsd, zzzreg)) ->
      string_append ("c.addi.hint.", (string_append ((zreg_name_forwards zrsd), "")))
    | ZC_LI_HINT (zimm) ->
      string_append ("c.li.hint.", (string_append ((zhex_bits_6_forwards zimm), "")))
    | ZC_LUI_HINT (zimm) when (zneq_bits (zimm, [B0; B0; B0; B0; B0; B0])) ->
      string_append ("c.lui.hint.", (string_append ((zhex_bits_6_forwards zimm), "")))
    | ZC_MV_HINT (zrs2) when (zneq_bits (zrs2, zzzreg)) ->
      string_append ("c.mv.hint.", (string_append ((zreg_name_forwards zrs2), "")))
    | ZC_ADD_HINT (zrs2) when (zneq_bits (zrs2, zzzreg)) ->
      string_append ("c.add.hint.", (string_append ((zreg_name_forwards zrs2), "")))
    | ZC_SLLI_HINT ((zshamt, zrsd)) when ((eq_list (zshamt, [B0; B0; B0; B0; B0; B0])) || (eq_list (zrsd, zzzreg))) ->
      string_append ("c.slli.hint.", (string_append ((zreg_name_forwards zrsd), (string_append (".", (string_append ((zhex_bits_6_forwards zshamt), "")))))))
    | ZC_SRLI_HINT (zrsd) ->
      string_append ("c.srli.hint.", (string_append ((zcreg_name_forwards zrsd), "")))
    | ZC_SRAI_HINT (zrsd) ->
      string_append ("c.srai.hint.", (string_append ((zcreg_name_forwards zrsd), "")))
    | ZFENCE_RESERVED ((zfm, zpred, zsucc, zrs, zrd)) when (((zneq_bits (zfm, [B0; B0; B0; B0])) && (zneq_bits (zfm, [B1; B0; B0; B0]))) || ((zneq_bits (zrs, [B0; B0; B0; B0; B0])) || (zneq_bits (zrd, [B0; B0; B0; B0; B0])))) ->
      string_append ("fence.reserved.", (string_append ((zfence_bits_forwards zpred), (string_append (".", (string_append ((zfence_bits_forwards zsucc), (string_append (".", (string_append ((zreg_name_forwards zrs), (string_append (".", (string_append ((zreg_name_forwards zrd), (string_append (".", (string_append ((zhex_bits_4_forwards zfm), "")))))))))))))))))))
    | ZFENCEI_RESERVED ((zimm, zrs, zrd)) when ((zneq_bits (zimm, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0])) || ((zneq_bits (zrs, zzzreg)) || (zneq_bits (zrd, zzzreg)))) ->
      string_append ("fence.i.reserved.", (string_append ((zreg_name_forwards zrd), (string_append (".", (string_append ((zreg_name_forwards zrs), (string_append (".", (string_append ((zhex_bits_12_forwards zimm), "")))))))))))
    | ZAUICGP ((zimm, zcd)) ->
      string_append ("auicgp", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zcd), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_20_forwards zimm), "")))))))))
    | ZAUIPCC ((zimm, zcd)) ->
      string_append ("auipcc", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zcd), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_20_forwards zimm), "")))))))))
    | ZCGetPerm ((zrd, zcs1)) ->
      string_append ("cgetperm", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), "")))))))))
    | ZCGetType ((zrd, zcs1)) ->
      string_append ("cgettype", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), "")))))))))
    | ZCGetBase ((zrd, zcs1)) ->
      string_append ("cgetbase", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), "")))))))))
    | ZCGetLen ((zrd, zcs1)) ->
      string_append ("cgetlen", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), "")))))))))
    | ZCGetTag ((zrd, zcs1)) ->
      string_append ("cgettag", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), "")))))))))
    | ZCGetAddr ((zrd, zcs1)) ->
      string_append ("cgetaddr", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), "")))))))))
    | ZCGetHigh ((zrd, zcs1)) ->
      string_append ("cgethigh", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), "")))))))))
    | ZCGetTop ((zrd, zcs1)) ->
      string_append ("cgettop", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), "")))))))))
    | ZCMove ((zcd, zcs1)) ->
      string_append ("cmove", (string_append ((zspc_forwards ()), (string_append ((zcap_reg_name_forwards zcd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), "")))))))))
    | ZCClearTag ((zcd, zcs1)) ->
      string_append ("ccleartag", (string_append ((zspc_forwards ()), (string_append ((zcap_reg_name_forwards zcd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), "")))))))))
    | ZCRRL ((zrd, zrs1)) ->
      string_append ("crrl", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs1), "")))))))))
    | ZCRAM ((zrd, zrs1)) ->
      string_append ("cram", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs1), "")))))))))
    | ZCSeal ((zcd, zcs1, zcs2)) ->
      string_append ("cseal", (string_append ((zspc_forwards ()), (string_append ((zcap_reg_name_forwards zcd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs2), "")))))))))))))
    | ZCUnseal ((zcd, zcs1, zcs2)) ->
      string_append ("cunseal", (string_append ((zspc_forwards ()), (string_append ((zcap_reg_name_forwards zcd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs2), "")))))))))))))
    | ZCAndPerm ((zcd, zcs1, zrs2)) ->
      string_append ("candperm", (string_append ((zspc_forwards ()), (string_append ((zcap_reg_name_forwards zcd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs2), "")))))))))))))
    | ZCSetAddr ((zcd, zcs1, zrs2)) ->
      string_append ("csetaddr", (string_append ((zspc_forwards ()), (string_append ((zcap_reg_name_forwards zcd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs2), "")))))))))))))
    | ZCSetHigh ((zcd, zcs1, zrs2)) ->
      string_append ("csethigh", (string_append ((zspc_forwards ()), (string_append ((zcap_reg_name_forwards zcd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs2), "")))))))))))))
    | ZCIncAddr ((zcd, zcs1, zrs2)) ->
      string_append ("cincaddr", (string_append ((zspc_forwards ()), (string_append ((zcap_reg_name_forwards zcd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs2), "")))))))))))))
    | ZCSetBounds ((zcd, zcs1, zrs2)) ->
      string_append ("csetbounds", (string_append ((zspc_forwards ()), (string_append ((zcap_reg_name_forwards zcd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs2), "")))))))))))))
    | ZCSetBoundsExact ((zcd, zcs1, zrs2)) ->
      string_append ("csetboundsexact", (string_append ((zspc_forwards ()), (string_append ((zcap_reg_name_forwards zcd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs2), "")))))))))))))
    | ZCSetBoundsRoundDown ((zcd, zcs1, zrs2)) ->
      string_append ("csetboundsrounddown", (string_append ((zspc_forwards ()), (string_append ((zcap_reg_name_forwards zcd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), (string_append ((zsep_forwards ()), (string_append ((zreg_name_forwards zrs2), "")))))))))))))
    | ZCSub ((zrd, zcs1, zcs2)) ->
      string_append ("csub", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs2), "")))))))))))))
    | ZCTestSubset ((zrd, zcs1, zcs2)) ->
      string_append ("ctestsubset", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs2), "")))))))))))))
    | ZCSpecialRW ((zcd, zscr, zcs1)) ->
      string_append ("cspecialrw", (string_append ((zspc_forwards ()), (string_append ((zcap_reg_name_forwards zcd), (string_append ((zsep_forwards ()), (string_append ((zscr_name_map_forwards zscr), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), "")))))))))))))
    | ZCIncAddrImmediate ((zcd, zcs1, zimm12)) ->
      string_append ("cincaddrimm", (string_append ((zspc_forwards ()), (string_append ((zcap_reg_name_forwards zcd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_12_forwards zimm12), "")))))))))))))
    | ZCSetBoundsImmediate ((zcd, zcs1, zimm12)) ->
      string_append ("csetboundsimm", (string_append ((zspc_forwards ()), (string_append ((zcap_reg_name_forwards zcd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_12_forwards zimm12), "")))))))))))))
    | ZCSEQX ((zrd, zcs1, zcs2)) ->
      string_append ("cseqx", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zrd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs2), "")))))))))))))
    | ZLoadCapImm ((zcd, zrs1, zoffset)) ->
      string_append ("lc", (string_append ((zspc_forwards ()), (string_append ((zcap_reg_name_forwards zcd), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_12_forwards zoffset), (string_append ((zopt_spc_forwards ()), (string_append ("(", (string_append ((zopt_spc_forwards ()), (string_append ((zreg_name_forwards zrs1), (string_append ((zopt_spc_forwards ()), (string_append (")", "")))))))))))))))))))))
    | ZStoreCapImm ((zcs2, zrs1, zoffset)) ->
      string_append ("sc", (string_append ((zspc_forwards ()), (string_append ((zcap_reg_name_forwards zcs2), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_12_forwards zoffset), (string_append ((zopt_spc_forwards ()), (string_append ("(", (string_append ((zopt_spc_forwards ()), (string_append ((zreg_name_forwards zrs1), (string_append ((zopt_spc_forwards ()), (string_append (")", "")))))))))))))))))))))
    | ZAUIPCC ((zimm, zcd)) ->
      string_append ("auipcc", (string_append ((zspc_forwards ()), (string_append ((zcap_reg_name_forwards zcd), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_20_forwards zimm), "")))))))))
    | ZCJALR ((zimm, zcs1, zcd)) ->
      string_append ("cjalr", (string_append ((zspc_forwards ()), (string_append ((zcap_reg_name_forwards zcd), (string_append ((zsep_forwards ()), (string_append ((zcap_reg_name_forwards zcs1), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_12_forwards zimm), "")))))))))))))
    | ZCJAL ((zimm, zcd)) ->
      string_append ("cjal", (string_append ((zspc_forwards ()), (string_append ((zcap_reg_name_forwards zcd), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_21_forwards zimm), "")))))))))
    | ZC_CLC ((zcdc, zcsc1, zuimm)) ->
      string_append ("c.clc", (string_append ((zspc_forwards ()), (string_append ((zcap_creg_name_forwards zcdc), (string_append ((zsep_forwards ()), (string_append ((zcap_creg_name_forwards zcsc1), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_9_forwards zuimm), "")))))))))))))
    | ZC_CLCSP ((zcd, zuimm)) ->
      string_append ("c.clcsp", (string_append ((zspc_forwards ()), (string_append ((zcap_reg_name_forwards zcd), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_10_forwards zuimm), "")))))))))
    | ZC_CSC ((zcsc2, zcsc1, zuimm)) ->
      string_append ("c.csc", (string_append ((zspc_forwards ()), (string_append ((zcap_creg_name_forwards zcsc2), (string_append ((zsep_forwards ()), (string_append ((zcap_creg_name_forwards zcsc1), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_9_forwards zuimm), "")))))))))))))
    | ZC_CSCSP ((zcs2, zuimm)) ->
      string_append ("c.cscsp", (string_append ((zspc_forwards ()), (string_append ((zcap_reg_name_forwards zcs2), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_10_forwards zuimm), "")))))))))
    | ZC_CIncAddr16CSP (znzzimm) when (zneq_bits (znzzimm, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      string_append ("c.cincaddr16csp", (string_append ((zspc_forwards ()), (string_append ((zhex_bits_10_forwards znzzimm), "")))))
    | ZC_CIncAddr4CSPN ((zcdc, znzzuimm)) when (zneq_bits (znzzuimm, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      string_append ("c.cincaddr4cspn", (string_append ((zspc_forwards ()), (string_append ((zcap_creg_name_forwards zcdc), (string_append ((zsep_forwards ()), (string_append ((zhex_bits_10_forwards znzzuimm), "")))))))))
    | ZC_CJALR (zcs1) when (zneq_bits (zcs1, zzzreg)) ->
      string_append ("c.cjalr", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zcs1), "")))))
    | ZC_CJR (zcs1) when (zneq_bits (zcs1, zzzreg)) ->
      string_append ("c.cjr", (string_append ((zspc_forwards ()), (string_append ((zreg_name_forwards zcs1), "")))))
    | ZC_CJAL (zimm) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) ->
      string_append ("c.cjal", (string_append ((zspc_forwards ()), (string_append ((zhex_bits_12_forwards zimm), "")))))
    | ZILLEGAL (zs) ->
      string_append ("illegal", (string_append ((zspc_forwards ()), (string_append ((zhex_bits_32_forwards zs), "")))))
    | ZC_ILLEGAL (zs) ->
      string_append ("c.illegal", (string_append ((zspc_forwards ()), (string_append ((zhex_bits_16_forwards zs), "")))))
  end)

and zprint_insn (zinsn : (zast)) : string = sail_call (fun r ->
  zassembly_forwards zinsn)

type  zPTW_Error =
  | ZPTW_Invalid_Addr of unit
  | ZPTW_Access of unit
  | ZPTW_Invalid_PTE of unit
  | ZPTW_No_Permission of unit
  | ZPTW_Misaligned of unit
  | ZPTW_PTE_Update of unit
  | ZPTW_Ext_Error of zext_ptw_error;;

let string_of_zPTW_Error _ = "VARIANT";;

let rec zptw_error_to_str (ze : (zPTW_Error)) : string = sail_call (fun r ->
  begin
    match ze with
    | ZPTW_Invalid_Addr (()) -> "invalid-source-addr"
    | ZPTW_Access (()) -> "mem-access-error"
    | ZPTW_Invalid_PTE (()) -> "invalid-pte"
    | ZPTW_No_Permission (()) -> "no-permission"
    | ZPTW_Misaligned (()) -> "misaligned-superpage"
    | ZPTW_PTE_Update (()) -> "pte-update-needed"
    | ZPTW_Ext_Error (ze) -> "extension-error"
  end)

type zRetired = | ZRETIRE_SUCCESS | ZRETIRE_FAIL;;

let string_of_zRetired = function
  | ZRETIRE_SUCCESS -> "RETIRE_SUCCESS"
  | ZRETIRE_FAIL -> "RETIRE_FAIL";;

let rec zundefined_Retired (() : (unit)) : zRetired = sail_call (fun r ->
  internal_pick [ZRETIRE_SUCCESS; ZRETIRE_FAIL])

and zRetired_of_num (zargz3 : (Big_int.num)) : zRetired = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__500 when (eq_int (zl__500, Big_int.zero)) -> ZRETIRE_SUCCESS
    | _ -> ZRETIRE_FAIL
  end)

and znum_of_Retired (zargz3 : (zRetired)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRETIRE_SUCCESS -> Big_int.zero
    | ZRETIRE_FAIL -> (Big_int.of_int (1))
  end)

and zundefined_word_width (() : (unit)) : zword_width = sail_call (fun r ->
  internal_pick [ZBYTE; ZHALF; ZWORD; ZDOUBLE])

and zword_width_of_num (zargz3 : (Big_int.num)) : zword_width = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__497 when (eq_int (zl__497, Big_int.zero)) -> ZBYTE
    | zl__498 when (eq_int (zl__498, (Big_int.of_int (1)))) -> ZHALF
    | zl__499 when (eq_int (zl__499, (Big_int.of_int (2)))) -> ZWORD
    | _ -> ZDOUBLE
  end)

and znum_of_word_width (zargz3 : (zword_width)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZBYTE -> Big_int.zero
    | ZHALF -> (Big_int.of_int (1))
    | ZWORD -> (Big_int.of_int (2))
    | ZDOUBLE -> (Big_int.of_int (3))
  end)

type zInterruptType =
  | ZI_U_Software
  | ZI_S_Software
  | ZI_M_Software
  | ZI_U_Timer
  | ZI_S_Timer
  | ZI_M_Timer
  | ZI_U_External
  | ZI_S_External
  | ZI_M_External;;

let string_of_zInterruptType = function
  | ZI_U_Software -> "I_U_Software"
  | ZI_S_Software -> "I_S_Software"
  | ZI_M_Software -> "I_M_Software"
  | ZI_U_Timer -> "I_U_Timer"
  | ZI_S_Timer -> "I_S_Timer"
  | ZI_M_Timer -> "I_M_Timer"
  | ZI_U_External -> "I_U_External"
  | ZI_S_External -> "I_S_External"
  | ZI_M_External -> "I_M_External";;

let rec zundefined_InterruptType (() : (unit)) : zInterruptType = sail_call (fun r ->
  internal_pick [ZI_U_Software; ZI_S_Software; ZI_M_Software; ZI_U_Timer; ZI_S_Timer; ZI_M_Timer; ZI_U_External; ZI_S_External; ZI_M_External])

and zInterruptType_of_num (zargz3 : (Big_int.num)) : zInterruptType = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__489 when (eq_int (zl__489, Big_int.zero)) -> ZI_U_Software
    | zl__490 when (eq_int (zl__490, (Big_int.of_int (1)))) -> ZI_S_Software
    | zl__491 when (eq_int (zl__491, (Big_int.of_int (2)))) -> ZI_M_Software
    | zl__492 when (eq_int (zl__492, (Big_int.of_int (3)))) -> ZI_U_Timer
    | zl__493 when (eq_int (zl__493, (Big_int.of_int (4)))) -> ZI_S_Timer
    | zl__494 when (eq_int (zl__494, (Big_int.of_int (5)))) -> ZI_M_Timer
    | zl__495 when (eq_int (zl__495, (Big_int.of_int (6)))) -> ZI_U_External
    | zl__496 when (eq_int (zl__496, (Big_int.of_int (7)))) -> ZI_S_External
    | _ -> ZI_M_External
  end)

and znum_of_InterruptType (zargz3 : (zInterruptType)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZI_U_Software -> Big_int.zero
    | ZI_S_Software -> (Big_int.of_int (1))
    | ZI_M_Software -> (Big_int.of_int (2))
    | ZI_U_Timer -> (Big_int.of_int (3))
    | ZI_S_Timer -> (Big_int.of_int (4))
    | ZI_M_Timer -> (Big_int.of_int (5))
    | ZI_U_External -> (Big_int.of_int (6))
    | ZI_S_External -> (Big_int.of_int (7))
    | ZI_M_External -> (Big_int.of_int (8))
  end)

and zinterruptType_to_bits (zi : (zInterruptType)) : (bit) list = sail_call (fun r ->
  begin
    match zi with
    | ZI_U_Software -> [B0; B0; B0; B0; B0; B0; B0; B0]
    | ZI_S_Software -> [B0; B0; B0; B0; B0; B0; B0; B1]
    | ZI_M_Software -> [B0; B0; B0; B0; B0; B0; B1; B1]
    | ZI_U_Timer -> [B0; B0; B0; B0; B0; B1; B0; B0]
    | ZI_S_Timer -> [B0; B0; B0; B0; B0; B1; B0; B1]
    | ZI_M_Timer -> [B0; B0; B0; B0; B0; B1; B1; B1]
    | ZI_U_External -> [B0; B0; B0; B0; B1; B0; B0; B0]
    | ZI_S_External -> [B0; B0; B0; B0; B1; B0; B0; B1]
    | ZI_M_External -> [B0; B0; B0; B0; B1; B0; B1; B1]
  end)

and zexceptionType_to_bits (ze : (zExceptionType)) : (bit) list = sail_call (fun r ->
  begin
    match ze with
    | ZE_Fetch_Addr_Align (()) -> [B0; B0; B0; B0; B0; B0; B0; B0]
    | ZE_Fetch_Access_Fault (()) -> [B0; B0; B0; B0; B0; B0; B0; B1]
    | ZE_Illegal_Instr (()) -> [B0; B0; B0; B0; B0; B0; B1; B0]
    | ZE_Breakpoint (()) -> [B0; B0; B0; B0; B0; B0; B1; B1]
    | ZE_Load_Addr_Align (()) -> [B0; B0; B0; B0; B0; B1; B0; B0]
    | ZE_Load_Access_Fault (()) -> [B0; B0; B0; B0; B0; B1; B0; B1]
    | ZE_SAMO_Addr_Align (()) -> [B0; B0; B0; B0; B0; B1; B1; B0]
    | ZE_SAMO_Access_Fault (()) -> [B0; B0; B0; B0; B0; B1; B1; B1]
    | ZE_U_EnvCall (()) -> [B0; B0; B0; B0; B1; B0; B0; B0]
    | ZE_S_EnvCall (()) -> [B0; B0; B0; B0; B1; B0; B0; B1]
    | ZE_Reserved_10 (()) -> [B0; B0; B0; B0; B1; B0; B1; B0]
    | ZE_M_EnvCall (()) -> [B0; B0; B0; B0; B1; B0; B1; B1]
    | ZE_Fetch_Page_Fault (()) -> [B0; B0; B0; B0; B1; B1; B0; B0]
    | ZE_Load_Page_Fault (()) -> [B0; B0; B0; B0; B1; B1; B0; B1]
    | ZE_Reserved_14 (()) -> [B0; B0; B0; B0; B1; B1; B1; B0]
    | ZE_SAMO_Page_Fault (()) -> [B0; B0; B0; B0; B1; B1; B1; B1]
    | ZE_Extension (ze) -> zext_exc_type_to_bits ze
  end)

and znum_of_ExceptionType (ze : (zExceptionType)) : Big_int.num = sail_call (fun r ->
  begin
    match ze with
    | ZE_Fetch_Addr_Align (()) -> Big_int.zero
    | ZE_Fetch_Access_Fault (()) -> (Big_int.of_int (1))
    | ZE_Illegal_Instr (()) -> (Big_int.of_int (2))
    | ZE_Breakpoint (()) -> (Big_int.of_int (3))
    | ZE_Load_Addr_Align (()) -> (Big_int.of_int (4))
    | ZE_Load_Access_Fault (()) -> (Big_int.of_int (5))
    | ZE_SAMO_Addr_Align (()) -> (Big_int.of_int (6))
    | ZE_SAMO_Access_Fault (()) -> (Big_int.of_int (7))
    | ZE_U_EnvCall (()) -> (Big_int.of_int (8))
    | ZE_S_EnvCall (()) -> (Big_int.of_int (9))
    | ZE_Reserved_10 (()) -> (Big_int.of_int (10))
    | ZE_M_EnvCall (()) -> (Big_int.of_int (11))
    | ZE_Fetch_Page_Fault (()) -> (Big_int.of_int (12))
    | ZE_Load_Page_Fault (()) -> (Big_int.of_int (13))
    | ZE_Reserved_14 (()) -> (Big_int.of_int (14))
    | ZE_SAMO_Page_Fault (()) -> (Big_int.of_int (15))
    | ZE_Extension (ze) -> znum_of_ext_exc_type ze
  end)

type  ztv_mode = zbits;;

let string_of_ztv_mode (gs1713 :  ztv_mode) = string_of_zbits gs1713;;

type zTrapVectorMode = | ZTV_Direct | ZTV_Vector | ZTV_Reserved;;

let string_of_zTrapVectorMode = function
  | ZTV_Direct -> "TV_Direct"
  | ZTV_Vector -> "TV_Vector"
  | ZTV_Reserved -> "TV_Reserved";;

let rec zundefined_TrapVectorMode (() : (unit)) : zTrapVectorMode = sail_call (fun r ->
  internal_pick [ZTV_Direct; ZTV_Vector; ZTV_Reserved])

and zTrapVectorMode_of_num (zargz3 : (Big_int.num)) : zTrapVectorMode = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__487 when (eq_int (zl__487, Big_int.zero)) -> ZTV_Direct
    | zl__488 when (eq_int (zl__488, (Big_int.of_int (1)))) -> ZTV_Vector
    | _ -> ZTV_Reserved
  end)

and znum_of_TrapVectorMode (zargz3 : (zTrapVectorMode)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZTV_Direct -> Big_int.zero
    | ZTV_Vector -> (Big_int.of_int (1))
    | ZTV_Reserved -> (Big_int.of_int (2))
  end)

and ztrapVectorMode_of_bits (zm : ((bit) list)) : zTrapVectorMode = sail_call (fun r ->
  begin
    match zm with
    | zb__0 when (eq_list (zb__0, [B0; B0])) -> ZTV_Direct
    | zb__1 when (eq_list (zb__1, [B0; B1])) -> ZTV_Vector
    | _ -> ZTV_Reserved
  end)

type  zext_status = zbits;;

let string_of_zext_status (gs1730 :  zext_status) = string_of_zbits gs1730;;

type zExtStatus = | ZOff | ZInitial | ZClean | ZDirty;;

let string_of_zExtStatus = function
  | ZOff -> "Off"
  | ZInitial -> "Initial"
  | ZClean -> "Clean"
  | ZDirty -> "Dirty";;

let rec zundefined_ExtStatus (() : (unit)) : zExtStatus = sail_call (fun r ->
  internal_pick [ZOff; ZInitial; ZClean; ZDirty])

and zExtStatus_of_num (zargz3 : (Big_int.num)) : zExtStatus = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__484 when (eq_int (zl__484, Big_int.zero)) -> ZOff
    | zl__485 when (eq_int (zl__485, (Big_int.of_int (1)))) -> ZInitial
    | zl__486 when (eq_int (zl__486, (Big_int.of_int (2)))) -> ZClean
    | _ -> ZDirty
  end)

and znum_of_ExtStatus (zargz3 : (zExtStatus)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZOff -> Big_int.zero
    | ZInitial -> (Big_int.of_int (1))
    | ZClean -> (Big_int.of_int (2))
    | ZDirty -> (Big_int.of_int (3))
  end)

and zextStatus_to_bits (ze : (zExtStatus)) : (bit) list = sail_call (fun r ->
  begin
    match ze with
    | ZOff -> [B0; B0]
    | ZInitial -> [B0; B1]
    | ZClean -> [B1; B0]
    | ZDirty -> [B1; B1]
  end)

and zextStatus_of_bits (ze : ((bit) list)) : zExtStatus = sail_call (fun r ->
  begin
    match ze with
    | zb__0 when (eq_list (zb__0, [B0; B0])) -> ZOff
    | zb__1 when (eq_list (zb__1, [B0; B1])) -> ZInitial
    | zb__2 when (eq_list (zb__2, [B1; B0])) -> ZClean
    | _ -> ZDirty
  end)

type  zsatp_mode = zbits;;

let string_of_zsatp_mode (gs1751 :  zsatp_mode) = string_of_zbits gs1751;;

type zSATPMode = | ZSbare | ZSv32 | ZSv39 | ZSv48;;

let string_of_zSATPMode = function
  | ZSbare -> "Sbare"
  | ZSv32 -> "Sv32"
  | ZSv39 -> "Sv39"
  | ZSv48 -> "Sv48";;

let rec zundefined_SATPMode (() : (unit)) : zSATPMode = sail_call (fun r ->
  internal_pick [ZSbare; ZSv32; ZSv39; ZSv48])

and zSATPMode_of_num (zargz3 : (Big_int.num)) : zSATPMode = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__481 when (eq_int (zl__481, Big_int.zero)) -> ZSbare
    | zl__482 when (eq_int (zl__482, (Big_int.of_int (1)))) -> ZSv32
    | zl__483 when (eq_int (zl__483, (Big_int.of_int (2)))) -> ZSv39
    | _ -> ZSv48
  end)

and znum_of_SATPMode (zargz3 : (zSATPMode)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZSbare -> Big_int.zero
    | ZSv32 -> (Big_int.of_int (1))
    | ZSv39 -> (Big_int.of_int (2))
    | ZSv48 -> (Big_int.of_int (3))
  end)

and zsatp64Mode_of_bits ((za, zm) : (zArchitecture * (bit) list)) : (zSATPMode) zoption = sail_call (fun r ->
  begin
    match ((fun (v0, v1) -> (v1, v0)) (zm, za)) with
    | (_, zb__0) when (eq_list (zb__0, [B0; B0; B0; B0])) -> ZSome ZSbare
    | (ZRV32, zb__1) when (eq_list (zb__1, [B0; B0; B0; B1])) -> ZSome ZSv32
    | (ZRV64, zb__2) when (eq_list (zb__2, [B1; B0; B0; B0])) -> ZSome ZSv39
    | (ZRV64, zb__3) when (eq_list (zb__3, [B1; B0; B0; B1])) -> ZSome ZSv48
    | (_, _) -> ZNone ()
  end)

type  zcsrRW = zbits;;

let string_of_zcsrRW (gs1769 :  zcsrRW) = string_of_zbits gs1769;;

let rec zundefined_uop (() : (unit)) : zuop = sail_call (fun r ->
  internal_pick [ZRISCV_LUI; ZRISCV_AUIPC])

and zuop_of_num (zargz3 : (Big_int.num)) : zuop = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__480 when (eq_int (zl__480, Big_int.zero)) -> ZRISCV_LUI
    | _ -> ZRISCV_AUIPC
  end)

and znum_of_uop (zargz3 : (zuop)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_LUI -> Big_int.zero
    | ZRISCV_AUIPC -> (Big_int.of_int (1))
  end)

and zundefined_bop (() : (unit)) : zbop = sail_call (fun r ->
  internal_pick [ZRISCV_BEQ; ZRISCV_BNE; ZRISCV_BLT; ZRISCV_BGE; ZRISCV_BLTU; ZRISCV_BGEU])

and zbop_of_num (zargz3 : (Big_int.num)) : zbop = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__475 when (eq_int (zl__475, Big_int.zero)) -> ZRISCV_BEQ
    | zl__476 when (eq_int (zl__476, (Big_int.of_int (1)))) -> ZRISCV_BNE
    | zl__477 when (eq_int (zl__477, (Big_int.of_int (2)))) -> ZRISCV_BLT
    | zl__478 when (eq_int (zl__478, (Big_int.of_int (3)))) -> ZRISCV_BGE
    | zl__479 when (eq_int (zl__479, (Big_int.of_int (4)))) -> ZRISCV_BLTU
    | _ -> ZRISCV_BGEU
  end)

and znum_of_bop (zargz3 : (zbop)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_BEQ -> Big_int.zero
    | ZRISCV_BNE -> (Big_int.of_int (1))
    | ZRISCV_BLT -> (Big_int.of_int (2))
    | ZRISCV_BGE -> (Big_int.of_int (3))
    | ZRISCV_BLTU -> (Big_int.of_int (4))
    | ZRISCV_BGEU -> (Big_int.of_int (5))
  end)

and zundefined_iop (() : (unit)) : ziop = sail_call (fun r ->
  internal_pick [ZRISCV_ADDI; ZRISCV_SLTI; ZRISCV_SLTIU; ZRISCV_XORI; ZRISCV_ORI; ZRISCV_ANDI])

and ziop_of_num (zargz3 : (Big_int.num)) : ziop = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__470 when (eq_int (zl__470, Big_int.zero)) -> ZRISCV_ADDI
    | zl__471 when (eq_int (zl__471, (Big_int.of_int (1)))) -> ZRISCV_SLTI
    | zl__472 when (eq_int (zl__472, (Big_int.of_int (2)))) -> ZRISCV_SLTIU
    | zl__473 when (eq_int (zl__473, (Big_int.of_int (3)))) -> ZRISCV_XORI
    | zl__474 when (eq_int (zl__474, (Big_int.of_int (4)))) -> ZRISCV_ORI
    | _ -> ZRISCV_ANDI
  end)

and znum_of_iop (zargz3 : (ziop)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_ADDI -> Big_int.zero
    | ZRISCV_SLTI -> (Big_int.of_int (1))
    | ZRISCV_SLTIU -> (Big_int.of_int (2))
    | ZRISCV_XORI -> (Big_int.of_int (3))
    | ZRISCV_ORI -> (Big_int.of_int (4))
    | ZRISCV_ANDI -> (Big_int.of_int (5))
  end)

and zundefined_sop (() : (unit)) : zsop = sail_call (fun r ->
  internal_pick [ZRISCV_SLLI; ZRISCV_SRLI; ZRISCV_SRAI])

and zsop_of_num (zargz3 : (Big_int.num)) : zsop = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__468 when (eq_int (zl__468, Big_int.zero)) -> ZRISCV_SLLI
    | zl__469 when (eq_int (zl__469, (Big_int.of_int (1)))) -> ZRISCV_SRLI
    | _ -> ZRISCV_SRAI
  end)

and znum_of_sop (zargz3 : (zsop)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_SLLI -> Big_int.zero
    | ZRISCV_SRLI -> (Big_int.of_int (1))
    | ZRISCV_SRAI -> (Big_int.of_int (2))
  end)

and zundefined_rop (() : (unit)) : zrop = sail_call (fun r ->
  internal_pick [ZRISCV_ADD; ZRISCV_SUB; ZRISCV_SLL; ZRISCV_SLT; ZRISCV_SLTU; ZRISCV_XOR; ZRISCV_SRL; ZRISCV_SRA; ZRISCV_OR; ZRISCV_AND])

and zrop_of_num (zargz3 : (Big_int.num)) : zrop = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__459 when (eq_int (zl__459, Big_int.zero)) -> ZRISCV_ADD
    | zl__460 when (eq_int (zl__460, (Big_int.of_int (1)))) -> ZRISCV_SUB
    | zl__461 when (eq_int (zl__461, (Big_int.of_int (2)))) -> ZRISCV_SLL
    | zl__462 when (eq_int (zl__462, (Big_int.of_int (3)))) -> ZRISCV_SLT
    | zl__463 when (eq_int (zl__463, (Big_int.of_int (4)))) -> ZRISCV_SLTU
    | zl__464 when (eq_int (zl__464, (Big_int.of_int (5)))) -> ZRISCV_XOR
    | zl__465 when (eq_int (zl__465, (Big_int.of_int (6)))) -> ZRISCV_SRL
    | zl__466 when (eq_int (zl__466, (Big_int.of_int (7)))) -> ZRISCV_SRA
    | zl__467 when (eq_int (zl__467, (Big_int.of_int (8)))) -> ZRISCV_OR
    | _ -> ZRISCV_AND
  end)

and znum_of_rop (zargz3 : (zrop)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_ADD -> Big_int.zero
    | ZRISCV_SUB -> (Big_int.of_int (1))
    | ZRISCV_SLL -> (Big_int.of_int (2))
    | ZRISCV_SLT -> (Big_int.of_int (3))
    | ZRISCV_SLTU -> (Big_int.of_int (4))
    | ZRISCV_XOR -> (Big_int.of_int (5))
    | ZRISCV_SRL -> (Big_int.of_int (6))
    | ZRISCV_SRA -> (Big_int.of_int (7))
    | ZRISCV_OR -> (Big_int.of_int (8))
    | ZRISCV_AND -> (Big_int.of_int (9))
  end)

and zundefined_ropw (() : (unit)) : zropw = sail_call (fun r ->
  internal_pick [ZRISCV_ADDW; ZRISCV_SUBW; ZRISCV_SLLW; ZRISCV_SRLW; ZRISCV_SRAW])

and zropw_of_num (zargz3 : (Big_int.num)) : zropw = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__455 when (eq_int (zl__455, Big_int.zero)) -> ZRISCV_ADDW
    | zl__456 when (eq_int (zl__456, (Big_int.of_int (1)))) -> ZRISCV_SUBW
    | zl__457 when (eq_int (zl__457, (Big_int.of_int (2)))) -> ZRISCV_SLLW
    | zl__458 when (eq_int (zl__458, (Big_int.of_int (3)))) -> ZRISCV_SRLW
    | _ -> ZRISCV_SRAW
  end)

and znum_of_ropw (zargz3 : (zropw)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_ADDW -> Big_int.zero
    | ZRISCV_SUBW -> (Big_int.of_int (1))
    | ZRISCV_SLLW -> (Big_int.of_int (2))
    | ZRISCV_SRLW -> (Big_int.of_int (3))
    | ZRISCV_SRAW -> (Big_int.of_int (4))
  end)

and zundefined_sopw (() : (unit)) : zsopw = sail_call (fun r ->
  internal_pick [ZRISCV_SLLIW; ZRISCV_SRLIW; ZRISCV_SRAIW])

and zsopw_of_num (zargz3 : (Big_int.num)) : zsopw = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__453 when (eq_int (zl__453, Big_int.zero)) -> ZRISCV_SLLIW
    | zl__454 when (eq_int (zl__454, (Big_int.of_int (1)))) -> ZRISCV_SRLIW
    | _ -> ZRISCV_SRAIW
  end)

and znum_of_sopw (zargz3 : (zsopw)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_SLLIW -> Big_int.zero
    | ZRISCV_SRLIW -> (Big_int.of_int (1))
    | ZRISCV_SRAIW -> (Big_int.of_int (2))
  end)

type zamoop =
  | ZAMOSWAP
  | ZAMOADD
  | ZAMOXOR
  | ZAMOAND
  | ZAMOOR
  | ZAMOMIN
  | ZAMOMAX
  | ZAMOMINU
  | ZAMOMAXU;;

let string_of_zamoop = function
  | ZAMOSWAP -> "AMOSWAP"
  | ZAMOADD -> "AMOADD"
  | ZAMOXOR -> "AMOXOR"
  | ZAMOAND -> "AMOAND"
  | ZAMOOR -> "AMOOR"
  | ZAMOMIN -> "AMOMIN"
  | ZAMOMAX -> "AMOMAX"
  | ZAMOMINU -> "AMOMINU"
  | ZAMOMAXU -> "AMOMAXU";;

let rec zundefined_amoop (() : (unit)) : zamoop = sail_call (fun r ->
  internal_pick [ZAMOSWAP; ZAMOADD; ZAMOXOR; ZAMOAND; ZAMOOR; ZAMOMIN; ZAMOMAX; ZAMOMINU; ZAMOMAXU])

and zamoop_of_num (zargz3 : (Big_int.num)) : zamoop = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__445 when (eq_int (zl__445, Big_int.zero)) -> ZAMOSWAP
    | zl__446 when (eq_int (zl__446, (Big_int.of_int (1)))) -> ZAMOADD
    | zl__447 when (eq_int (zl__447, (Big_int.of_int (2)))) -> ZAMOXOR
    | zl__448 when (eq_int (zl__448, (Big_int.of_int (3)))) -> ZAMOAND
    | zl__449 when (eq_int (zl__449, (Big_int.of_int (4)))) -> ZAMOOR
    | zl__450 when (eq_int (zl__450, (Big_int.of_int (5)))) -> ZAMOMIN
    | zl__451 when (eq_int (zl__451, (Big_int.of_int (6)))) -> ZAMOMAX
    | zl__452 when (eq_int (zl__452, (Big_int.of_int (7)))) -> ZAMOMINU
    | _ -> ZAMOMAXU
  end)

and znum_of_amoop (zargz3 : (zamoop)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZAMOSWAP -> Big_int.zero
    | ZAMOADD -> (Big_int.of_int (1))
    | ZAMOXOR -> (Big_int.of_int (2))
    | ZAMOAND -> (Big_int.of_int (3))
    | ZAMOOR -> (Big_int.of_int (4))
    | ZAMOMIN -> (Big_int.of_int (5))
    | ZAMOMAX -> (Big_int.of_int (6))
    | ZAMOMINU -> (Big_int.of_int (7))
    | ZAMOMAXU -> (Big_int.of_int (8))
  end)

and zundefined_csrop (() : (unit)) : zcsrop = sail_call (fun r ->
  internal_pick [ZCSRRW; ZCSRRS; ZCSRRC])

and zcsrop_of_num (zargz3 : (Big_int.num)) : zcsrop = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__443 when (eq_int (zl__443, Big_int.zero)) -> ZCSRRW
    | zl__444 when (eq_int (zl__444, (Big_int.of_int (1)))) -> ZCSRRS
    | _ -> ZCSRRC
  end)

and znum_of_csrop (zargz3 : (zcsrop)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZCSRRW -> Big_int.zero
    | ZCSRRS -> (Big_int.of_int (1))
    | ZCSRRC -> (Big_int.of_int (2))
  end)

type zbrop_zzba = | ZRISCV_SH1ADD | ZRISCV_SH2ADD | ZRISCV_SH3ADD;;

let string_of_zbrop_zzba = function
  | ZRISCV_SH1ADD -> "RISCV_SH1ADD"
  | ZRISCV_SH2ADD -> "RISCV_SH2ADD"
  | ZRISCV_SH3ADD -> "RISCV_SH3ADD";;

let rec zundefined_brop_zzba (() : (unit)) : zbrop_zzba = sail_call (fun r ->
  internal_pick [ZRISCV_SH1ADD; ZRISCV_SH2ADD; ZRISCV_SH3ADD])

and zbrop_zzba_of_num (zargz3 : (Big_int.num)) : zbrop_zzba = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__441 when (eq_int (zl__441, Big_int.zero)) -> ZRISCV_SH1ADD
    | zl__442 when (eq_int (zl__442, (Big_int.of_int (1)))) -> ZRISCV_SH2ADD
    | _ -> ZRISCV_SH3ADD
  end)

and znum_of_brop_zzba (zargz3 : (zbrop_zzba)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_SH1ADD -> Big_int.zero
    | ZRISCV_SH2ADD -> (Big_int.of_int (1))
    | ZRISCV_SH3ADD -> (Big_int.of_int (2))
  end)

type zbrop_zzbb =
  | ZRISCV_ANDN
  | ZRISCV_ORN
  | ZRISCV_XNOR
  | ZRISCV_MAX
  | ZRISCV_MAXU
  | ZRISCV_MIN
  | ZRISCV_MINU
  | ZRISCV_ROL
  | ZRISCV_ROR;;

let string_of_zbrop_zzbb = function
  | ZRISCV_ANDN -> "RISCV_ANDN"
  | ZRISCV_ORN -> "RISCV_ORN"
  | ZRISCV_XNOR -> "RISCV_XNOR"
  | ZRISCV_MAX -> "RISCV_MAX"
  | ZRISCV_MAXU -> "RISCV_MAXU"
  | ZRISCV_MIN -> "RISCV_MIN"
  | ZRISCV_MINU -> "RISCV_MINU"
  | ZRISCV_ROL -> "RISCV_ROL"
  | ZRISCV_ROR -> "RISCV_ROR";;

let rec zundefined_brop_zzbb (() : (unit)) : zbrop_zzbb = sail_call (fun r ->
  internal_pick [ZRISCV_ANDN; ZRISCV_ORN; ZRISCV_XNOR; ZRISCV_MAX; ZRISCV_MAXU; ZRISCV_MIN; ZRISCV_MINU; ZRISCV_ROL; ZRISCV_ROR])

and zbrop_zzbb_of_num (zargz3 : (Big_int.num)) : zbrop_zzbb = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__433 when (eq_int (zl__433, Big_int.zero)) -> ZRISCV_ANDN
    | zl__434 when (eq_int (zl__434, (Big_int.of_int (1)))) -> ZRISCV_ORN
    | zl__435 when (eq_int (zl__435, (Big_int.of_int (2)))) -> ZRISCV_XNOR
    | zl__436 when (eq_int (zl__436, (Big_int.of_int (3)))) -> ZRISCV_MAX
    | zl__437 when (eq_int (zl__437, (Big_int.of_int (4)))) -> ZRISCV_MAXU
    | zl__438 when (eq_int (zl__438, (Big_int.of_int (5)))) -> ZRISCV_MIN
    | zl__439 when (eq_int (zl__439, (Big_int.of_int (6)))) -> ZRISCV_MINU
    | zl__440 when (eq_int (zl__440, (Big_int.of_int (7)))) -> ZRISCV_ROL
    | _ -> ZRISCV_ROR
  end)

and znum_of_brop_zzbb (zargz3 : (zbrop_zzbb)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_ANDN -> Big_int.zero
    | ZRISCV_ORN -> (Big_int.of_int (1))
    | ZRISCV_XNOR -> (Big_int.of_int (2))
    | ZRISCV_MAX -> (Big_int.of_int (3))
    | ZRISCV_MAXU -> (Big_int.of_int (4))
    | ZRISCV_MIN -> (Big_int.of_int (5))
    | ZRISCV_MINU -> (Big_int.of_int (6))
    | ZRISCV_ROL -> (Big_int.of_int (7))
    | ZRISCV_ROR -> (Big_int.of_int (8))
  end)

type zbrop_zzbkb = | ZRISCV_PACK | ZRISCV_PACKH;;

let string_of_zbrop_zzbkb = function
  | ZRISCV_PACK -> "RISCV_PACK"
  | ZRISCV_PACKH -> "RISCV_PACKH";;

let rec zundefined_brop_zzbkb (() : (unit)) : zbrop_zzbkb = sail_call (fun r ->
  internal_pick [ZRISCV_PACK; ZRISCV_PACKH])

and zbrop_zzbkb_of_num (zargz3 : (Big_int.num)) : zbrop_zzbkb = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__432 when (eq_int (zl__432, Big_int.zero)) -> ZRISCV_PACK
    | _ -> ZRISCV_PACKH
  end)

and znum_of_brop_zzbkb (zargz3 : (zbrop_zzbkb)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_PACK -> Big_int.zero
    | ZRISCV_PACKH -> (Big_int.of_int (1))
  end)

type zbrop_zzbs = | ZRISCV_BCLR | ZRISCV_BEXT | ZRISCV_BINV | ZRISCV_BSET;;

let string_of_zbrop_zzbs = function
  | ZRISCV_BCLR -> "RISCV_BCLR"
  | ZRISCV_BEXT -> "RISCV_BEXT"
  | ZRISCV_BINV -> "RISCV_BINV"
  | ZRISCV_BSET -> "RISCV_BSET";;

let rec zundefined_brop_zzbs (() : (unit)) : zbrop_zzbs = sail_call (fun r ->
  internal_pick [ZRISCV_BCLR; ZRISCV_BEXT; ZRISCV_BINV; ZRISCV_BSET])

and zbrop_zzbs_of_num (zargz3 : (Big_int.num)) : zbrop_zzbs = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__429 when (eq_int (zl__429, Big_int.zero)) -> ZRISCV_BCLR
    | zl__430 when (eq_int (zl__430, (Big_int.of_int (1)))) -> ZRISCV_BEXT
    | zl__431 when (eq_int (zl__431, (Big_int.of_int (2)))) -> ZRISCV_BINV
    | _ -> ZRISCV_BSET
  end)

and znum_of_brop_zzbs (zargz3 : (zbrop_zzbs)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_BCLR -> Big_int.zero
    | ZRISCV_BEXT -> (Big_int.of_int (1))
    | ZRISCV_BINV -> (Big_int.of_int (2))
    | ZRISCV_BSET -> (Big_int.of_int (3))
  end)

type zbropw_zzba =
  | ZRISCV_ADDUW
  | ZRISCV_SH1ADDUW
  | ZRISCV_SH2ADDUW
  | ZRISCV_SH3ADDUW;;

let string_of_zbropw_zzba = function
  | ZRISCV_ADDUW -> "RISCV_ADDUW"
  | ZRISCV_SH1ADDUW -> "RISCV_SH1ADDUW"
  | ZRISCV_SH2ADDUW -> "RISCV_SH2ADDUW"
  | ZRISCV_SH3ADDUW -> "RISCV_SH3ADDUW";;

let rec zundefined_bropw_zzba (() : (unit)) : zbropw_zzba = sail_call (fun r ->
  internal_pick [ZRISCV_ADDUW; ZRISCV_SH1ADDUW; ZRISCV_SH2ADDUW; ZRISCV_SH3ADDUW])

and zbropw_zzba_of_num (zargz3 : (Big_int.num)) : zbropw_zzba = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__426 when (eq_int (zl__426, Big_int.zero)) -> ZRISCV_ADDUW
    | zl__427 when (eq_int (zl__427, (Big_int.of_int (1)))) -> ZRISCV_SH1ADDUW
    | zl__428 when (eq_int (zl__428, (Big_int.of_int (2)))) -> ZRISCV_SH2ADDUW
    | _ -> ZRISCV_SH3ADDUW
  end)

and znum_of_bropw_zzba (zargz3 : (zbropw_zzba)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_ADDUW -> Big_int.zero
    | ZRISCV_SH1ADDUW -> (Big_int.of_int (1))
    | ZRISCV_SH2ADDUW -> (Big_int.of_int (2))
    | ZRISCV_SH3ADDUW -> (Big_int.of_int (3))
  end)

type zbropw_zzbb = | ZRISCV_ROLW | ZRISCV_RORW;;

let string_of_zbropw_zzbb = function
  | ZRISCV_ROLW -> "RISCV_ROLW"
  | ZRISCV_RORW -> "RISCV_RORW";;

let rec zundefined_bropw_zzbb (() : (unit)) : zbropw_zzbb = sail_call (fun r ->
  internal_pick [ZRISCV_ROLW; ZRISCV_RORW])

and zbropw_zzbb_of_num (zargz3 : (Big_int.num)) : zbropw_zzbb = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__425 when (eq_int (zl__425, Big_int.zero)) -> ZRISCV_ROLW
    | _ -> ZRISCV_RORW
  end)

and znum_of_bropw_zzbb (zargz3 : (zbropw_zzbb)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_ROLW -> Big_int.zero
    | ZRISCV_RORW -> (Big_int.of_int (1))
  end)

type zbiop_zzbs = | ZRISCV_BCLRI | ZRISCV_BEXTI | ZRISCV_BINVI | ZRISCV_BSETI;;

let string_of_zbiop_zzbs = function
  | ZRISCV_BCLRI -> "RISCV_BCLRI"
  | ZRISCV_BEXTI -> "RISCV_BEXTI"
  | ZRISCV_BINVI -> "RISCV_BINVI"
  | ZRISCV_BSETI -> "RISCV_BSETI";;

let rec zundefined_biop_zzbs (() : (unit)) : zbiop_zzbs = sail_call (fun r ->
  internal_pick [ZRISCV_BCLRI; ZRISCV_BEXTI; ZRISCV_BINVI; ZRISCV_BSETI])

and zbiop_zzbs_of_num (zargz3 : (Big_int.num)) : zbiop_zzbs = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__422 when (eq_int (zl__422, Big_int.zero)) -> ZRISCV_BCLRI
    | zl__423 when (eq_int (zl__423, (Big_int.of_int (1)))) -> ZRISCV_BEXTI
    | zl__424 when (eq_int (zl__424, (Big_int.of_int (2)))) -> ZRISCV_BINVI
    | _ -> ZRISCV_BSETI
  end)

and znum_of_biop_zzbs (zargz3 : (zbiop_zzbs)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_BCLRI -> Big_int.zero
    | ZRISCV_BEXTI -> (Big_int.of_int (1))
    | ZRISCV_BINVI -> (Big_int.of_int (2))
    | ZRISCV_BSETI -> (Big_int.of_int (3))
  end)

type zextop_zzbb = | ZRISCV_SEXTB | ZRISCV_SEXTH | ZRISCV_ZEXTH;;

let string_of_zextop_zzbb = function
  | ZRISCV_SEXTB -> "RISCV_SEXTB"
  | ZRISCV_SEXTH -> "RISCV_SEXTH"
  | ZRISCV_ZEXTH -> "RISCV_ZEXTH";;

let rec zundefined_extop_zzbb (() : (unit)) : zextop_zzbb = sail_call (fun r ->
  internal_pick [ZRISCV_SEXTB; ZRISCV_SEXTH; ZRISCV_ZEXTH])

and zextop_zzbb_of_num (zargz3 : (Big_int.num)) : zextop_zzbb = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__420 when (eq_int (zl__420, Big_int.zero)) -> ZRISCV_SEXTB
    | zl__421 when (eq_int (zl__421, (Big_int.of_int (1)))) -> ZRISCV_SEXTH
    | _ -> ZRISCV_ZEXTH
  end)

and znum_of_extop_zzbb (zargz3 : (zextop_zzbb)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_SEXTB -> Big_int.zero
    | ZRISCV_SEXTH -> (Big_int.of_int (1))
    | ZRISCV_ZEXTH -> (Big_int.of_int (2))
  end)

type zzzicondop = | ZRISCV_CZERO_EQZ | ZRISCV_CZERO_NEZ;;

let string_of_zzzicondop = function
  | ZRISCV_CZERO_EQZ -> "RISCV_CZERO_EQZ"
  | ZRISCV_CZERO_NEZ -> "RISCV_CZERO_NEZ";;

let rec zundefined_zzicondop (() : (unit)) : zzzicondop = sail_call (fun r ->
  internal_pick [ZRISCV_CZERO_EQZ; ZRISCV_CZERO_NEZ])

and zzzicondop_of_num (zargz3 : (Big_int.num)) : zzzicondop = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__419 when (eq_int (zl__419, Big_int.zero)) -> ZRISCV_CZERO_EQZ
    | _ -> ZRISCV_CZERO_NEZ
  end)

and znum_of_zzicondop (zargz3 : (zzzicondop)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_CZERO_EQZ -> Big_int.zero
    | ZRISCV_CZERO_NEZ -> (Big_int.of_int (1))
  end)

and zbool_bits_forwards (zargz3 : (bool)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zp0z3 when (eq_bool (zp0z3, true)) -> [B1]
    | zp0z3 when (eq_bool (zp0z3, false)) -> [B0]
  end)

and zbool_bits_backwards (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B1])) -> true
    | _ -> false
  end)

and zbool_bits_forwards_matches (zargz3 : (bool)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zp0z3 when (eq_bool (zp0z3, true)) -> true
    | zp0z3 when (eq_bool (zp0z3, false)) -> true
    | _ -> false
  end)

and zbool_bits_backwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B1])) -> true
    | zb__1 when (eq_list (zb__1, [B0])) -> true
    | _ -> false
  end)

and zbool_not_bits_forwards (zargz3 : (bool)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | zp0z3 when (eq_bool (zp0z3, true)) -> [B0]
    | zp0z3 when (eq_bool (zp0z3, false)) -> [B1]
  end)

and zbool_not_bits_backwards (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0])) -> true
    | _ -> false
  end)

and zbool_not_bits_forwards_matches (zargz3 : (bool)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zp0z3 when (eq_bool (zp0z3, true)) -> true
    | zp0z3 when (eq_bool (zp0z3, false)) -> true
    | _ -> false
  end)

and zbool_not_bits_backwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0])) -> true
    | zb__1 when (eq_list (zb__1, [B1])) -> true
    | _ -> false
  end)

and zsizze_bits_forwards (zargz3 : (zword_width)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | ZBYTE -> [B0; B0]
    | ZHALF -> [B0; B1]
    | ZWORD -> [B1; B0]
    | ZDOUBLE -> [B1; B1]
  end)

and zsizze_bits_backwards (zargz3 : ((bit) list)) : zword_width = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0])) -> ZBYTE
    | zb__1 when (eq_list (zb__1, [B0; B1])) -> ZHALF
    | zb__2 when (eq_list (zb__2, [B1; B0])) -> ZWORD
    | _ -> ZDOUBLE
  end)

and zsizze_bits_forwards_matches (zargz3 : (zword_width)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | ZBYTE -> true
    | ZHALF -> true
    | ZWORD -> true
    | ZDOUBLE -> true
    | _ -> false
  end)

and zsizze_bits_backwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0])) -> true
    | zb__1 when (eq_list (zb__1, [B0; B1])) -> true
    | zb__2 when (eq_list (zb__2, [B1; B0])) -> true
    | zb__3 when (eq_list (zb__3, [B1; B1])) -> true
    | _ -> false
  end)

and zsizze_mnemonic_backwards (zargz3 : (string)) : zword_width = sail_call (fun r ->
  begin
    match zargz3 with
    | "b" -> ZBYTE
    | "h" -> ZHALF
    | "w" -> ZWORD
    | "d" -> ZDOUBLE
  end)

and zsizze_mnemonic_forwards_matches (zargz3 : (zword_width)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | ZBYTE -> true
    | ZHALF -> true
    | ZWORD -> true
    | ZDOUBLE -> true
    | _ -> false
  end)

and zsizze_mnemonic_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | "b" -> true
    | "h" -> true
    | "w" -> true
    | "d" -> true
    | _ -> false
  end)

and zword_width_bytes (zwidth : (zword_width)) : Big_int.num = sail_call (fun r ->
  begin
    match zwidth with
    | ZBYTE -> (Big_int.of_int (1))
    | ZHALF -> (Big_int.of_int (2))
    | ZWORD -> (Big_int.of_int (4))
    | ZDOUBLE -> (Big_int.of_int (8))
  end)

and zreport_invalid_width : 'za. (string * Big_int.num * zword_width * string) -> 'za = fun (zf, zl, zw, zk) -> sail_call (fun r ->
  begin assert false; exit 0 end)

let zhaveSplitRegFile = false;;

type  zregtype = ZCapability.zCapability;;

let string_of_zregtype (gs2057 :  zregtype) = string_of_zCapability gs2057;;

let zzzero_reg = znull_cap;;

let rec zRegStr (zr : (ZCapability.zCapability)) : string = sail_call (fun r ->
  zcapToString zr)

and zregval_from_reg (zr : (ZCapability.zCapability)) : (bit) list = sail_call (fun r ->
  zr.zaddress)

and zregval_into_reg (zv : ((bit) list)) : ZCapability.zCapability = sail_call (fun r ->
  {znull_cap with ZCapability.zaddress = zv})

and zscr_name_map_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | "pcc" -> [B0; B0; B0; B0; B0]
    | "ddc" -> [B0; B0; B0; B0; B1]
    | "utcc" -> [B0; B0; B1; B0; B0]
    | "utdc" -> [B0; B0; B1; B0; B1]
    | "uscratchc" -> [B0; B0; B1; B1; B0]
    | "uepcc" -> [B0; B0; B1; B1; B1]
    | "stcc" -> [B1; B0; B1; B0; B0]
    | "stdc" -> [B1; B0; B1; B0; B1]
    | "sscratchc" -> [B1; B0; B1; B1; B0]
    | "sepcc" -> [B1; B0; B1; B1; B1]
    | "mtcc" -> [B1; B1; B1; B0; B0]
    | "mtdc" -> [B1; B1; B1; B0; B1]
    | "mscratchc" -> [B1; B1; B1; B1; B0]
    | "mepcc" -> [B1; B1; B1; B1; B1]
    | "0x2" -> [B0; B0; B0; B1; B0]
    | "0x3" -> [B0; B0; B0; B1; B1]
    | "0x8" -> [B0; B1; B0; B0; B0]
    | "0x9" -> [B0; B1; B0; B0; B1]
    | "0xA" -> [B0; B1; B0; B1; B0]
    | "0xB" -> [B0; B1; B0; B1; B1]
    | "0xC" -> [B0; B1; B1; B0; B0]
    | "0xD" -> [B0; B1; B1; B0; B1]
    | "0xE" -> [B0; B1; B1; B1; B0]
    | "0xF" -> [B0; B1; B1; B1; B1]
    | "0x10" -> [B1; B0; B0; B0; B0]
    | "0x11" -> [B1; B0; B0; B0; B1]
    | "0x12" -> [B1; B0; B0; B1; B0]
    | "0x13" -> [B1; B0; B0; B1; B1]
    | "0x18" -> [B1; B1; B0; B0; B0]
    | "0x19" -> [B1; B1; B0; B0; B1]
    | "0x1A" -> [B1; B1; B0; B1; B0]
    | "0x1B" -> [B1; B1; B0; B1; B1]
  end)

and zscr_name_map_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0; B0; B0; B0])) -> true
    | zb__1 when (eq_list (zb__1, [B0; B0; B0; B0; B1])) -> true
    | zb__2 when (eq_list (zb__2, [B0; B0; B1; B0; B0])) -> true
    | zb__3 when (eq_list (zb__3, [B0; B0; B1; B0; B1])) -> true
    | zb__4 when (eq_list (zb__4, [B0; B0; B1; B1; B0])) -> true
    | zb__5 when (eq_list (zb__5, [B0; B0; B1; B1; B1])) -> true
    | zb__6 when (eq_list (zb__6, [B1; B0; B1; B0; B0])) -> true
    | zb__7 when (eq_list (zb__7, [B1; B0; B1; B0; B1])) -> true
    | zb__8 when (eq_list (zb__8, [B1; B0; B1; B1; B0])) -> true
    | zb__9 when (eq_list (zb__9, [B1; B0; B1; B1; B1])) -> true
    | zb__10 when (eq_list (zb__10, [B1; B1; B1; B0; B0])) -> true
    | zb__11 when (eq_list (zb__11, [B1; B1; B1; B0; B1])) -> true
    | zb__12 when (eq_list (zb__12, [B1; B1; B1; B1; B0])) -> true
    | zb__13 when (eq_list (zb__13, [B1; B1; B1; B1; B1])) -> true
    | zb__14 when (eq_list (zb__14, [B0; B0; B0; B1; B0])) -> true
    | zb__15 when (eq_list (zb__15, [B0; B0; B0; B1; B1])) -> true
    | zb__16 when (eq_list (zb__16, [B0; B1; B0; B0; B0])) -> true
    | zb__17 when (eq_list (zb__17, [B0; B1; B0; B0; B1])) -> true
    | zb__18 when (eq_list (zb__18, [B0; B1; B0; B1; B0])) -> true
    | zb__19 when (eq_list (zb__19, [B0; B1; B0; B1; B1])) -> true
    | zb__20 when (eq_list (zb__20, [B0; B1; B1; B0; B0])) -> true
    | zb__21 when (eq_list (zb__21, [B0; B1; B1; B0; B1])) -> true
    | zb__22 when (eq_list (zb__22, [B0; B1; B1; B1; B0])) -> true
    | zb__23 when (eq_list (zb__23, [B0; B1; B1; B1; B1])) -> true
    | zb__24 when (eq_list (zb__24, [B1; B0; B0; B0; B0])) -> true
    | zb__25 when (eq_list (zb__25, [B1; B0; B0; B0; B1])) -> true
    | zb__26 when (eq_list (zb__26, [B1; B0; B0; B1; B0])) -> true
    | zb__27 when (eq_list (zb__27, [B1; B0; B0; B1; B1])) -> true
    | zb__28 when (eq_list (zb__28, [B1; B1; B0; B0; B0])) -> true
    | zb__29 when (eq_list (zb__29, [B1; B1; B0; B0; B1])) -> true
    | zb__30 when (eq_list (zb__30, [B1; B1; B0; B1; B0])) -> true
    | zb__31 when (eq_list (zb__31, [B1; B1; B0; B1; B1])) -> true
    | _ -> false
  end)

and zscr_name_map_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | "pcc" -> true
    | "ddc" -> true
    | "utcc" -> true
    | "utdc" -> true
    | "uscratchc" -> true
    | "uepcc" -> true
    | "stcc" -> true
    | "stdc" -> true
    | "sscratchc" -> true
    | "sepcc" -> true
    | "mtcc" -> true
    | "mtdc" -> true
    | "mscratchc" -> true
    | "mepcc" -> true
    | "0x2" -> true
    | "0x3" -> true
    | "0x8" -> true
    | "0x9" -> true
    | "0xA" -> true
    | "0xB" -> true
    | "0xC" -> true
    | "0xD" -> true
    | "0xE" -> true
    | "0xF" -> true
    | "0x10" -> true
    | "0x11" -> true
    | "0x12" -> true
    | "0x13" -> true
    | "0x18" -> true
    | "0x19" -> true
    | "0x1A" -> true
    | "0x1B" -> true
    | _ -> false
  end)

and zundefined_ext_access_type (() : (unit)) : zext_access_type = sail_call (fun r ->
  internal_pick [ZData; ZCap])

and zext_access_type_of_num (zargz3 : (Big_int.num)) : zext_access_type = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__418 when (eq_int (zl__418, Big_int.zero)) -> ZData
    | _ -> ZCap
  end)

and znum_of_ext_access_type (zargz3 : (zext_access_type)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZData -> Big_int.zero
    | ZCap -> (Big_int.of_int (1))
  end)

let zdefault_write_acc = ZData;;

let zPC : (zxlenbits) ref = ref (undefined_bitvector (Big_int.of_int (32)));;

let znextPC : (zxlenbits) ref = ref (undefined_bitvector (Big_int.of_int (32)));;

let zinstbits : (zxlenbits) ref = ref (undefined_bitvector (Big_int.of_int (32)));;

let zx1 : (zregtype) ref = ref (zundefined_Capability ());;

let zx2 : (zregtype) ref = ref (zundefined_Capability ());;

let zx3 : (zregtype) ref = ref (zundefined_Capability ());;

let zx4 : (zregtype) ref = ref (zundefined_Capability ());;

let zx5 : (zregtype) ref = ref (zundefined_Capability ());;

let zx6 : (zregtype) ref = ref (zundefined_Capability ());;

let zx7 : (zregtype) ref = ref (zundefined_Capability ());;

let zx8 : (zregtype) ref = ref (zundefined_Capability ());;

let zx9 : (zregtype) ref = ref (zundefined_Capability ());;

let zx10 : (zregtype) ref = ref (zundefined_Capability ());;

let zx11 : (zregtype) ref = ref (zundefined_Capability ());;

let zx12 : (zregtype) ref = ref (zundefined_Capability ());;

let zx13 : (zregtype) ref = ref (zundefined_Capability ());;

let zx14 : (zregtype) ref = ref (zundefined_Capability ());;

let zx15 : (zregtype) ref = ref (zundefined_Capability ());;

let rec zrX (zr : (Big_int.num)) : (bit) list = sail_call (fun r ->
  let zv = (begin
    match zr with
    | zl__402 when (eq_int (zl__402, Big_int.zero)) -> zzzero_reg
    | zl__403 when (eq_int (zl__403, (Big_int.of_int (1)))) -> !zx1
    | zl__404 when (eq_int (zl__404, (Big_int.of_int (2)))) -> !zx2
    | zl__405 when (eq_int (zl__405, (Big_int.of_int (3)))) -> !zx3
    | zl__406 when (eq_int (zl__406, (Big_int.of_int (4)))) -> !zx4
    | zl__407 when (eq_int (zl__407, (Big_int.of_int (5)))) -> !zx5
    | zl__408 when (eq_int (zl__408, (Big_int.of_int (6)))) -> !zx6
    | zl__409 when (eq_int (zl__409, (Big_int.of_int (7)))) -> !zx7
    | zl__410 when (eq_int (zl__410, (Big_int.of_int (8)))) -> !zx8
    | zl__411 when (eq_int (zl__411, (Big_int.of_int (9)))) -> !zx9
    | zl__412 when (eq_int (zl__412, (Big_int.of_int (10)))) -> !zx10
    | zl__413 when (eq_int (zl__413, (Big_int.of_int (11)))) -> !zx11
    | zl__414 when (eq_int (zl__414, (Big_int.of_int (12)))) -> !zx12
    | zl__415 when (eq_int (zl__415, (Big_int.of_int (13)))) -> !zx13
    | zl__416 when (eq_int (zl__416, (Big_int.of_int (14)))) -> !zx14
    | zl__417 when (eq_int (zl__417, (Big_int.of_int (15)))) -> !zx15
    | _ -> raise (ZError_not_rv32e_register ())
  end) in
  zregval_from_reg zv)

and zrvfi_wX ((zr, zv) : (Big_int.num * (bit) list)) : unit = sail_call (fun r ->
  ())

and zwX ((zr, zin_v) : (Big_int.num * (bit) list)) : unit = sail_call (fun r ->
  let zv = (zregval_into_reg zin_v) in
  begin
    begin
      match zr with
      | zl__386 when (eq_int (zl__386, Big_int.zero)) -> ()
      | zl__387 when (eq_int (zl__387, (Big_int.of_int (1)))) -> (zx1 := zv)
      | zl__388 when (eq_int (zl__388, (Big_int.of_int (2)))) -> (zx2 := zv)
      | zl__389 when (eq_int (zl__389, (Big_int.of_int (3)))) -> (zx3 := zv)
      | zl__390 when (eq_int (zl__390, (Big_int.of_int (4)))) -> (zx4 := zv)
      | zl__391 when (eq_int (zl__391, (Big_int.of_int (5)))) -> (zx5 := zv)
      | zl__392 when (eq_int (zl__392, (Big_int.of_int (6)))) -> (zx6 := zv)
      | zl__393 when (eq_int (zl__393, (Big_int.of_int (7)))) -> (zx7 := zv)
      | zl__394 when (eq_int (zl__394, (Big_int.of_int (8)))) -> (zx8 := zv)
      | zl__395 when (eq_int (zl__395, (Big_int.of_int (9)))) -> (zx9 := zv)
      | zl__396 when (eq_int (zl__396, (Big_int.of_int (10)))) -> (zx10 := zv)
      | zl__397 when (eq_int (zl__397, (Big_int.of_int (11)))) -> (zx11 := zv)
      | zl__398 when (eq_int (zl__398, (Big_int.of_int (12)))) -> (zx12 := zv)
      | zl__399 when (eq_int (zl__399, (Big_int.of_int (13)))) -> (zx13 := zv)
      | zl__400 when (eq_int (zl__400, (Big_int.of_int (14)))) -> (zx14 := zv)
      | zl__401 when (eq_int (zl__401, (Big_int.of_int (15)))) -> (zx15 := zv)
      | _ -> raise (ZError_not_rv32e_register ())
    end;
    (if (zneq_int (zr, Big_int.zero)) then (begin
      zrvfi_wX (zr, zin_v);
      (if (Platform.get_config_print_reg ()) then (Platform.print_reg (concat_str ("x", (concat_str ((dec_str zr), (concat_str (" <- ", (zRegStr zv)))))))) else ())
    end) else ())
  end)

and zrX_bits (zi : ((bit) list)) : (bit) list = sail_call (fun r ->
  zrX (uint zi))

and zwX_bits ((zi, zdata) : ((bit) list * (bit) list)) : unit = sail_call (fun r ->
  zwX ((uint zi), zdata))

and zreg_name_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | "zero" -> [B0; B0; B0; B0; B0]
    | "ra" -> [B0; B0; B0; B0; B1]
    | "sp" -> [B0; B0; B0; B1; B0]
    | "gp" -> [B0; B0; B0; B1; B1]
    | "tp" -> [B0; B0; B1; B0; B0]
    | "t0" -> [B0; B0; B1; B0; B1]
    | "t1" -> [B0; B0; B1; B1; B0]
    | "t2" -> [B0; B0; B1; B1; B1]
    | "fp" -> [B0; B1; B0; B0; B0]
    | "s1" -> [B0; B1; B0; B0; B1]
    | "a0" -> [B0; B1; B0; B1; B0]
    | "a1" -> [B0; B1; B0; B1; B1]
    | "a2" -> [B0; B1; B1; B0; B0]
    | "a3" -> [B0; B1; B1; B0; B1]
    | "a4" -> [B0; B1; B1; B1; B0]
    | "a5" -> [B0; B1; B1; B1; B1]
    | "a6" -> [B1; B0; B0; B0; B0]
    | "a7" -> [B1; B0; B0; B0; B1]
    | "s2" -> [B1; B0; B0; B1; B0]
    | "s3" -> [B1; B0; B0; B1; B1]
    | "s4" -> [B1; B0; B1; B0; B0]
    | "s5" -> [B1; B0; B1; B0; B1]
    | "s6" -> [B1; B0; B1; B1; B0]
    | "s7" -> [B1; B0; B1; B1; B1]
    | "s8" -> [B1; B1; B0; B0; B0]
    | "s9" -> [B1; B1; B0; B0; B1]
    | "s10" -> [B1; B1; B0; B1; B0]
    | "s11" -> [B1; B1; B0; B1; B1]
    | "t3" -> [B1; B1; B1; B0; B0]
    | "t4" -> [B1; B1; B1; B0; B1]
    | "t5" -> [B1; B1; B1; B1; B0]
    | "t6" -> [B1; B1; B1; B1; B1]
  end)

and zreg_name_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0; B0; B0; B0])) -> true
    | zb__1 when (eq_list (zb__1, [B0; B0; B0; B0; B1])) -> true
    | zb__2 when (eq_list (zb__2, [B0; B0; B0; B1; B0])) -> true
    | zb__3 when (eq_list (zb__3, [B0; B0; B0; B1; B1])) -> true
    | zb__4 when (eq_list (zb__4, [B0; B0; B1; B0; B0])) -> true
    | zb__5 when (eq_list (zb__5, [B0; B0; B1; B0; B1])) -> true
    | zb__6 when (eq_list (zb__6, [B0; B0; B1; B1; B0])) -> true
    | zb__7 when (eq_list (zb__7, [B0; B0; B1; B1; B1])) -> true
    | zb__8 when (eq_list (zb__8, [B0; B1; B0; B0; B0])) -> true
    | zb__9 when (eq_list (zb__9, [B0; B1; B0; B0; B1])) -> true
    | zb__10 when (eq_list (zb__10, [B0; B1; B0; B1; B0])) -> true
    | zb__11 when (eq_list (zb__11, [B0; B1; B0; B1; B1])) -> true
    | zb__12 when (eq_list (zb__12, [B0; B1; B1; B0; B0])) -> true
    | zb__13 when (eq_list (zb__13, [B0; B1; B1; B0; B1])) -> true
    | zb__14 when (eq_list (zb__14, [B0; B1; B1; B1; B0])) -> true
    | zb__15 when (eq_list (zb__15, [B0; B1; B1; B1; B1])) -> true
    | zb__16 when (eq_list (zb__16, [B1; B0; B0; B0; B0])) -> true
    | zb__17 when (eq_list (zb__17, [B1; B0; B0; B0; B1])) -> true
    | zb__18 when (eq_list (zb__18, [B1; B0; B0; B1; B0])) -> true
    | zb__19 when (eq_list (zb__19, [B1; B0; B0; B1; B1])) -> true
    | zb__20 when (eq_list (zb__20, [B1; B0; B1; B0; B0])) -> true
    | zb__21 when (eq_list (zb__21, [B1; B0; B1; B0; B1])) -> true
    | zb__22 when (eq_list (zb__22, [B1; B0; B1; B1; B0])) -> true
    | zb__23 when (eq_list (zb__23, [B1; B0; B1; B1; B1])) -> true
    | zb__24 when (eq_list (zb__24, [B1; B1; B0; B0; B0])) -> true
    | zb__25 when (eq_list (zb__25, [B1; B1; B0; B0; B1])) -> true
    | zb__26 when (eq_list (zb__26, [B1; B1; B0; B1; B0])) -> true
    | zb__27 when (eq_list (zb__27, [B1; B1; B0; B1; B1])) -> true
    | zb__28 when (eq_list (zb__28, [B1; B1; B1; B0; B0])) -> true
    | zb__29 when (eq_list (zb__29, [B1; B1; B1; B0; B1])) -> true
    | zb__30 when (eq_list (zb__30, [B1; B1; B1; B1; B0])) -> true
    | zb__31 when (eq_list (zb__31, [B1; B1; B1; B1; B1])) -> true
    | _ -> false
  end)

and zreg_name_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | "zero" -> true
    | "ra" -> true
    | "sp" -> true
    | "gp" -> true
    | "tp" -> true
    | "t0" -> true
    | "t1" -> true
    | "t2" -> true
    | "fp" -> true
    | "s1" -> true
    | "a0" -> true
    | "a1" -> true
    | "a2" -> true
    | "a3" -> true
    | "a4" -> true
    | "a5" -> true
    | "a6" -> true
    | "a7" -> true
    | "s2" -> true
    | "s3" -> true
    | "s4" -> true
    | "s5" -> true
    | "s6" -> true
    | "s7" -> true
    | "s8" -> true
    | "s9" -> true
    | "s10" -> true
    | "s11" -> true
    | "t3" -> true
    | "t4" -> true
    | "t5" -> true
    | "t6" -> true
    | _ -> false
  end)

and zcreg_name_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | "s0" -> [B0; B0; B0]
    | "s1" -> [B0; B0; B1]
    | "a0" -> [B0; B1; B0]
    | "a1" -> [B0; B1; B1]
    | "a2" -> [B1; B0; B0]
    | "a3" -> [B1; B0; B1]
    | "a4" -> [B1; B1; B0]
    | "a5" -> [B1; B1; B1]
  end)

and zcreg_name_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0; B0])) -> true
    | zb__1 when (eq_list (zb__1, [B0; B0; B1])) -> true
    | zb__2 when (eq_list (zb__2, [B0; B1; B0])) -> true
    | zb__3 when (eq_list (zb__3, [B0; B1; B1])) -> true
    | zb__4 when (eq_list (zb__4, [B1; B0; B0])) -> true
    | zb__5 when (eq_list (zb__5, [B1; B0; B1])) -> true
    | zb__6 when (eq_list (zb__6, [B1; B1; B0])) -> true
    | zb__7 when (eq_list (zb__7, [B1; B1; B1])) -> true
    | _ -> false
  end)

and zcreg_name_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | "s0" -> true
    | "s1" -> true
    | "a0" -> true
    | "a1" -> true
    | "a2" -> true
    | "a3" -> true
    | "a4" -> true
    | "a5" -> true
    | _ -> false
  end)

and zinit_base_regs (() : (unit)) : unit = sail_call (fun r ->
  begin
    (zx1 := zzzero_reg);
    (zx2 := zzzero_reg);
    (zx3 := zzzero_reg);
    (zx4 := zzzero_reg);
    (zx5 := zzzero_reg);
    (zx6 := zzzero_reg);
    (zx7 := zzzero_reg);
    (zx8 := zzzero_reg);
    (zx9 := zzzero_reg);
    (zx10 := zzzero_reg);
    (zx11 := zzzero_reg);
    (zx12 := zzzero_reg);
    (zx13 := zzzero_reg);
    (zx14 := zzzero_reg);
    (zx15 := zzzero_reg)
  end)

let zcur_privilege : (zPrivilege) ref = ref (zundefined_Privilege ());;

let zcur_inst : (zxlenbits) ref = ref (undefined_bitvector (Big_int.of_int (32)));;

module ZMisa = struct type  zMisa = { zbits : (bit) list } end;;

let string_of_zMisa (gs2175 :  ZMisa.zMisa) =
  "{bits = " ^ string_of_bits gs2175.ZMisa.zbits ^ "}";;

let rec zundefined_Misa (() : (unit)) : ZMisa.zMisa = sail_call (fun r ->
  {ZMisa.zbits = undefined_bitvector (Big_int.of_int (32))})

and zMk_Misa (zv : ((bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {ZMisa.zbits = zv})

and z_get_Misa_bits (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero))

and z_update_Misa_bits ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZCounteren = struct type  zCounteren = { zbits : (bit) list } end;;

let string_of_zCounteren (gs2193 :  ZCounteren.zCounteren) =
  "{bits = " ^ string_of_bits gs2193.ZCounteren.zbits ^ "}";;

let rec z_update_Counteren_bits ((zv, zx) : (ZCounteren.zCounteren * (bit) list)) : ZCounteren.zCounteren = sail_call (fun r ->
  {zv with ZCounteren.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZCounterin = struct type  zCounterin = { zbits : (bit) list } end;;

let string_of_zCounterin (gs2199 :  ZCounterin.zCounterin) =
  "{bits = " ^ string_of_bits gs2199.ZCounterin.zbits ^ "}";;

let rec z_update_Counterin_bits ((zv, zx) : (ZCounterin.zCounterin * (bit) list)) : ZCounterin.zCounterin = sail_call (fun r ->
  {zv with ZCounterin.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZEnvcfg = struct type  zEnvcfg = { zbits : (bit) list } end;;

let string_of_zEnvcfg (gs2205 :  ZEnvcfg.zEnvcfg) =
  "{bits = " ^ string_of_bits gs2205.ZEnvcfg.zbits ^ "}";;

let rec z_update_Envcfg_bits ((zv, zx) : (ZEnvcfg.zEnvcfg * (bit) list)) : ZEnvcfg.zEnvcfg = sail_call (fun r ->
  {zv with ZEnvcfg.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (64)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZExt_PTE_Bits = struct type  zExt_PTE_Bits = { zbits : (bit) list } end;;

let string_of_zExt_PTE_Bits (gs2211 :  ZExt_PTE_Bits.zExt_PTE_Bits) =
  "{bits = " ^ string_of_bits gs2211.ZExt_PTE_Bits.zbits ^ "}";;

let rec z_update_Ext_PTE_Bits_bits ((zv, zx) : (ZExt_PTE_Bits.zExt_PTE_Bits * (bit) list)) : ZExt_PTE_Bits.zExt_PTE_Bits = sail_call (fun r ->
  {zv with ZExt_PTE_Bits.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (10)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZMcause = struct type  zMcause = { zbits : (bit) list } end;;

let string_of_zMcause (gs2217 :  ZMcause.zMcause) =
  "{bits = " ^ string_of_bits gs2217.ZMcause.zbits ^ "}";;

let rec z_update_Mcause_bits ((zv, zx) : (ZMcause.zMcause * (bit) list)) : ZMcause.zMcause = sail_call (fun r ->
  {zv with ZMcause.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZMedeleg = struct type  zMedeleg = { zbits : (bit) list } end;;

let string_of_zMedeleg (gs2223 :  ZMedeleg.zMedeleg) =
  "{bits = " ^ string_of_bits gs2223.ZMedeleg.zbits ^ "}";;

let rec z_update_Medeleg_bits ((zv, zx) : (ZMedeleg.zMedeleg * (bit) list)) : ZMedeleg.zMedeleg = sail_call (fun r ->
  {zv with ZMedeleg.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZMinterrupts = struct type  zMinterrupts = { zbits : (bit) list } end;;

let string_of_zMinterrupts (gs2229 :  ZMinterrupts.zMinterrupts) =
  "{bits = " ^ string_of_bits gs2229.ZMinterrupts.zbits ^ "}";;

let rec z_update_Minterrupts_bits ((zv, zx) : (ZMinterrupts.zMinterrupts * (bit) list)) : ZMinterrupts.zMinterrupts = sail_call (fun r ->
  {zv with ZMinterrupts.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZMstatus = struct type  zMstatus = { zbits : (bit) list } end;;

let string_of_zMstatus (gs2235 :  ZMstatus.zMstatus) =
  "{bits = " ^ string_of_bits gs2235.ZMstatus.zbits ^ "}";;

let rec z_update_Mstatus_bits ((zv, zx) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  {zv with ZMstatus.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZMstatush = struct type  zMstatush = { zbits : (bit) list } end;;

let string_of_zMstatush (gs2241 :  ZMstatush.zMstatush) =
  "{bits = " ^ string_of_bits gs2241.ZMstatush.zbits ^ "}";;

let rec z_update_Mstatush_bits ((zv, zx) : (ZMstatush.zMstatush * (bit) list)) : ZMstatush.zMstatush = sail_call (fun r ->
  {zv with ZMstatush.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZMtvec = struct type  zMtvec = { zbits : (bit) list } end;;

let string_of_zMtvec (gs2247 :  ZMtvec.zMtvec) =
  "{bits = " ^ string_of_bits gs2247.ZMtvec.zbits ^ "}";;

let rec z_update_Mtvec_bits ((zv, zx) : (ZMtvec.zMtvec * (bit) list)) : ZMtvec.zMtvec = sail_call (fun r ->
  {zv with ZMtvec.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZPTE_Bits = struct type  zPTE_Bits = { zbits : (bit) list } end;;

let string_of_zPTE_Bits (gs2253 :  ZPTE_Bits.zPTE_Bits) =
  "{bits = " ^ string_of_bits gs2253.ZPTE_Bits.zbits ^ "}";;

let rec z_update_PTE_Bits_bits ((zv, zx) : (ZPTE_Bits.zPTE_Bits * (bit) list)) : ZPTE_Bits.zPTE_Bits = sail_call (fun r ->
  {zv with ZPTE_Bits.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (8)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZPmpcfg_ent = struct type  zPmpcfg_ent = { zbits : (bit) list } end;;

let string_of_zPmpcfg_ent (gs2259 :  ZPmpcfg_ent.zPmpcfg_ent) =
  "{bits = " ^ string_of_bits gs2259.ZPmpcfg_ent.zbits ^ "}";;

let rec z_update_Pmpcfg_ent_bits ((zv, zx) : (ZPmpcfg_ent.zPmpcfg_ent * (bit) list)) : ZPmpcfg_ent.zPmpcfg_ent = sail_call (fun r ->
  {zv with ZPmpcfg_ent.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (8)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZSV32_PTE = struct type  zSV32_PTE = { zbits : (bit) list } end;;

let string_of_zSV32_PTE (gs2265 :  ZSV32_PTE.zSV32_PTE) =
  "{bits = " ^ string_of_bits gs2265.ZSV32_PTE.zbits ^ "}";;

let rec z_update_SV32_PTE_bits ((zv, zx) : (ZSV32_PTE.zSV32_PTE * (bit) list)) : ZSV32_PTE.zSV32_PTE = sail_call (fun r ->
  {zv with ZSV32_PTE.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZSV32_Paddr = struct type  zSV32_Paddr = { zbits : (bit) list } end;;

let string_of_zSV32_Paddr (gs2271 :  ZSV32_Paddr.zSV32_Paddr) =
  "{bits = " ^ string_of_bits gs2271.ZSV32_Paddr.zbits ^ "}";;

let rec z_update_SV32_Paddr_bits ((zv, zx) : (ZSV32_Paddr.zSV32_Paddr * (bit) list)) : ZSV32_Paddr.zSV32_Paddr = sail_call (fun r ->
  {zv with ZSV32_Paddr.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (34)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZSV32_Vaddr = struct type  zSV32_Vaddr = { zbits : (bit) list } end;;

let string_of_zSV32_Vaddr (gs2277 :  ZSV32_Vaddr.zSV32_Vaddr) =
  "{bits = " ^ string_of_bits gs2277.ZSV32_Vaddr.zbits ^ "}";;

let rec z_update_SV32_Vaddr_bits ((zv, zx) : (ZSV32_Vaddr.zSV32_Vaddr * (bit) list)) : ZSV32_Vaddr.zSV32_Vaddr = sail_call (fun r ->
  {zv with ZSV32_Vaddr.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZSV39_PTE = struct type  zSV39_PTE = { zbits : (bit) list } end;;

let string_of_zSV39_PTE (gs2283 :  ZSV39_PTE.zSV39_PTE) =
  "{bits = " ^ string_of_bits gs2283.ZSV39_PTE.zbits ^ "}";;

let rec z_update_SV39_PTE_bits ((zv, zx) : (ZSV39_PTE.zSV39_PTE * (bit) list)) : ZSV39_PTE.zSV39_PTE = sail_call (fun r ->
  {zv with ZSV39_PTE.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (64)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZSV39_Paddr = struct type  zSV39_Paddr = { zbits : (bit) list } end;;

let string_of_zSV39_Paddr (gs2289 :  ZSV39_Paddr.zSV39_Paddr) =
  "{bits = " ^ string_of_bits gs2289.ZSV39_Paddr.zbits ^ "}";;

let rec z_update_SV39_Paddr_bits ((zv, zx) : (ZSV39_Paddr.zSV39_Paddr * (bit) list)) : ZSV39_Paddr.zSV39_Paddr = sail_call (fun r ->
  {zv with ZSV39_Paddr.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (56)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZSV39_Vaddr = struct type  zSV39_Vaddr = { zbits : (bit) list } end;;

let string_of_zSV39_Vaddr (gs2295 :  ZSV39_Vaddr.zSV39_Vaddr) =
  "{bits = " ^ string_of_bits gs2295.ZSV39_Vaddr.zbits ^ "}";;

let rec z_update_SV39_Vaddr_bits ((zv, zx) : (ZSV39_Vaddr.zSV39_Vaddr * (bit) list)) : ZSV39_Vaddr.zSV39_Vaddr = sail_call (fun r ->
  {zv with ZSV39_Vaddr.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (39)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZSV48_PTE = struct type  zSV48_PTE = { zbits : (bit) list } end;;

let string_of_zSV48_PTE (gs2301 :  ZSV48_PTE.zSV48_PTE) =
  "{bits = " ^ string_of_bits gs2301.ZSV48_PTE.zbits ^ "}";;

let rec z_update_SV48_PTE_bits ((zv, zx) : (ZSV48_PTE.zSV48_PTE * (bit) list)) : ZSV48_PTE.zSV48_PTE = sail_call (fun r ->
  {zv with ZSV48_PTE.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (64)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZSV48_Paddr = struct type  zSV48_Paddr = { zbits : (bit) list } end;;

let string_of_zSV48_Paddr (gs2307 :  ZSV48_Paddr.zSV48_Paddr) =
  "{bits = " ^ string_of_bits gs2307.ZSV48_Paddr.zbits ^ "}";;

let rec z_update_SV48_Paddr_bits ((zv, zx) : (ZSV48_Paddr.zSV48_Paddr * (bit) list)) : ZSV48_Paddr.zSV48_Paddr = sail_call (fun r ->
  {zv with ZSV48_Paddr.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (56)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZSV48_Vaddr = struct type  zSV48_Vaddr = { zbits : (bit) list } end;;

let string_of_zSV48_Vaddr (gs2313 :  ZSV48_Vaddr.zSV48_Vaddr) =
  "{bits = " ^ string_of_bits gs2313.ZSV48_Vaddr.zbits ^ "}";;

let rec z_update_SV48_Vaddr_bits ((zv, zx) : (ZSV48_Vaddr.zSV48_Vaddr * (bit) list)) : ZSV48_Vaddr.zSV48_Vaddr = sail_call (fun r ->
  {zv with ZSV48_Vaddr.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (48)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZSatp32 = struct type  zSatp32 = { zbits : (bit) list } end;;

let string_of_zSatp32 (gs2319 :  ZSatp32.zSatp32) =
  "{bits = " ^ string_of_bits gs2319.ZSatp32.zbits ^ "}";;

let rec z_update_Satp32_bits ((zv, zx) : (ZSatp32.zSatp32 * (bit) list)) : ZSatp32.zSatp32 = sail_call (fun r ->
  {zv with ZSatp32.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZSatp64 = struct type  zSatp64 = { zbits : (bit) list } end;;

let string_of_zSatp64 (gs2325 :  ZSatp64.zSatp64) =
  "{bits = " ^ string_of_bits gs2325.ZSatp64.zbits ^ "}";;

let rec z_update_Satp64_bits ((zv, zx) : (ZSatp64.zSatp64 * (bit) list)) : ZSatp64.zSatp64 = sail_call (fun r ->
  {zv with ZSatp64.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (64)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZSedeleg = struct type  zSedeleg = { zbits : (bit) list } end;;

let string_of_zSedeleg (gs2331 :  ZSedeleg.zSedeleg) =
  "{bits = " ^ string_of_bits gs2331.ZSedeleg.zbits ^ "}";;

let rec z_update_Sedeleg_bits ((zv, zx) : (ZSedeleg.zSedeleg * (bit) list)) : ZSedeleg.zSedeleg = sail_call (fun r ->
  {zv with ZSedeleg.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZSinterrupts = struct type  zSinterrupts = { zbits : (bit) list } end;;

let string_of_zSinterrupts (gs2337 :  ZSinterrupts.zSinterrupts) =
  "{bits = " ^ string_of_bits gs2337.ZSinterrupts.zbits ^ "}";;

let rec z_update_Sinterrupts_bits ((zv, zx) : (ZSinterrupts.zSinterrupts * (bit) list)) : ZSinterrupts.zSinterrupts = sail_call (fun r ->
  {zv with ZSinterrupts.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZSstatus = struct type  zSstatus = { zbits : (bit) list } end;;

let string_of_zSstatus (gs2343 :  ZSstatus.zSstatus) =
  "{bits = " ^ string_of_bits gs2343.ZSstatus.zbits ^ "}";;

let rec z_update_Sstatus_bits ((zv, zx) : (ZSstatus.zSstatus * (bit) list)) : ZSstatus.zSstatus = sail_call (fun r ->
  {zv with ZSstatus.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZUinterrupts = struct type  zUinterrupts = { zbits : (bit) list } end;;

let string_of_zUinterrupts (gs2349 :  ZUinterrupts.zUinterrupts) =
  "{bits = " ^ string_of_bits gs2349.ZUinterrupts.zbits ^ "}";;

let rec z_update_Uinterrupts_bits ((zv, zx) : (ZUinterrupts.zUinterrupts * (bit) list)) : ZUinterrupts.zUinterrupts = sail_call (fun r ->
  {zv with ZUinterrupts.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZUstatus = struct type  zUstatus = { zbits : (bit) list } end;;

let string_of_zUstatus (gs2355 :  ZUstatus.zUstatus) =
  "{bits = " ^ string_of_bits gs2355.ZUstatus.zbits ^ "}";;

let rec z_update_Ustatus_bits ((zv, zx) : (ZUstatus.zUstatus * (bit) list)) : ZUstatus.zUstatus = sail_call (fun r ->
  {zv with ZUstatus.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZVcsr = struct type  zVcsr = { zbits : (bit) list } end;;

let string_of_zVcsr (gs2361 :  ZVcsr.zVcsr) =
  "{bits = " ^ string_of_bits gs2361.ZVcsr.zbits ^ "}";;

let rec z_update_Vcsr_bits ((zv, zx) : (ZVcsr.zVcsr * (bit) list)) : ZVcsr.zVcsr = sail_call (fun r ->
  {zv with ZVcsr.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (3)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module ZVtype = struct type  zVtype = { zbits : (bit) list } end;;

let string_of_zVtype (gs2367 :  ZVtype.zVtype) =
  "{bits = " ^ string_of_bits gs2367.ZVtype.zbits ^ "}";;

let rec z_update_Vtype_bits ((zv, zx) : (ZVtype.zVtype * (bit) list)) : ZVtype.zVtype = sail_call (fun r ->
  {zv with ZVtype.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module Zccsr = struct type  zccsr = { zbits : (bit) list } end;;

let string_of_zccsr (gs2373 :  Zccsr.zccsr) =
  "{bits = " ^ string_of_bits gs2373.Zccsr.zbits ^ "}";;

let rec z_update_ccsr_bits ((zv, zx) : (Zccsr.zccsr * (bit) list)) : Zccsr.zccsr = sail_call (fun r ->
  {zv with Zccsr.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero, zx)})

module Zhtif_cmd = struct type  zhtif_cmd = { zbits : (bit) list } end;;

let string_of_zhtif_cmd (gs2379 :  Zhtif_cmd.zhtif_cmd) =
  "{bits = " ^ string_of_bits gs2379.Zhtif_cmd.zbits ^ "}";;

let rec z_update_htif_cmd_bits ((zv, zx) : (Zhtif_cmd.zhtif_cmd * (bit) list)) : Zhtif_cmd.zhtif_cmd = sail_call (fun r ->
  {zv with Zhtif_cmd.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (64)), (Big_int.of_int (1)))), Big_int.zero, zx)})

and z_set_Misa_bits ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_bits (zr, zv))))

and z_get_Counteren_bits (zv : (ZCounteren.zCounteren)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_Counterin_bits (zv : (ZCounterin.zCounterin)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_Envcfg_bits (zv : (ZEnvcfg.zEnvcfg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (64)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_Ext_PTE_Bits_bits (zv : (ZExt_PTE_Bits.zExt_PTE_Bits)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (10)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_Mcause_bits (zv : (ZMcause.zMcause)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_Medeleg_bits (zv : (ZMedeleg.zMedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_Minterrupts_bits (zv : (ZMinterrupts.zMinterrupts)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_Mstatus_bits (zv : (ZMstatus.zMstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_Mstatush_bits (zv : (ZMstatush.zMstatush)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_Mtvec_bits (zv : (ZMtvec.zMtvec)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_PTE_Bits_bits (zv : (ZPTE_Bits.zPTE_Bits)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (8)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_Pmpcfg_ent_bits (zv : (ZPmpcfg_ent.zPmpcfg_ent)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (8)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_SV32_PTE_bits (zv : (ZSV32_PTE.zSV32_PTE)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_SV32_Paddr_bits (zv : (ZSV32_Paddr.zSV32_Paddr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (34)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_SV32_Vaddr_bits (zv : (ZSV32_Vaddr.zSV32_Vaddr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_SV39_PTE_bits (zv : (ZSV39_PTE.zSV39_PTE)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (64)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_SV39_Paddr_bits (zv : (ZSV39_Paddr.zSV39_Paddr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (56)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_SV39_Vaddr_bits (zv : (ZSV39_Vaddr.zSV39_Vaddr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (39)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_SV48_PTE_bits (zv : (ZSV48_PTE.zSV48_PTE)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (64)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_SV48_Paddr_bits (zv : (ZSV48_Paddr.zSV48_Paddr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (56)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_SV48_Vaddr_bits (zv : (ZSV48_Vaddr.zSV48_Vaddr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (48)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_Satp32_bits (zv : (ZSatp32.zSatp32)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_Satp64_bits (zv : (ZSatp64.zSatp64)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (64)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_Sedeleg_bits (zv : (ZSedeleg.zSedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_Sinterrupts_bits (zv : (ZSinterrupts.zSinterrupts)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_Sstatus_bits (zv : (ZSstatus.zSstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_Uinterrupts_bits (zv : (ZUinterrupts.zUinterrupts)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_Ustatus_bits (zv : (ZUstatus.zUstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_Vcsr_bits (zv : (ZVcsr.zVcsr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (3)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_Vtype_bits (zv : (ZVtype.zVtype)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_ccsr_bits (zv : (Zccsr.zccsr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero))

and z_get_htif_cmd_bits (zv : (Zhtif_cmd.zhtif_cmd)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (64)), (Big_int.of_int (1)))), Big_int.zero))

and z_set_Counteren_bits ((zr_ref, zv) : ((ZCounteren.zCounteren) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Counteren_bits (zr, zv))))

and z_set_Counterin_bits ((zr_ref, zv) : ((ZCounterin.zCounterin) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Counterin_bits (zr, zv))))

and z_set_Envcfg_bits ((zr_ref, zv) : ((ZEnvcfg.zEnvcfg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Envcfg_bits (zr, zv))))

and z_set_Ext_PTE_Bits_bits ((zr_ref, zv) : ((ZExt_PTE_Bits.zExt_PTE_Bits) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Ext_PTE_Bits_bits (zr, zv))))

and z_set_Mcause_bits ((zr_ref, zv) : ((ZMcause.zMcause) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mcause_bits (zr, zv))))

and z_set_Medeleg_bits ((zr_ref, zv) : ((ZMedeleg.zMedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Medeleg_bits (zr, zv))))

and z_set_Minterrupts_bits ((zr_ref, zv) : ((ZMinterrupts.zMinterrupts) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Minterrupts_bits (zr, zv))))

and z_set_Mstatus_bits ((zr_ref, zv) : ((ZMstatus.zMstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mstatus_bits (zr, zv))))

and z_set_Mstatush_bits ((zr_ref, zv) : ((ZMstatush.zMstatush) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mstatush_bits (zr, zv))))

and z_set_Mtvec_bits ((zr_ref, zv) : ((ZMtvec.zMtvec) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mtvec_bits (zr, zv))))

and z_set_PTE_Bits_bits ((zr_ref, zv) : ((ZPTE_Bits.zPTE_Bits) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_PTE_Bits_bits (zr, zv))))

and z_set_Pmpcfg_ent_bits ((zr_ref, zv) : ((ZPmpcfg_ent.zPmpcfg_ent) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Pmpcfg_ent_bits (zr, zv))))

and z_set_SV32_PTE_bits ((zr_ref, zv) : ((ZSV32_PTE.zSV32_PTE) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV32_PTE_bits (zr, zv))))

and z_set_SV32_Paddr_bits ((zr_ref, zv) : ((ZSV32_Paddr.zSV32_Paddr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV32_Paddr_bits (zr, zv))))

and z_set_SV32_Vaddr_bits ((zr_ref, zv) : ((ZSV32_Vaddr.zSV32_Vaddr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV32_Vaddr_bits (zr, zv))))

and z_set_SV39_PTE_bits ((zr_ref, zv) : ((ZSV39_PTE.zSV39_PTE) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV39_PTE_bits (zr, zv))))

and z_set_SV39_Paddr_bits ((zr_ref, zv) : ((ZSV39_Paddr.zSV39_Paddr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV39_Paddr_bits (zr, zv))))

and z_set_SV39_Vaddr_bits ((zr_ref, zv) : ((ZSV39_Vaddr.zSV39_Vaddr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV39_Vaddr_bits (zr, zv))))

and z_set_SV48_PTE_bits ((zr_ref, zv) : ((ZSV48_PTE.zSV48_PTE) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV48_PTE_bits (zr, zv))))

and z_set_SV48_Paddr_bits ((zr_ref, zv) : ((ZSV48_Paddr.zSV48_Paddr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV48_Paddr_bits (zr, zv))))

and z_set_SV48_Vaddr_bits ((zr_ref, zv) : ((ZSV48_Vaddr.zSV48_Vaddr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV48_Vaddr_bits (zr, zv))))

and z_set_Satp32_bits ((zr_ref, zv) : ((ZSatp32.zSatp32) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Satp32_bits (zr, zv))))

and z_set_Satp64_bits ((zr_ref, zv) : ((ZSatp64.zSatp64) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Satp64_bits (zr, zv))))

and z_set_Sedeleg_bits ((zr_ref, zv) : ((ZSedeleg.zSedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sedeleg_bits (zr, zv))))

and z_set_Sinterrupts_bits ((zr_ref, zv) : ((ZSinterrupts.zSinterrupts) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sinterrupts_bits (zr, zv))))

and z_set_Sstatus_bits ((zr_ref, zv) : ((ZSstatus.zSstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sstatus_bits (zr, zv))))

and z_set_Uinterrupts_bits ((zr_ref, zv) : ((ZUinterrupts.zUinterrupts) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Uinterrupts_bits (zr, zv))))

and z_set_Ustatus_bits ((zr_ref, zv) : ((ZUstatus.zUstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Ustatus_bits (zr, zv))))

and z_set_Vcsr_bits ((zr_ref, zv) : ((ZVcsr.zVcsr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Vcsr_bits (zr, zv))))

and z_set_Vtype_bits ((zr_ref, zv) : ((ZVtype.zVtype) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Vtype_bits (zr, zv))))

and z_set_ccsr_bits ((zr_ref, zv) : ((Zccsr.zccsr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_ccsr_bits (zr, zv))))

and z_set_htif_cmd_bits ((zr_ref, zv) : ((Zhtif_cmd.zhtif_cmd) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_htif_cmd_bits (zr, zv))))

and z_get_Misa_A (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), Big_int.zero, Big_int.zero))

and z_update_Misa_A ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), Big_int.zero, Big_int.zero, zx)})

and z_update_PTE_Bits_A ((zv, zx) : (ZPTE_Bits.zPTE_Bits * (bit) list)) : ZPTE_Bits.zPTE_Bits = sail_call (fun r ->
  {zv with ZPTE_Bits.zbits = update_subrange ((zv.zbits), (Big_int.of_int (6)), (Big_int.of_int (6)), zx)})

and z_update_Pmpcfg_ent_A ((zv, zx) : (ZPmpcfg_ent.zPmpcfg_ent * (bit) list)) : ZPmpcfg_ent.zPmpcfg_ent = sail_call (fun r ->
  {zv with ZPmpcfg_ent.zbits = update_subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (3)), zx)})

and z_set_Misa_A ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_A (zr, zv))))

and z_get_PTE_Bits_A (zv : (ZPTE_Bits.zPTE_Bits)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (6)), (Big_int.of_int (6))))

and z_get_Pmpcfg_ent_A (zv : (ZPmpcfg_ent.zPmpcfg_ent)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (3))))

and z_set_PTE_Bits_A ((zr_ref, zv) : ((ZPTE_Bits.zPTE_Bits) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_PTE_Bits_A (zr, zv))))

and z_set_Pmpcfg_ent_A ((zr_ref, zv) : ((ZPmpcfg_ent.zPmpcfg_ent) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Pmpcfg_ent_A (zr, zv))))

and z_get_Misa_B (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (1)), (Big_int.of_int (1))))

and z_update_Misa_B ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (1)), (Big_int.of_int (1)), zx)})

and z_set_Misa_B ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_B (zr, zv))))

and z_get_Misa_C (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (2)), (Big_int.of_int (2))))

and z_update_Misa_C ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (2)), (Big_int.of_int (2)), zx)})

and z_set_Misa_C ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_C (zr, zv))))

and z_get_Misa_D (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (3)), (Big_int.of_int (3))))

and z_update_Misa_D ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (3)), (Big_int.of_int (3)), zx)})

and z_update_PTE_Bits_D ((zv, zx) : (ZPTE_Bits.zPTE_Bits * (bit) list)) : ZPTE_Bits.zPTE_Bits = sail_call (fun r ->
  {zv with ZPTE_Bits.zbits = update_subrange ((zv.zbits), (Big_int.of_int (7)), (Big_int.of_int (7)), zx)})

and z_set_Misa_D ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_D (zr, zv))))

and z_get_PTE_Bits_D (zv : (ZPTE_Bits.zPTE_Bits)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (7)), (Big_int.of_int (7))))

and z_set_PTE_Bits_D ((zr_ref, zv) : ((ZPTE_Bits.zPTE_Bits) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_PTE_Bits_D (zr, zv))))

and z_get_Misa_E (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (4))))

and z_update_Misa_E ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (4)), zx)})

and z_set_Misa_E ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_E (zr, zv))))

and z_get_Misa_F (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (5)), (Big_int.of_int (5))))

and z_update_Misa_F ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (5)), (Big_int.of_int (5)), zx)})

and z_set_Misa_F ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_F (zr, zv))))

and z_get_Misa_G (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (6)), (Big_int.of_int (6))))

and z_update_Misa_G ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (6)), (Big_int.of_int (6)), zx)})

and z_update_PTE_Bits_G ((zv, zx) : (ZPTE_Bits.zPTE_Bits * (bit) list)) : ZPTE_Bits.zPTE_Bits = sail_call (fun r ->
  {zv with ZPTE_Bits.zbits = update_subrange ((zv.zbits), (Big_int.of_int (5)), (Big_int.of_int (5)), zx)})

and z_set_Misa_G ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_G (zr, zv))))

and z_get_PTE_Bits_G (zv : (ZPTE_Bits.zPTE_Bits)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (5)), (Big_int.of_int (5))))

and z_set_PTE_Bits_G ((zr_ref, zv) : ((ZPTE_Bits.zPTE_Bits) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_PTE_Bits_G (zr, zv))))

and z_get_Misa_H (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (7)), (Big_int.of_int (7))))

and z_update_Misa_H ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (7)), (Big_int.of_int (7)), zx)})

and z_set_Misa_H ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_H (zr, zv))))

and z_get_Misa_I (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (8)), (Big_int.of_int (8))))

and z_update_Misa_I ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (8)), (Big_int.of_int (8)), zx)})

and z_set_Misa_I ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_I (zr, zv))))

and z_get_Misa_J (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (9)), (Big_int.of_int (9))))

and z_update_Misa_J ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (9)), (Big_int.of_int (9)), zx)})

and z_set_Misa_J ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_J (zr, zv))))

and z_get_Misa_K (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (10)), (Big_int.of_int (10))))

and z_update_Misa_K ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (10)), (Big_int.of_int (10)), zx)})

and z_set_Misa_K ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_K (zr, zv))))

and z_get_Misa_L (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (11)), (Big_int.of_int (11))))

and z_update_Misa_L ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (11)), (Big_int.of_int (11)), zx)})

and z_update_Pmpcfg_ent_L ((zv, zx) : (ZPmpcfg_ent.zPmpcfg_ent * (bit) list)) : ZPmpcfg_ent.zPmpcfg_ent = sail_call (fun r ->
  {zv with ZPmpcfg_ent.zbits = update_subrange ((zv.zbits), (Big_int.of_int (7)), (Big_int.of_int (7)), zx)})

and z_set_Misa_L ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_L (zr, zv))))

and z_get_Pmpcfg_ent_L (zv : (ZPmpcfg_ent.zPmpcfg_ent)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (7)), (Big_int.of_int (7))))

and z_set_Pmpcfg_ent_L ((zr_ref, zv) : ((ZPmpcfg_ent.zPmpcfg_ent) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Pmpcfg_ent_L (zr, zv))))

and z_get_Misa_M (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (12)), (Big_int.of_int (12))))

and z_update_Misa_M ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (12)), (Big_int.of_int (12)), zx)})

and z_set_Misa_M ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_M (zr, zv))))

and z_get_Misa_MXL (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (2))))))

and z_update_Misa_MXL ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (2)))), zx)})

and z_set_Misa_MXL ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_MXL (zr, zv))))

and z_get_Misa_N (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (13)), (Big_int.of_int (13))))

and z_update_Misa_N ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (13)), (Big_int.of_int (13)), zx)})

and z_set_Misa_N ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_N (zr, zv))))

and z_get_Misa_O (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (14)), (Big_int.of_int (14))))

and z_update_Misa_O ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (14)), (Big_int.of_int (14)), zx)})

and z_set_Misa_O ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_O (zr, zv))))

and z_get_Misa_P (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (15)), (Big_int.of_int (15))))

and z_update_Misa_P ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (15)), (Big_int.of_int (15)), zx)})

and z_set_Misa_P ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_P (zr, zv))))

and z_get_Misa_Q (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (16)), (Big_int.of_int (16))))

and z_update_Misa_Q ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (16)), (Big_int.of_int (16)), zx)})

and z_set_Misa_Q ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_Q (zr, zv))))

and z_get_Misa_R (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (17)), (Big_int.of_int (17))))

and z_update_Misa_R ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (17)), (Big_int.of_int (17)), zx)})

and z_update_PTE_Bits_R ((zv, zx) : (ZPTE_Bits.zPTE_Bits * (bit) list)) : ZPTE_Bits.zPTE_Bits = sail_call (fun r ->
  {zv with ZPTE_Bits.zbits = update_subrange ((zv.zbits), (Big_int.of_int (1)), (Big_int.of_int (1)), zx)})

and z_update_Pmpcfg_ent_R ((zv, zx) : (ZPmpcfg_ent.zPmpcfg_ent * (bit) list)) : ZPmpcfg_ent.zPmpcfg_ent = sail_call (fun r ->
  {zv with ZPmpcfg_ent.zbits = update_subrange ((zv.zbits), Big_int.zero, Big_int.zero, zx)})

and z_set_Misa_R ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_R (zr, zv))))

and z_get_PTE_Bits_R (zv : (ZPTE_Bits.zPTE_Bits)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (1)), (Big_int.of_int (1))))

and z_get_Pmpcfg_ent_R (zv : (ZPmpcfg_ent.zPmpcfg_ent)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), Big_int.zero, Big_int.zero))

and z_set_PTE_Bits_R ((zr_ref, zv) : ((ZPTE_Bits.zPTE_Bits) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_PTE_Bits_R (zr, zv))))

and z_set_Pmpcfg_ent_R ((zr_ref, zv) : ((ZPmpcfg_ent.zPmpcfg_ent) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Pmpcfg_ent_R (zr, zv))))

and z_get_Misa_S (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (18)), (Big_int.of_int (18))))

and z_update_Misa_S ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (18)), (Big_int.of_int (18)), zx)})

and z_set_Misa_S ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_S (zr, zv))))

and z_get_Misa_T (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (19)), (Big_int.of_int (19))))

and z_update_Misa_T ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (19)), (Big_int.of_int (19)), zx)})

and z_set_Misa_T ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_T (zr, zv))))

and z_get_Misa_U (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (20)), (Big_int.of_int (20))))

and z_update_Misa_U ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (20)), (Big_int.of_int (20)), zx)})

and z_update_PTE_Bits_U ((zv, zx) : (ZPTE_Bits.zPTE_Bits * (bit) list)) : ZPTE_Bits.zPTE_Bits = sail_call (fun r ->
  {zv with ZPTE_Bits.zbits = update_subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (4)), zx)})

and z_set_Misa_U ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_U (zr, zv))))

and z_get_PTE_Bits_U (zv : (ZPTE_Bits.zPTE_Bits)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (4))))

and z_set_PTE_Bits_U ((zr_ref, zv) : ((ZPTE_Bits.zPTE_Bits) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_PTE_Bits_U (zr, zv))))

and z_get_Misa_V (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (21)), (Big_int.of_int (21))))

and z_update_Misa_V ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (21)), (Big_int.of_int (21)), zx)})

and z_update_PTE_Bits_V ((zv, zx) : (ZPTE_Bits.zPTE_Bits * (bit) list)) : ZPTE_Bits.zPTE_Bits = sail_call (fun r ->
  {zv with ZPTE_Bits.zbits = update_subrange ((zv.zbits), Big_int.zero, Big_int.zero, zx)})

and z_set_Misa_V ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_V (zr, zv))))

and z_get_PTE_Bits_V (zv : (ZPTE_Bits.zPTE_Bits)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), Big_int.zero, Big_int.zero))

and z_set_PTE_Bits_V ((zr_ref, zv) : ((ZPTE_Bits.zPTE_Bits) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_PTE_Bits_V (zr, zv))))

and z_get_Misa_W (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (22)), (Big_int.of_int (22))))

and z_update_Misa_W ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (22)), (Big_int.of_int (22)), zx)})

and z_update_PTE_Bits_W ((zv, zx) : (ZPTE_Bits.zPTE_Bits * (bit) list)) : ZPTE_Bits.zPTE_Bits = sail_call (fun r ->
  {zv with ZPTE_Bits.zbits = update_subrange ((zv.zbits), (Big_int.of_int (2)), (Big_int.of_int (2)), zx)})

and z_update_Pmpcfg_ent_W ((zv, zx) : (ZPmpcfg_ent.zPmpcfg_ent * (bit) list)) : ZPmpcfg_ent.zPmpcfg_ent = sail_call (fun r ->
  {zv with ZPmpcfg_ent.zbits = update_subrange ((zv.zbits), (Big_int.of_int (1)), (Big_int.of_int (1)), zx)})

and z_set_Misa_W ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_W (zr, zv))))

and z_get_PTE_Bits_W (zv : (ZPTE_Bits.zPTE_Bits)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (2)), (Big_int.of_int (2))))

and z_get_Pmpcfg_ent_W (zv : (ZPmpcfg_ent.zPmpcfg_ent)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (1)), (Big_int.of_int (1))))

and z_set_PTE_Bits_W ((zr_ref, zv) : ((ZPTE_Bits.zPTE_Bits) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_PTE_Bits_W (zr, zv))))

and z_set_Pmpcfg_ent_W ((zr_ref, zv) : ((ZPmpcfg_ent.zPmpcfg_ent) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Pmpcfg_ent_W (zr, zv))))

and z_get_Misa_X (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (23)), (Big_int.of_int (23))))

and z_update_Misa_X ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (23)), (Big_int.of_int (23)), zx)})

and z_update_PTE_Bits_X ((zv, zx) : (ZPTE_Bits.zPTE_Bits * (bit) list)) : ZPTE_Bits.zPTE_Bits = sail_call (fun r ->
  {zv with ZPTE_Bits.zbits = update_subrange ((zv.zbits), (Big_int.of_int (3)), (Big_int.of_int (3)), zx)})

and z_update_Pmpcfg_ent_X ((zv, zx) : (ZPmpcfg_ent.zPmpcfg_ent * (bit) list)) : ZPmpcfg_ent.zPmpcfg_ent = sail_call (fun r ->
  {zv with ZPmpcfg_ent.zbits = update_subrange ((zv.zbits), (Big_int.of_int (2)), (Big_int.of_int (2)), zx)})

and z_set_Misa_X ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_X (zr, zv))))

and z_get_PTE_Bits_X (zv : (ZPTE_Bits.zPTE_Bits)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (3)), (Big_int.of_int (3))))

and z_get_Pmpcfg_ent_X (zv : (ZPmpcfg_ent.zPmpcfg_ent)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (2)), (Big_int.of_int (2))))

and z_set_PTE_Bits_X ((zr_ref, zv) : ((ZPTE_Bits.zPTE_Bits) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_PTE_Bits_X (zr, zv))))

and z_set_Pmpcfg_ent_X ((zr_ref, zv) : ((ZPmpcfg_ent.zPmpcfg_ent) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Pmpcfg_ent_X (zr, zv))))

and z_get_Misa_Y (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (24)), (Big_int.of_int (24))))

and z_update_Misa_Y ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (24)), (Big_int.of_int (24)), zx)})

and z_set_Misa_Y ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_Y (zr, zv))))

and z_get_Misa_Z (zv : (ZMisa.zMisa)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (25)), (Big_int.of_int (25))))

and z_update_Misa_Z ((zv, zx) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  {zv with ZMisa.zbits = update_subrange ((zv.zbits), (Big_int.of_int (25)), (Big_int.of_int (25)), zx)})

and z_set_Misa_Z ((zr_ref, zv) : ((ZMisa.zMisa) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Misa_Z (zr, zv))))

let zmisa : (ZMisa.zMisa) ref = ref (zundefined_Misa ());;

let zPCC : (ZCapability.zCapability) ref = ref (zundefined_Capability ());;

let rec zext_veto_disable_C (() : (unit)) : bool = sail_call (fun r ->
  eq_bit ((access ((zgetCapBaseBits !zPCC), (Big_int.of_int (1)))), B1))

and zlegalizze_misa ((zm, zv) : (ZMisa.zMisa * (bit) list)) : ZMisa.zMisa = sail_call (fun r ->
  let zv = (zMk_Misa zv) in
  (if ((znot (Platform.enable_writable_misa ())) || ((eq_list ((z_get_Misa_C zv), [B0])) && ((eq_bit ((access (!znextPC, (Big_int.of_int (1)))), B1)) || (zext_veto_disable_C ())))) then zm else (let zm = ((if (znot (Platform.enable_rvc ())) then zm else (z_update_Misa_C (zm, (z_get_Misa_C zv))))) in
  (if (znot (Platform.enable_fdext ())) then zm else (z_update_Misa_D ((z_update_Misa_F (zm, (z_get_Misa_F zv))), (and_vec ((z_get_Misa_D zv), (z_get_Misa_F zv)))))))))

and zhaveAtomics (() : (unit)) : bool = sail_call (fun r ->
  eq_list ((z_get_Misa_A !zmisa), [B1]))

and zhaveRVC (() : (unit)) : bool = sail_call (fun r ->
  eq_list ((z_get_Misa_C !zmisa), [B1]))

and zhaveMulDiv (() : (unit)) : bool = sail_call (fun r ->
  eq_list ((z_get_Misa_M !zmisa), [B1]))

and zhaveSupMode (() : (unit)) : bool = sail_call (fun r ->
  eq_list ((z_get_Misa_S !zmisa), [B1]))

and zhaveUsrMode (() : (unit)) : bool = sail_call (fun r ->
  eq_list ((z_get_Misa_U !zmisa), [B1]))

and zhaveNExt (() : (unit)) : bool = sail_call (fun r ->
  eq_list ((z_get_Misa_N !zmisa), [B1]))

and zhaveZba (() : (unit)) : bool = sail_call (fun r -> true)

and zhaveZbb (() : (unit)) : bool = sail_call (fun r -> true)

and zhaveZbc (() : (unit)) : bool = sail_call (fun r -> true)

and zhaveZbs (() : (unit)) : bool = sail_call (fun r -> true)

and zhaveZfa (() : (unit)) : bool = sail_call (fun r -> true)

and zhaveZbkb (() : (unit)) : bool = sail_call (fun r -> true)

and zhaveZbkc (() : (unit)) : bool = sail_call (fun r -> true)

and zhaveZbkx (() : (unit)) : bool = sail_call (fun r -> true)

and zhaveZkr (() : (unit)) : bool = sail_call (fun r -> true)

and zhaveZksh (() : (unit)) : bool = sail_call (fun r -> true)

and zhaveZksed (() : (unit)) : bool = sail_call (fun r -> true)

and zhaveZknh (() : (unit)) : bool = sail_call (fun r -> true)

and zhaveZkne (() : (unit)) : bool = sail_call (fun r -> true)

and zhaveZknd (() : (unit)) : bool = sail_call (fun r -> true)

and zhaveZmmul (() : (unit)) : bool = sail_call (fun r -> true)

and zhaveZicond (() : (unit)) : bool = sail_call (fun r -> true)

and zundefined_Mstatush (() : (unit)) : ZMstatush.zMstatush = sail_call (fun r ->
  {ZMstatush.zbits = undefined_bitvector (Big_int.of_int (32))})

and zMk_Mstatush (zv : ((bit) list)) : ZMstatush.zMstatush = sail_call (fun r ->
  {ZMstatush.zbits = zv})

and z_get_Mstatush_MBE (zv : (ZMstatush.zMstatush)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (5)), (Big_int.of_int (5))))

and z_update_Mstatush_MBE ((zv, zx) : (ZMstatush.zMstatush * (bit) list)) : ZMstatush.zMstatush = sail_call (fun r ->
  {zv with ZMstatush.zbits = update_subrange ((zv.zbits), (Big_int.of_int (5)), (Big_int.of_int (5)), zx)})

and z_set_Mstatush_MBE ((zr_ref, zv) : ((ZMstatush.zMstatush) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mstatush_MBE (zr, zv))))

and z_get_Mstatush_SBE (zv : (ZMstatush.zMstatush)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (4))))

and z_update_Mstatush_SBE ((zv, zx) : (ZMstatush.zMstatush * (bit) list)) : ZMstatush.zMstatush = sail_call (fun r ->
  {zv with ZMstatush.zbits = update_subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (4)), zx)})

and z_set_Mstatush_SBE ((zr_ref, zv) : ((ZMstatush.zMstatush) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mstatush_SBE (zr, zv))))

let zmstatush : (ZMstatush.zMstatush) ref = ref (zundefined_Mstatush ());;

let rec zundefined_Mstatus (() : (unit)) : ZMstatus.zMstatus = sail_call (fun r ->
  {ZMstatus.zbits = undefined_bitvector (Big_int.of_int (32))})

and zMk_Mstatus (zv : ((bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  {ZMstatus.zbits = zv})

and z_get_Mstatus_FS (zv : (ZMstatus.zMstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (14)), (Big_int.of_int (13))))

and z_update_Mstatus_FS ((zv, zx) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  {zv with ZMstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (14)), (Big_int.of_int (13)), zx)})

and z_update_Sstatus_FS ((zv, zx) : (ZSstatus.zSstatus * (bit) list)) : ZSstatus.zSstatus = sail_call (fun r ->
  {zv with ZSstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (14)), (Big_int.of_int (13)), zx)})

and z_set_Mstatus_FS ((zr_ref, zv) : ((ZMstatus.zMstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mstatus_FS (zr, zv))))

and z_get_Sstatus_FS (zv : (ZSstatus.zSstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (14)), (Big_int.of_int (13))))

and z_set_Sstatus_FS ((zr_ref, zv) : ((ZSstatus.zSstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sstatus_FS (zr, zv))))

and z_get_Mstatus_MIE (zv : (ZMstatus.zMstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (3)), (Big_int.of_int (3))))

and z_update_Mstatus_MIE ((zv, zx) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  {zv with ZMstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (3)), (Big_int.of_int (3)), zx)})

and z_set_Mstatus_MIE ((zr_ref, zv) : ((ZMstatus.zMstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mstatus_MIE (zr, zv))))

and z_get_Mstatus_MPIE (zv : (ZMstatus.zMstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (7)), (Big_int.of_int (7))))

and z_update_Mstatus_MPIE ((zv, zx) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  {zv with ZMstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (7)), (Big_int.of_int (7)), zx)})

and z_set_Mstatus_MPIE ((zr_ref, zv) : ((ZMstatus.zMstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mstatus_MPIE (zr, zv))))

and z_get_Mstatus_MPP (zv : (ZMstatus.zMstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (12)), (Big_int.of_int (11))))

and z_update_Mstatus_MPP ((zv, zx) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  {zv with ZMstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (12)), (Big_int.of_int (11)), zx)})

and z_set_Mstatus_MPP ((zr_ref, zv) : ((ZMstatus.zMstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mstatus_MPP (zr, zv))))

and z_get_Mstatus_MPRV (zv : (ZMstatus.zMstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (17)), (Big_int.of_int (17))))

and z_update_Mstatus_MPRV ((zv, zx) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  {zv with ZMstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (17)), (Big_int.of_int (17)), zx)})

and z_set_Mstatus_MPRV ((zr_ref, zv) : ((ZMstatus.zMstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mstatus_MPRV (zr, zv))))

and z_get_Mstatus_MXR (zv : (ZMstatus.zMstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (19)), (Big_int.of_int (19))))

and z_update_Mstatus_MXR ((zv, zx) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  {zv with ZMstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (19)), (Big_int.of_int (19)), zx)})

and z_update_Sstatus_MXR ((zv, zx) : (ZSstatus.zSstatus * (bit) list)) : ZSstatus.zSstatus = sail_call (fun r ->
  {zv with ZSstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (19)), (Big_int.of_int (19)), zx)})

and z_set_Mstatus_MXR ((zr_ref, zv) : ((ZMstatus.zMstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mstatus_MXR (zr, zv))))

and z_get_Sstatus_MXR (zv : (ZSstatus.zSstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (19)), (Big_int.of_int (19))))

and z_set_Sstatus_MXR ((zr_ref, zv) : ((ZSstatus.zSstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sstatus_MXR (zr, zv))))

and z_get_Mstatus_SD (zv : (ZMstatus.zMstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1))))))

and z_update_Mstatus_SD ((zv, zx) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  {zv with ZMstatus.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), zx)})

and z_update_Sstatus_SD ((zv, zx) : (ZSstatus.zSstatus * (bit) list)) : ZSstatus.zSstatus = sail_call (fun r ->
  {zv with ZSstatus.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), zx)})

and z_set_Mstatus_SD ((zr_ref, zv) : ((ZMstatus.zMstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mstatus_SD (zr, zv))))

and z_get_Sstatus_SD (zv : (ZSstatus.zSstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1))))))

and z_set_Sstatus_SD ((zr_ref, zv) : ((ZSstatus.zSstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sstatus_SD (zr, zv))))

and z_get_Mstatus_SIE (zv : (ZMstatus.zMstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (1)), (Big_int.of_int (1))))

and z_update_Mstatus_SIE ((zv, zx) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  {zv with ZMstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (1)), (Big_int.of_int (1)), zx)})

and z_update_Sstatus_SIE ((zv, zx) : (ZSstatus.zSstatus * (bit) list)) : ZSstatus.zSstatus = sail_call (fun r ->
  {zv with ZSstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (1)), (Big_int.of_int (1)), zx)})

and z_set_Mstatus_SIE ((zr_ref, zv) : ((ZMstatus.zMstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mstatus_SIE (zr, zv))))

and z_get_Sstatus_SIE (zv : (ZSstatus.zSstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (1)), (Big_int.of_int (1))))

and z_set_Sstatus_SIE ((zr_ref, zv) : ((ZSstatus.zSstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sstatus_SIE (zr, zv))))

and z_get_Mstatus_SPIE (zv : (ZMstatus.zMstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (5)), (Big_int.of_int (5))))

and z_update_Mstatus_SPIE ((zv, zx) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  {zv with ZMstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (5)), (Big_int.of_int (5)), zx)})

and z_update_Sstatus_SPIE ((zv, zx) : (ZSstatus.zSstatus * (bit) list)) : ZSstatus.zSstatus = sail_call (fun r ->
  {zv with ZSstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (5)), (Big_int.of_int (5)), zx)})

and z_set_Mstatus_SPIE ((zr_ref, zv) : ((ZMstatus.zMstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mstatus_SPIE (zr, zv))))

and z_get_Sstatus_SPIE (zv : (ZSstatus.zSstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (5)), (Big_int.of_int (5))))

and z_set_Sstatus_SPIE ((zr_ref, zv) : ((ZSstatus.zSstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sstatus_SPIE (zr, zv))))

and z_get_Mstatus_SPP (zv : (ZMstatus.zMstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (8)), (Big_int.of_int (8))))

and z_update_Mstatus_SPP ((zv, zx) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  {zv with ZMstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (8)), (Big_int.of_int (8)), zx)})

and z_update_Sstatus_SPP ((zv, zx) : (ZSstatus.zSstatus * (bit) list)) : ZSstatus.zSstatus = sail_call (fun r ->
  {zv with ZSstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (8)), (Big_int.of_int (8)), zx)})

and z_set_Mstatus_SPP ((zr_ref, zv) : ((ZMstatus.zMstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mstatus_SPP (zr, zv))))

and z_get_Sstatus_SPP (zv : (ZSstatus.zSstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (8)), (Big_int.of_int (8))))

and z_set_Sstatus_SPP ((zr_ref, zv) : ((ZSstatus.zSstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sstatus_SPP (zr, zv))))

and z_get_Mstatus_SUM (zv : (ZMstatus.zMstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (18)), (Big_int.of_int (18))))

and z_update_Mstatus_SUM ((zv, zx) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  {zv with ZMstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (18)), (Big_int.of_int (18)), zx)})

and z_update_Sstatus_SUM ((zv, zx) : (ZSstatus.zSstatus * (bit) list)) : ZSstatus.zSstatus = sail_call (fun r ->
  {zv with ZSstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (18)), (Big_int.of_int (18)), zx)})

and z_set_Mstatus_SUM ((zr_ref, zv) : ((ZMstatus.zMstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mstatus_SUM (zr, zv))))

and z_get_Sstatus_SUM (zv : (ZSstatus.zSstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (18)), (Big_int.of_int (18))))

and z_set_Sstatus_SUM ((zr_ref, zv) : ((ZSstatus.zSstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sstatus_SUM (zr, zv))))

and z_get_Mstatus_TSR (zv : (ZMstatus.zMstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (22)), (Big_int.of_int (22))))

and z_update_Mstatus_TSR ((zv, zx) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  {zv with ZMstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (22)), (Big_int.of_int (22)), zx)})

and z_set_Mstatus_TSR ((zr_ref, zv) : ((ZMstatus.zMstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mstatus_TSR (zr, zv))))

and z_get_Mstatus_TVM (zv : (ZMstatus.zMstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (20)), (Big_int.of_int (20))))

and z_update_Mstatus_TVM ((zv, zx) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  {zv with ZMstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (20)), (Big_int.of_int (20)), zx)})

and z_set_Mstatus_TVM ((zr_ref, zv) : ((ZMstatus.zMstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mstatus_TVM (zr, zv))))

and z_get_Mstatus_TW (zv : (ZMstatus.zMstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (21)), (Big_int.of_int (21))))

and z_update_Mstatus_TW ((zv, zx) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  {zv with ZMstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (21)), (Big_int.of_int (21)), zx)})

and z_set_Mstatus_TW ((zr_ref, zv) : ((ZMstatus.zMstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mstatus_TW (zr, zv))))

and z_get_Mstatus_UIE (zv : (ZMstatus.zMstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), Big_int.zero, Big_int.zero))

and z_update_Mstatus_UIE ((zv, zx) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  {zv with ZMstatus.zbits = update_subrange ((zv.zbits), Big_int.zero, Big_int.zero, zx)})

and z_update_Sstatus_UIE ((zv, zx) : (ZSstatus.zSstatus * (bit) list)) : ZSstatus.zSstatus = sail_call (fun r ->
  {zv with ZSstatus.zbits = update_subrange ((zv.zbits), Big_int.zero, Big_int.zero, zx)})

and z_update_Ustatus_UIE ((zv, zx) : (ZUstatus.zUstatus * (bit) list)) : ZUstatus.zUstatus = sail_call (fun r ->
  {zv with ZUstatus.zbits = update_subrange ((zv.zbits), Big_int.zero, Big_int.zero, zx)})

and z_set_Mstatus_UIE ((zr_ref, zv) : ((ZMstatus.zMstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mstatus_UIE (zr, zv))))

and z_get_Sstatus_UIE (zv : (ZSstatus.zSstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), Big_int.zero, Big_int.zero))

and z_get_Ustatus_UIE (zv : (ZUstatus.zUstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), Big_int.zero, Big_int.zero))

and z_set_Sstatus_UIE ((zr_ref, zv) : ((ZSstatus.zSstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sstatus_UIE (zr, zv))))

and z_set_Ustatus_UIE ((zr_ref, zv) : ((ZUstatus.zUstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Ustatus_UIE (zr, zv))))

and z_get_Mstatus_UPIE (zv : (ZMstatus.zMstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (4))))

and z_update_Mstatus_UPIE ((zv, zx) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  {zv with ZMstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (4)), zx)})

and z_update_Sstatus_UPIE ((zv, zx) : (ZSstatus.zSstatus * (bit) list)) : ZSstatus.zSstatus = sail_call (fun r ->
  {zv with ZSstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (4)), zx)})

and z_update_Ustatus_UPIE ((zv, zx) : (ZUstatus.zUstatus * (bit) list)) : ZUstatus.zUstatus = sail_call (fun r ->
  {zv with ZUstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (4)), zx)})

and z_set_Mstatus_UPIE ((zr_ref, zv) : ((ZMstatus.zMstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mstatus_UPIE (zr, zv))))

and z_get_Sstatus_UPIE (zv : (ZSstatus.zSstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (4))))

and z_get_Ustatus_UPIE (zv : (ZUstatus.zUstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (4))))

and z_set_Sstatus_UPIE ((zr_ref, zv) : ((ZSstatus.zSstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sstatus_UPIE (zr, zv))))

and z_set_Ustatus_UPIE ((zr_ref, zv) : ((ZUstatus.zUstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Ustatus_UPIE (zr, zv))))

and z_get_Mstatus_VS (zv : (ZMstatus.zMstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (10)), (Big_int.of_int (9))))

and z_update_Mstatus_VS ((zv, zx) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  {zv with ZMstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (10)), (Big_int.of_int (9)), zx)})

and z_update_Sstatus_VS ((zv, zx) : (ZSstatus.zSstatus * (bit) list)) : ZSstatus.zSstatus = sail_call (fun r ->
  {zv with ZSstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (10)), (Big_int.of_int (9)), zx)})

and z_set_Mstatus_VS ((zr_ref, zv) : ((ZMstatus.zMstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mstatus_VS (zr, zv))))

and z_get_Sstatus_VS (zv : (ZSstatus.zSstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (10)), (Big_int.of_int (9))))

and z_set_Sstatus_VS ((zr_ref, zv) : ((ZSstatus.zSstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sstatus_VS (zr, zv))))

and z_get_Mstatus_XS (zv : (ZMstatus.zMstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (16)), (Big_int.of_int (15))))

and z_update_Mstatus_XS ((zv, zx) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  {zv with ZMstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (16)), (Big_int.of_int (15)), zx)})

and z_update_Sstatus_XS ((zv, zx) : (ZSstatus.zSstatus * (bit) list)) : ZSstatus.zSstatus = sail_call (fun r ->
  {zv with ZSstatus.zbits = update_subrange ((zv.zbits), (Big_int.of_int (16)), (Big_int.of_int (15)), zx)})

and z_set_Mstatus_XS ((zr_ref, zv) : ((ZMstatus.zMstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mstatus_XS (zr, zv))))

and z_get_Sstatus_XS (zv : (ZSstatus.zSstatus)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (16)), (Big_int.of_int (15))))

and z_set_Sstatus_XS ((zr_ref, zv) : ((ZSstatus.zSstatus) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sstatus_XS (zr, zv))))

let zmstatus : (ZMstatus.zMstatus) ref = ref (zundefined_Mstatus ());;

let rec zeffectivePrivilege ((zt, zm, zpriv) : ((zext_access_type) zAccessType * ZMstatus.zMstatus * zPrivilege)) : zPrivilege = sail_call (fun r ->
  (if ((zneq_anything (zt, (ZExecute ()))) && (eq_list ((z_get_Mstatus_MPRV zm), [B1]))) then (zprivLevel_of_bits (z_get_Mstatus_MPP zm)) else zpriv))

and zget_mstatus_SXL (zm : (ZMstatus.zMstatus)) : (bit) list = sail_call (fun r ->
  (if (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) then (zarch_to_bits ZRV32) else (subrange ((zm.zbits), (Big_int.of_int (35)), (Big_int.of_int (34))))))

and zset_mstatus_SXL ((zm, za) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  (if (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) then zm else (let zm = (update_subrange ((zm.zbits), (Big_int.of_int (35)), (Big_int.of_int (34)), za)) in
  zMk_Mstatus zm)))

and zget_mstatus_UXL (zm : (ZMstatus.zMstatus)) : (bit) list = sail_call (fun r ->
  (if (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) then (zarch_to_bits ZRV32) else (subrange ((zm.zbits), (Big_int.of_int (33)), (Big_int.of_int (32))))))

and zset_mstatus_UXL ((zm, za) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  (if (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) then zm else (let zm = (update_subrange ((zm.zbits), (Big_int.of_int (33)), (Big_int.of_int (32)), za)) in
  zMk_Mstatus zm)))

and zlegalizze_mstatus ((zo, zv) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  let zm = (zMk_Mstatus (zzzero_extend ((Big_int.of_int (32)), (append ((subrange (zv, (Big_int.of_int (22)), (Big_int.of_int (7)))), (append ([B0], (append ((subrange (zv, (Big_int.of_int (5)), (Big_int.of_int (3)))), (append ([B0], (subrange (zv, (Big_int.of_int (1)), Big_int.zero))))))))))))) in
  let zm = (z_update_Mstatus_XS (zm, (zextStatus_to_bits ZOff))) in
  let zm = ((if (Platform.enable_zfinx ()) then (z_update_Mstatus_FS (zm, (zextStatus_to_bits ZOff))) else zm)) in
  let zdirty = (((fun (x, y) -> x = y) ((zextStatus_of_bits (z_get_Mstatus_FS zm)), ZDirty)) || (((fun (x, y) -> x = y) ((zextStatus_of_bits (z_get_Mstatus_XS zm)), ZDirty)) || ((fun (x, y) -> x = y) ((zextStatus_of_bits (z_get_Mstatus_VS zm)), ZDirty)))) in
  let zm = (z_update_Mstatus_SD (zm, (zbool_to_bits zdirty))) in
  let zm = (zset_mstatus_SXL (zm, (zget_mstatus_SXL zo))) in
  let zm = (zset_mstatus_UXL (zm, (zget_mstatus_UXL zo))) in
  let zm = ((if (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) then (zMk_Mstatus (update_subrange ((zm.zbits), (Big_int.of_int (37)), (Big_int.of_int (36)), [B0; B0]))) else zm)) in
  let zm = ((if (znot (zhaveNExt ())) then (let zm = (z_update_Mstatus_UPIE (zm, [B0])) in
  let zm = (z_update_Mstatus_UIE (zm, [B0])) in
  zm) else zm)) in
  (if (znot (zhaveUsrMode ())) then (let zm = (z_update_Mstatus_MPRV (zm, [B0])) in
  zm) else zm))

and zcur_Architecture (() : (unit)) : zArchitecture = sail_call (fun r ->
  let za = (begin
    match !zcur_privilege with
    | ZMachine -> z_get_Misa_MXL !zmisa
    | ZSupervisor -> zget_mstatus_SXL !zmstatus
    | ZUser -> zget_mstatus_UXL !zmstatus
  end) in
  begin
    match (zarchitecture za) with
    | ZSome (za) -> za
    | ZNone (()) ->
      zinternal_error ("sail-riscv/model/riscv_sys_regs.sail", (Big_int.of_int (296)), "Invalid current architecture")
  end)

and zin32BitMode (() : (unit)) : bool = sail_call (fun r ->
  (fun (x, y) -> x = y) ((zcur_Architecture ()), ZRV32))

and zhaveFExt (() : (unit)) : bool = sail_call (fun r ->
  (eq_list ((z_get_Misa_F !zmisa), [B1])) && (zneq_bits ((z_get_Mstatus_FS !zmstatus), [B0; B0])))

and zhaveDExt (() : (unit)) : bool = sail_call (fun r ->
  (eq_list ((z_get_Misa_D !zmisa), [B1])) && (zneq_bits ((z_get_Mstatus_FS !zmstatus), [B0; B0])))

and zhaveZfh (() : (unit)) : bool = sail_call (fun r ->
  (eq_list ((z_get_Misa_F !zmisa), [B1])) && (zneq_bits ((z_get_Mstatus_FS !zmstatus), [B0; B0])))

and zhaveVExt (() : (unit)) : bool = sail_call (fun r ->
  (eq_list ((z_get_Misa_V !zmisa), [B1])) && (zneq_bits ((z_get_Mstatus_VS !zmstatus), [B0; B0])))

and zhaveZhinx (() : (unit)) : bool = sail_call (fun r ->
  Platform.enable_zfinx ())

and zhaveZfinx (() : (unit)) : bool = sail_call (fun r ->
  Platform.enable_zfinx ())

and zhaveZdinx (() : (unit)) : bool = sail_call (fun r ->
  (Platform.enable_zfinx ()) && (gteq ((Big_int.of_int (64)), (Big_int.of_int (64)))))

and zundefined_Minterrupts (() : (unit)) : ZMinterrupts.zMinterrupts = sail_call (fun r ->
  {ZMinterrupts.zbits = undefined_bitvector (Big_int.of_int (32))})

and zMk_Minterrupts (zv : ((bit) list)) : ZMinterrupts.zMinterrupts = sail_call (fun r ->
  {ZMinterrupts.zbits = zv})

and z_get_Minterrupts_MEI (zv : (ZMinterrupts.zMinterrupts)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (11)), (Big_int.of_int (11))))

and z_update_Minterrupts_MEI ((zv, zx) : (ZMinterrupts.zMinterrupts * (bit) list)) : ZMinterrupts.zMinterrupts = sail_call (fun r ->
  {zv with ZMinterrupts.zbits = update_subrange ((zv.zbits), (Big_int.of_int (11)), (Big_int.of_int (11)), zx)})

and z_set_Minterrupts_MEI ((zr_ref, zv) : ((ZMinterrupts.zMinterrupts) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Minterrupts_MEI (zr, zv))))

and z_get_Minterrupts_MSI (zv : (ZMinterrupts.zMinterrupts)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (3)), (Big_int.of_int (3))))

and z_update_Minterrupts_MSI ((zv, zx) : (ZMinterrupts.zMinterrupts * (bit) list)) : ZMinterrupts.zMinterrupts = sail_call (fun r ->
  {zv with ZMinterrupts.zbits = update_subrange ((zv.zbits), (Big_int.of_int (3)), (Big_int.of_int (3)), zx)})

and z_set_Minterrupts_MSI ((zr_ref, zv) : ((ZMinterrupts.zMinterrupts) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Minterrupts_MSI (zr, zv))))

and z_get_Minterrupts_MTI (zv : (ZMinterrupts.zMinterrupts)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (7)), (Big_int.of_int (7))))

and z_update_Minterrupts_MTI ((zv, zx) : (ZMinterrupts.zMinterrupts * (bit) list)) : ZMinterrupts.zMinterrupts = sail_call (fun r ->
  {zv with ZMinterrupts.zbits = update_subrange ((zv.zbits), (Big_int.of_int (7)), (Big_int.of_int (7)), zx)})

and z_set_Minterrupts_MTI ((zr_ref, zv) : ((ZMinterrupts.zMinterrupts) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Minterrupts_MTI (zr, zv))))

and z_get_Minterrupts_SEI (zv : (ZMinterrupts.zMinterrupts)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (9)), (Big_int.of_int (9))))

and z_update_Minterrupts_SEI ((zv, zx) : (ZMinterrupts.zMinterrupts * (bit) list)) : ZMinterrupts.zMinterrupts = sail_call (fun r ->
  {zv with ZMinterrupts.zbits = update_subrange ((zv.zbits), (Big_int.of_int (9)), (Big_int.of_int (9)), zx)})

and z_update_Sinterrupts_SEI ((zv, zx) : (ZSinterrupts.zSinterrupts * (bit) list)) : ZSinterrupts.zSinterrupts = sail_call (fun r ->
  {zv with ZSinterrupts.zbits = update_subrange ((zv.zbits), (Big_int.of_int (9)), (Big_int.of_int (9)), zx)})

and z_set_Minterrupts_SEI ((zr_ref, zv) : ((ZMinterrupts.zMinterrupts) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Minterrupts_SEI (zr, zv))))

and z_get_Sinterrupts_SEI (zv : (ZSinterrupts.zSinterrupts)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (9)), (Big_int.of_int (9))))

and z_set_Sinterrupts_SEI ((zr_ref, zv) : ((ZSinterrupts.zSinterrupts) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sinterrupts_SEI (zr, zv))))

and z_get_Minterrupts_SSI (zv : (ZMinterrupts.zMinterrupts)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (1)), (Big_int.of_int (1))))

and z_update_Minterrupts_SSI ((zv, zx) : (ZMinterrupts.zMinterrupts * (bit) list)) : ZMinterrupts.zMinterrupts = sail_call (fun r ->
  {zv with ZMinterrupts.zbits = update_subrange ((zv.zbits), (Big_int.of_int (1)), (Big_int.of_int (1)), zx)})

and z_update_Sinterrupts_SSI ((zv, zx) : (ZSinterrupts.zSinterrupts * (bit) list)) : ZSinterrupts.zSinterrupts = sail_call (fun r ->
  {zv with ZSinterrupts.zbits = update_subrange ((zv.zbits), (Big_int.of_int (1)), (Big_int.of_int (1)), zx)})

and z_set_Minterrupts_SSI ((zr_ref, zv) : ((ZMinterrupts.zMinterrupts) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Minterrupts_SSI (zr, zv))))

and z_get_Sinterrupts_SSI (zv : (ZSinterrupts.zSinterrupts)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (1)), (Big_int.of_int (1))))

and z_set_Sinterrupts_SSI ((zr_ref, zv) : ((ZSinterrupts.zSinterrupts) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sinterrupts_SSI (zr, zv))))

and z_get_Minterrupts_STI (zv : (ZMinterrupts.zMinterrupts)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (5)), (Big_int.of_int (5))))

and z_update_Minterrupts_STI ((zv, zx) : (ZMinterrupts.zMinterrupts * (bit) list)) : ZMinterrupts.zMinterrupts = sail_call (fun r ->
  {zv with ZMinterrupts.zbits = update_subrange ((zv.zbits), (Big_int.of_int (5)), (Big_int.of_int (5)), zx)})

and z_update_Sinterrupts_STI ((zv, zx) : (ZSinterrupts.zSinterrupts * (bit) list)) : ZSinterrupts.zSinterrupts = sail_call (fun r ->
  {zv with ZSinterrupts.zbits = update_subrange ((zv.zbits), (Big_int.of_int (5)), (Big_int.of_int (5)), zx)})

and z_set_Minterrupts_STI ((zr_ref, zv) : ((ZMinterrupts.zMinterrupts) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Minterrupts_STI (zr, zv))))

and z_get_Sinterrupts_STI (zv : (ZSinterrupts.zSinterrupts)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (5)), (Big_int.of_int (5))))

and z_set_Sinterrupts_STI ((zr_ref, zv) : ((ZSinterrupts.zSinterrupts) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sinterrupts_STI (zr, zv))))

and z_get_Minterrupts_UEI (zv : (ZMinterrupts.zMinterrupts)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (8)), (Big_int.of_int (8))))

and z_update_Minterrupts_UEI ((zv, zx) : (ZMinterrupts.zMinterrupts * (bit) list)) : ZMinterrupts.zMinterrupts = sail_call (fun r ->
  {zv with ZMinterrupts.zbits = update_subrange ((zv.zbits), (Big_int.of_int (8)), (Big_int.of_int (8)), zx)})

and z_update_Sinterrupts_UEI ((zv, zx) : (ZSinterrupts.zSinterrupts * (bit) list)) : ZSinterrupts.zSinterrupts = sail_call (fun r ->
  {zv with ZSinterrupts.zbits = update_subrange ((zv.zbits), (Big_int.of_int (8)), (Big_int.of_int (8)), zx)})

and z_update_Uinterrupts_UEI ((zv, zx) : (ZUinterrupts.zUinterrupts * (bit) list)) : ZUinterrupts.zUinterrupts = sail_call (fun r ->
  {zv with ZUinterrupts.zbits = update_subrange ((zv.zbits), (Big_int.of_int (8)), (Big_int.of_int (8)), zx)})

and z_set_Minterrupts_UEI ((zr_ref, zv) : ((ZMinterrupts.zMinterrupts) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Minterrupts_UEI (zr, zv))))

and z_get_Sinterrupts_UEI (zv : (ZSinterrupts.zSinterrupts)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (8)), (Big_int.of_int (8))))

and z_get_Uinterrupts_UEI (zv : (ZUinterrupts.zUinterrupts)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (8)), (Big_int.of_int (8))))

and z_set_Sinterrupts_UEI ((zr_ref, zv) : ((ZSinterrupts.zSinterrupts) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sinterrupts_UEI (zr, zv))))

and z_set_Uinterrupts_UEI ((zr_ref, zv) : ((ZUinterrupts.zUinterrupts) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Uinterrupts_UEI (zr, zv))))

and z_get_Minterrupts_USI (zv : (ZMinterrupts.zMinterrupts)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), Big_int.zero, Big_int.zero))

and z_update_Minterrupts_USI ((zv, zx) : (ZMinterrupts.zMinterrupts * (bit) list)) : ZMinterrupts.zMinterrupts = sail_call (fun r ->
  {zv with ZMinterrupts.zbits = update_subrange ((zv.zbits), Big_int.zero, Big_int.zero, zx)})

and z_update_Sinterrupts_USI ((zv, zx) : (ZSinterrupts.zSinterrupts * (bit) list)) : ZSinterrupts.zSinterrupts = sail_call (fun r ->
  {zv with ZSinterrupts.zbits = update_subrange ((zv.zbits), Big_int.zero, Big_int.zero, zx)})

and z_update_Uinterrupts_USI ((zv, zx) : (ZUinterrupts.zUinterrupts * (bit) list)) : ZUinterrupts.zUinterrupts = sail_call (fun r ->
  {zv with ZUinterrupts.zbits = update_subrange ((zv.zbits), Big_int.zero, Big_int.zero, zx)})

and z_set_Minterrupts_USI ((zr_ref, zv) : ((ZMinterrupts.zMinterrupts) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Minterrupts_USI (zr, zv))))

and z_get_Sinterrupts_USI (zv : (ZSinterrupts.zSinterrupts)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), Big_int.zero, Big_int.zero))

and z_get_Uinterrupts_USI (zv : (ZUinterrupts.zUinterrupts)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), Big_int.zero, Big_int.zero))

and z_set_Sinterrupts_USI ((zr_ref, zv) : ((ZSinterrupts.zSinterrupts) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sinterrupts_USI (zr, zv))))

and z_set_Uinterrupts_USI ((zr_ref, zv) : ((ZUinterrupts.zUinterrupts) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Uinterrupts_USI (zr, zv))))

and z_get_Minterrupts_UTI (zv : (ZMinterrupts.zMinterrupts)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (4))))

and z_update_Minterrupts_UTI ((zv, zx) : (ZMinterrupts.zMinterrupts * (bit) list)) : ZMinterrupts.zMinterrupts = sail_call (fun r ->
  {zv with ZMinterrupts.zbits = update_subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (4)), zx)})

and z_update_Sinterrupts_UTI ((zv, zx) : (ZSinterrupts.zSinterrupts * (bit) list)) : ZSinterrupts.zSinterrupts = sail_call (fun r ->
  {zv with ZSinterrupts.zbits = update_subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (4)), zx)})

and z_update_Uinterrupts_UTI ((zv, zx) : (ZUinterrupts.zUinterrupts * (bit) list)) : ZUinterrupts.zUinterrupts = sail_call (fun r ->
  {zv with ZUinterrupts.zbits = update_subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (4)), zx)})

and z_set_Minterrupts_UTI ((zr_ref, zv) : ((ZMinterrupts.zMinterrupts) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Minterrupts_UTI (zr, zv))))

and z_get_Sinterrupts_UTI (zv : (ZSinterrupts.zSinterrupts)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (4))))

and z_get_Uinterrupts_UTI (zv : (ZUinterrupts.zUinterrupts)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (4))))

and z_set_Sinterrupts_UTI ((zr_ref, zv) : ((ZSinterrupts.zSinterrupts) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sinterrupts_UTI (zr, zv))))

and z_set_Uinterrupts_UTI ((zr_ref, zv) : ((ZUinterrupts.zUinterrupts) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Uinterrupts_UTI (zr, zv))))

let zmip : (ZMinterrupts.zMinterrupts) ref = ref (zundefined_Minterrupts ());;

let zmie : (ZMinterrupts.zMinterrupts) ref = ref (zundefined_Minterrupts ());;

let zmideleg : (ZMinterrupts.zMinterrupts) ref = ref (zundefined_Minterrupts ());;

let rec zlegalizze_mip ((zo, zv) : (ZMinterrupts.zMinterrupts * (bit) list)) : ZMinterrupts.zMinterrupts = sail_call (fun r ->
  let zv = (zMk_Minterrupts zv) in
  let zm = (z_update_Minterrupts_SSI ((z_update_Minterrupts_STI ((z_update_Minterrupts_SEI (zo, (z_get_Minterrupts_SEI zv))), (z_get_Minterrupts_STI zv))), (z_get_Minterrupts_SSI zv))) in
  (if ((zhaveUsrMode ()) && (zhaveNExt ())) then (z_update_Minterrupts_USI ((z_update_Minterrupts_UTI ((z_update_Minterrupts_UEI (zm, (z_get_Minterrupts_UEI zv))), (z_get_Minterrupts_UTI zv))), (z_get_Minterrupts_USI zv))) else zm))

and zlegalizze_mie ((zo, zv) : (ZMinterrupts.zMinterrupts * (bit) list)) : ZMinterrupts.zMinterrupts = sail_call (fun r ->
  let zv = (zMk_Minterrupts zv) in
  let zm = (z_update_Minterrupts_SSI ((z_update_Minterrupts_STI ((z_update_Minterrupts_SEI ((z_update_Minterrupts_MSI ((z_update_Minterrupts_MTI ((z_update_Minterrupts_MEI (zo, (z_get_Minterrupts_MEI zv))), (z_get_Minterrupts_MTI zv))), (z_get_Minterrupts_MSI zv))), (z_get_Minterrupts_SEI zv))), (z_get_Minterrupts_STI zv))), (z_get_Minterrupts_SSI zv))) in
  (if ((zhaveUsrMode ()) && (zhaveNExt ())) then (z_update_Minterrupts_USI ((z_update_Minterrupts_UTI ((z_update_Minterrupts_UEI (zm, (z_get_Minterrupts_UEI zv))), (z_get_Minterrupts_UTI zv))), (z_get_Minterrupts_USI zv))) else zm))

and zlegalizze_mideleg ((zo, zv) : (ZMinterrupts.zMinterrupts * (bit) list)) : ZMinterrupts.zMinterrupts = sail_call (fun r ->
  z_update_Minterrupts_MSI ((z_update_Minterrupts_MTI ((z_update_Minterrupts_MEI ((zMk_Minterrupts zv), [B0])), [B0])), [B0]))

and zundefined_Medeleg (() : (unit)) : ZMedeleg.zMedeleg = sail_call (fun r ->
  {ZMedeleg.zbits = undefined_bitvector (Big_int.of_int (32))})

and zMk_Medeleg (zv : ((bit) list)) : ZMedeleg.zMedeleg = sail_call (fun r ->
  {ZMedeleg.zbits = zv})

and z_get_Medeleg_Breakpoint (zv : (ZMedeleg.zMedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (3)), (Big_int.of_int (3))))

and z_update_Medeleg_Breakpoint ((zv, zx) : (ZMedeleg.zMedeleg * (bit) list)) : ZMedeleg.zMedeleg = sail_call (fun r ->
  {zv with ZMedeleg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (3)), (Big_int.of_int (3)), zx)})

and z_update_Sedeleg_Breakpoint ((zv, zx) : (ZSedeleg.zSedeleg * (bit) list)) : ZSedeleg.zSedeleg = sail_call (fun r ->
  {zv with ZSedeleg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (3)), (Big_int.of_int (3)), zx)})

and z_set_Medeleg_Breakpoint ((zr_ref, zv) : ((ZMedeleg.zMedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Medeleg_Breakpoint (zr, zv))))

and z_get_Sedeleg_Breakpoint (zv : (ZSedeleg.zSedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (3)), (Big_int.of_int (3))))

and z_set_Sedeleg_Breakpoint ((zr_ref, zv) : ((ZSedeleg.zSedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sedeleg_Breakpoint (zr, zv))))

and z_get_Medeleg_Fetch_Access_Fault (zv : (ZMedeleg.zMedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (1)), (Big_int.of_int (1))))

and z_update_Medeleg_Fetch_Access_Fault ((zv, zx) : (ZMedeleg.zMedeleg * (bit) list)) : ZMedeleg.zMedeleg = sail_call (fun r ->
  {zv with ZMedeleg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (1)), (Big_int.of_int (1)), zx)})

and z_update_Sedeleg_Fetch_Access_Fault ((zv, zx) : (ZSedeleg.zSedeleg * (bit) list)) : ZSedeleg.zSedeleg = sail_call (fun r ->
  {zv with ZSedeleg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (1)), (Big_int.of_int (1)), zx)})

and z_set_Medeleg_Fetch_Access_Fault ((zr_ref, zv) : ((ZMedeleg.zMedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Medeleg_Fetch_Access_Fault (zr, zv))))

and z_get_Sedeleg_Fetch_Access_Fault (zv : (ZSedeleg.zSedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (1)), (Big_int.of_int (1))))

and z_set_Sedeleg_Fetch_Access_Fault ((zr_ref, zv) : ((ZSedeleg.zSedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sedeleg_Fetch_Access_Fault (zr, zv))))

and z_get_Medeleg_Fetch_Addr_Align (zv : (ZMedeleg.zMedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), Big_int.zero, Big_int.zero))

and z_update_Medeleg_Fetch_Addr_Align ((zv, zx) : (ZMedeleg.zMedeleg * (bit) list)) : ZMedeleg.zMedeleg = sail_call (fun r ->
  {zv with ZMedeleg.zbits = update_subrange ((zv.zbits), Big_int.zero, Big_int.zero, zx)})

and z_update_Sedeleg_Fetch_Addr_Align ((zv, zx) : (ZSedeleg.zSedeleg * (bit) list)) : ZSedeleg.zSedeleg = sail_call (fun r ->
  {zv with ZSedeleg.zbits = update_subrange ((zv.zbits), Big_int.zero, Big_int.zero, zx)})

and z_set_Medeleg_Fetch_Addr_Align ((zr_ref, zv) : ((ZMedeleg.zMedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Medeleg_Fetch_Addr_Align (zr, zv))))

and z_get_Sedeleg_Fetch_Addr_Align (zv : (ZSedeleg.zSedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), Big_int.zero, Big_int.zero))

and z_set_Sedeleg_Fetch_Addr_Align ((zr_ref, zv) : ((ZSedeleg.zSedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sedeleg_Fetch_Addr_Align (zr, zv))))

and z_get_Medeleg_Fetch_Page_Fault (zv : (ZMedeleg.zMedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (12)), (Big_int.of_int (12))))

and z_update_Medeleg_Fetch_Page_Fault ((zv, zx) : (ZMedeleg.zMedeleg * (bit) list)) : ZMedeleg.zMedeleg = sail_call (fun r ->
  {zv with ZMedeleg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (12)), (Big_int.of_int (12)), zx)})

and z_set_Medeleg_Fetch_Page_Fault ((zr_ref, zv) : ((ZMedeleg.zMedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Medeleg_Fetch_Page_Fault (zr, zv))))

and z_get_Medeleg_Illegal_Instr (zv : (ZMedeleg.zMedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (2)), (Big_int.of_int (2))))

and z_update_Medeleg_Illegal_Instr ((zv, zx) : (ZMedeleg.zMedeleg * (bit) list)) : ZMedeleg.zMedeleg = sail_call (fun r ->
  {zv with ZMedeleg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (2)), (Big_int.of_int (2)), zx)})

and z_update_Sedeleg_Illegal_Instr ((zv, zx) : (ZSedeleg.zSedeleg * (bit) list)) : ZSedeleg.zSedeleg = sail_call (fun r ->
  {zv with ZSedeleg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (2)), (Big_int.of_int (2)), zx)})

and z_set_Medeleg_Illegal_Instr ((zr_ref, zv) : ((ZMedeleg.zMedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Medeleg_Illegal_Instr (zr, zv))))

and z_get_Sedeleg_Illegal_Instr (zv : (ZSedeleg.zSedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (2)), (Big_int.of_int (2))))

and z_set_Sedeleg_Illegal_Instr ((zr_ref, zv) : ((ZSedeleg.zSedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sedeleg_Illegal_Instr (zr, zv))))

and z_get_Medeleg_Load_Access_Fault (zv : (ZMedeleg.zMedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (5)), (Big_int.of_int (5))))

and z_update_Medeleg_Load_Access_Fault ((zv, zx) : (ZMedeleg.zMedeleg * (bit) list)) : ZMedeleg.zMedeleg = sail_call (fun r ->
  {zv with ZMedeleg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (5)), (Big_int.of_int (5)), zx)})

and z_update_Sedeleg_Load_Access_Fault ((zv, zx) : (ZSedeleg.zSedeleg * (bit) list)) : ZSedeleg.zSedeleg = sail_call (fun r ->
  {zv with ZSedeleg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (5)), (Big_int.of_int (5)), zx)})

and z_set_Medeleg_Load_Access_Fault ((zr_ref, zv) : ((ZMedeleg.zMedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Medeleg_Load_Access_Fault (zr, zv))))

and z_get_Sedeleg_Load_Access_Fault (zv : (ZSedeleg.zSedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (5)), (Big_int.of_int (5))))

and z_set_Sedeleg_Load_Access_Fault ((zr_ref, zv) : ((ZSedeleg.zSedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sedeleg_Load_Access_Fault (zr, zv))))

and z_get_Medeleg_Load_Addr_Align (zv : (ZMedeleg.zMedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (4))))

and z_update_Medeleg_Load_Addr_Align ((zv, zx) : (ZMedeleg.zMedeleg * (bit) list)) : ZMedeleg.zMedeleg = sail_call (fun r ->
  {zv with ZMedeleg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (4)), zx)})

and z_update_Sedeleg_Load_Addr_Align ((zv, zx) : (ZSedeleg.zSedeleg * (bit) list)) : ZSedeleg.zSedeleg = sail_call (fun r ->
  {zv with ZSedeleg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (4)), zx)})

and z_set_Medeleg_Load_Addr_Align ((zr_ref, zv) : ((ZMedeleg.zMedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Medeleg_Load_Addr_Align (zr, zv))))

and z_get_Sedeleg_Load_Addr_Align (zv : (ZSedeleg.zSedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (4)), (Big_int.of_int (4))))

and z_set_Sedeleg_Load_Addr_Align ((zr_ref, zv) : ((ZSedeleg.zSedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sedeleg_Load_Addr_Align (zr, zv))))

and z_get_Medeleg_Load_Page_Fault (zv : (ZMedeleg.zMedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (13)), (Big_int.of_int (13))))

and z_update_Medeleg_Load_Page_Fault ((zv, zx) : (ZMedeleg.zMedeleg * (bit) list)) : ZMedeleg.zMedeleg = sail_call (fun r ->
  {zv with ZMedeleg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (13)), (Big_int.of_int (13)), zx)})

and z_set_Medeleg_Load_Page_Fault ((zr_ref, zv) : ((ZMedeleg.zMedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Medeleg_Load_Page_Fault (zr, zv))))

and z_get_Medeleg_MEnvCall (zv : (ZMedeleg.zMedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (10)), (Big_int.of_int (10))))

and z_update_Medeleg_MEnvCall ((zv, zx) : (ZMedeleg.zMedeleg * (bit) list)) : ZMedeleg.zMedeleg = sail_call (fun r ->
  {zv with ZMedeleg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (10)), (Big_int.of_int (10)), zx)})

and z_set_Medeleg_MEnvCall ((zr_ref, zv) : ((ZMedeleg.zMedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Medeleg_MEnvCall (zr, zv))))

and z_get_Medeleg_SAMO_Access_Fault (zv : (ZMedeleg.zMedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (7)), (Big_int.of_int (7))))

and z_update_Medeleg_SAMO_Access_Fault ((zv, zx) : (ZMedeleg.zMedeleg * (bit) list)) : ZMedeleg.zMedeleg = sail_call (fun r ->
  {zv with ZMedeleg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (7)), (Big_int.of_int (7)), zx)})

and z_update_Sedeleg_SAMO_Access_Fault ((zv, zx) : (ZSedeleg.zSedeleg * (bit) list)) : ZSedeleg.zSedeleg = sail_call (fun r ->
  {zv with ZSedeleg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (7)), (Big_int.of_int (7)), zx)})

and z_set_Medeleg_SAMO_Access_Fault ((zr_ref, zv) : ((ZMedeleg.zMedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Medeleg_SAMO_Access_Fault (zr, zv))))

and z_get_Sedeleg_SAMO_Access_Fault (zv : (ZSedeleg.zSedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (7)), (Big_int.of_int (7))))

and z_set_Sedeleg_SAMO_Access_Fault ((zr_ref, zv) : ((ZSedeleg.zSedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sedeleg_SAMO_Access_Fault (zr, zv))))

and z_get_Medeleg_SAMO_Addr_Align (zv : (ZMedeleg.zMedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (6)), (Big_int.of_int (6))))

and z_update_Medeleg_SAMO_Addr_Align ((zv, zx) : (ZMedeleg.zMedeleg * (bit) list)) : ZMedeleg.zMedeleg = sail_call (fun r ->
  {zv with ZMedeleg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (6)), (Big_int.of_int (6)), zx)})

and z_update_Sedeleg_SAMO_Addr_Align ((zv, zx) : (ZSedeleg.zSedeleg * (bit) list)) : ZSedeleg.zSedeleg = sail_call (fun r ->
  {zv with ZSedeleg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (6)), (Big_int.of_int (6)), zx)})

and z_set_Medeleg_SAMO_Addr_Align ((zr_ref, zv) : ((ZMedeleg.zMedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Medeleg_SAMO_Addr_Align (zr, zv))))

and z_get_Sedeleg_SAMO_Addr_Align (zv : (ZSedeleg.zSedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (6)), (Big_int.of_int (6))))

and z_set_Sedeleg_SAMO_Addr_Align ((zr_ref, zv) : ((ZSedeleg.zSedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sedeleg_SAMO_Addr_Align (zr, zv))))

and z_get_Medeleg_SAMO_Page_Fault (zv : (ZMedeleg.zMedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (15)), (Big_int.of_int (15))))

and z_update_Medeleg_SAMO_Page_Fault ((zv, zx) : (ZMedeleg.zMedeleg * (bit) list)) : ZMedeleg.zMedeleg = sail_call (fun r ->
  {zv with ZMedeleg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (15)), (Big_int.of_int (15)), zx)})

and z_set_Medeleg_SAMO_Page_Fault ((zr_ref, zv) : ((ZMedeleg.zMedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Medeleg_SAMO_Page_Fault (zr, zv))))

and z_get_Medeleg_SEnvCall (zv : (ZMedeleg.zMedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (9)), (Big_int.of_int (9))))

and z_update_Medeleg_SEnvCall ((zv, zx) : (ZMedeleg.zMedeleg * (bit) list)) : ZMedeleg.zMedeleg = sail_call (fun r ->
  {zv with ZMedeleg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (9)), (Big_int.of_int (9)), zx)})

and z_set_Medeleg_SEnvCall ((zr_ref, zv) : ((ZMedeleg.zMedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Medeleg_SEnvCall (zr, zv))))

and z_get_Medeleg_UEnvCall (zv : (ZMedeleg.zMedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (8)), (Big_int.of_int (8))))

and z_update_Medeleg_UEnvCall ((zv, zx) : (ZMedeleg.zMedeleg * (bit) list)) : ZMedeleg.zMedeleg = sail_call (fun r ->
  {zv with ZMedeleg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (8)), (Big_int.of_int (8)), zx)})

and z_update_Sedeleg_UEnvCall ((zv, zx) : (ZSedeleg.zSedeleg * (bit) list)) : ZSedeleg.zSedeleg = sail_call (fun r ->
  {zv with ZSedeleg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (8)), (Big_int.of_int (8)), zx)})

and z_set_Medeleg_UEnvCall ((zr_ref, zv) : ((ZMedeleg.zMedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Medeleg_UEnvCall (zr, zv))))

and z_get_Sedeleg_UEnvCall (zv : (ZSedeleg.zSedeleg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (8)), (Big_int.of_int (8))))

and z_set_Sedeleg_UEnvCall ((zr_ref, zv) : ((ZSedeleg.zSedeleg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Sedeleg_UEnvCall (zr, zv))))

let zmedeleg : (ZMedeleg.zMedeleg) ref = ref (zundefined_Medeleg ());;

let rec zlegalizze_medeleg ((zo, zv) : (ZMedeleg.zMedeleg * (bit) list)) : ZMedeleg.zMedeleg = sail_call (fun r ->
  z_update_Medeleg_MEnvCall ((zMk_Medeleg zv), [B0]))

and zundefined_Mtvec (() : (unit)) : ZMtvec.zMtvec = sail_call (fun r ->
  {ZMtvec.zbits = undefined_bitvector (Big_int.of_int (32))})

and zMk_Mtvec (zv : ((bit) list)) : ZMtvec.zMtvec = sail_call (fun r ->
  {ZMtvec.zbits = zv})

and z_get_Mtvec_Base (zv : (ZMtvec.zMtvec)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (Big_int.of_int (2))))

and z_update_Mtvec_Base ((zv, zx) : (ZMtvec.zMtvec * (bit) list)) : ZMtvec.zMtvec = sail_call (fun r ->
  {zv with ZMtvec.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (Big_int.of_int (2)), zx)})

and z_set_Mtvec_Base ((zr_ref, zv) : ((ZMtvec.zMtvec) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mtvec_Base (zr, zv))))

and z_get_Mtvec_Mode (zv : (ZMtvec.zMtvec)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (1)), Big_int.zero))

and z_update_Mtvec_Mode ((zv, zx) : (ZMtvec.zMtvec * (bit) list)) : ZMtvec.zMtvec = sail_call (fun r ->
  {zv with ZMtvec.zbits = update_subrange ((zv.zbits), (Big_int.of_int (1)), Big_int.zero, zx)})

and z_update_Satp32_Mode ((zv, zx) : (ZSatp32.zSatp32 * (bit) list)) : ZSatp32.zSatp32 = sail_call (fun r ->
  {zv with ZSatp32.zbits = update_subrange ((zv.zbits), (Big_int.of_int (31)), (Big_int.of_int (31)), zx)})

and z_update_Satp64_Mode ((zv, zx) : (ZSatp64.zSatp64 * (bit) list)) : ZSatp64.zSatp64 = sail_call (fun r ->
  {zv with ZSatp64.zbits = update_subrange ((zv.zbits), (Big_int.of_int (63)), (Big_int.of_int (60)), zx)})

and z_set_Mtvec_Mode ((zr_ref, zv) : ((ZMtvec.zMtvec) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mtvec_Mode (zr, zv))))

and z_get_Satp32_Mode (zv : (ZSatp32.zSatp32)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (31)), (Big_int.of_int (31))))

and z_get_Satp64_Mode (zv : (ZSatp64.zSatp64)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (63)), (Big_int.of_int (60))))

and z_set_Satp32_Mode ((zr_ref, zv) : ((ZSatp32.zSatp32) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Satp32_Mode (zr, zv))))

and z_set_Satp64_Mode ((zr_ref, zv) : ((ZSatp64.zSatp64) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Satp64_Mode (zr, zv))))

let zmtvec : (ZMtvec.zMtvec) ref = ref (zundefined_Mtvec ());;

let rec zlegalizze_tvec ((zo, zv) : (ZMtvec.zMtvec * (bit) list)) : ZMtvec.zMtvec = sail_call (fun r ->
  let zv = (zMk_Mtvec zv) in
  begin
    match (ztrapVectorMode_of_bits (z_get_Mtvec_Mode zv)) with
    | ZTV_Direct -> zv
    | ZTV_Vector -> zv
    | _ -> z_update_Mtvec_Mode (zv, (z_get_Mtvec_Mode zo))
  end)

and zundefined_Mcause (() : (unit)) : ZMcause.zMcause = sail_call (fun r ->
  {ZMcause.zbits = undefined_bitvector (Big_int.of_int (32))})

and zMk_Mcause (zv : ((bit) list)) : ZMcause.zMcause = sail_call (fun r ->
  {ZMcause.zbits = zv})

and z_get_Mcause_Cause (zv : (ZMcause.zMcause)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (2)))), Big_int.zero))

and z_update_Mcause_Cause ((zv, zx) : (ZMcause.zMcause * (bit) list)) : ZMcause.zMcause = sail_call (fun r ->
  {zv with ZMcause.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (2)))), Big_int.zero, zx)})

and z_set_Mcause_Cause ((zr_ref, zv) : ((ZMcause.zMcause) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mcause_Cause (zr, zv))))

and z_get_Mcause_IsInterrupt (zv : (ZMcause.zMcause)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1))))))

and z_update_Mcause_IsInterrupt ((zv, zx) : (ZMcause.zMcause * (bit) list)) : ZMcause.zMcause = sail_call (fun r ->
  {zv with ZMcause.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), zx)})

and z_set_Mcause_IsInterrupt ((zr_ref, zv) : ((ZMcause.zMcause) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Mcause_IsInterrupt (zr, zv))))

let zmcause : (ZMcause.zMcause) ref = ref (zundefined_Mcause ());;

let rec ztvec_addr ((zm, zc) : (ZMtvec.zMtvec * ZMcause.zMcause)) : ((bit) list) zoption = sail_call (fun r ->
  let zbase = (append ((z_get_Mtvec_Base zm), [B0; B0])) in
  begin
    match (ztrapVectorMode_of_bits (z_get_Mtvec_Mode zm)) with
    | ZTV_Direct -> ZSome zbase
    | ZTV_Vector ->
      (if (eq_list ((z_get_Mcause_IsInterrupt zc), [B1])) then (ZSome (add_vec (zbase, (shiftl ((zzzero_extend ((Big_int.of_int (32)), (z_get_Mcause_Cause zc))), (Big_int.of_int (2))))))) else (ZSome zbase))
    | ZTV_Reserved -> ZNone ()
  end)

let zmepc : (zxlenbits) ref = ref (undefined_bitvector (Big_int.of_int (32)));;

let rec zlegalizze_xepc (zv : ((bit) list)) : (bit) list = sail_call (fun r ->
  (if (((Platform.enable_writable_misa ()) && (Platform.enable_rvc ())) || (eq_list ((z_get_Misa_C !zmisa), [B1]))) then (update (zv, Big_int.zero, B0)) else (and_vec (zv, (zsign_extend ((Big_int.of_int (32)), [B1; B0; B0]))))))

and zpc_alignment_mask (() : (unit)) : (bit) list = sail_call (fun r ->
  not_vec (zzzero_extend ((Big_int.of_int (32)), ((if (eq_list ((z_get_Misa_C !zmisa), [B1])) then [B0; B0] else [B1; B0])))))

let zmtval : (zxlenbits) ref = ref (undefined_bitvector (Big_int.of_int (32)));;

let zmscratch : (zxlenbits) ref = ref (undefined_bitvector (Big_int.of_int (32)));;

let rec zundefined_Counteren (() : (unit)) : ZCounteren.zCounteren = sail_call (fun r ->
  {ZCounteren.zbits = undefined_bitvector (Big_int.of_int (32))})

and zMk_Counteren (zv : ((bit) list)) : ZCounteren.zCounteren = sail_call (fun r ->
  {ZCounteren.zbits = zv})

and z_get_Counteren_CY (zv : (ZCounteren.zCounteren)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), Big_int.zero, Big_int.zero))

and z_update_Counteren_CY ((zv, zx) : (ZCounteren.zCounteren * (bit) list)) : ZCounteren.zCounteren = sail_call (fun r ->
  {zv with ZCounteren.zbits = update_subrange ((zv.zbits), Big_int.zero, Big_int.zero, zx)})

and z_update_Counterin_CY ((zv, zx) : (ZCounterin.zCounterin * (bit) list)) : ZCounterin.zCounterin = sail_call (fun r ->
  {zv with ZCounterin.zbits = update_subrange ((zv.zbits), Big_int.zero, Big_int.zero, zx)})

and z_set_Counteren_CY ((zr_ref, zv) : ((ZCounteren.zCounteren) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Counteren_CY (zr, zv))))

and z_get_Counterin_CY (zv : (ZCounterin.zCounterin)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), Big_int.zero, Big_int.zero))

and z_set_Counterin_CY ((zr_ref, zv) : ((ZCounterin.zCounterin) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Counterin_CY (zr, zv))))

and z_get_Counteren_HPM (zv : (ZCounteren.zCounteren)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (31)), (Big_int.of_int (3))))

and z_update_Counteren_HPM ((zv, zx) : (ZCounteren.zCounteren * (bit) list)) : ZCounteren.zCounteren = sail_call (fun r ->
  {zv with ZCounteren.zbits = update_subrange ((zv.zbits), (Big_int.of_int (31)), (Big_int.of_int (3)), zx)})

and z_set_Counteren_HPM ((zr_ref, zv) : ((ZCounteren.zCounteren) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Counteren_HPM (zr, zv))))

and z_get_Counteren_IR (zv : (ZCounteren.zCounteren)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (2)), (Big_int.of_int (2))))

and z_update_Counteren_IR ((zv, zx) : (ZCounteren.zCounteren * (bit) list)) : ZCounteren.zCounteren = sail_call (fun r ->
  {zv with ZCounteren.zbits = update_subrange ((zv.zbits), (Big_int.of_int (2)), (Big_int.of_int (2)), zx)})

and z_update_Counterin_IR ((zv, zx) : (ZCounterin.zCounterin * (bit) list)) : ZCounterin.zCounterin = sail_call (fun r ->
  {zv with ZCounterin.zbits = update_subrange ((zv.zbits), (Big_int.of_int (2)), (Big_int.of_int (2)), zx)})

and z_set_Counteren_IR ((zr_ref, zv) : ((ZCounteren.zCounteren) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Counteren_IR (zr, zv))))

and z_get_Counterin_IR (zv : (ZCounterin.zCounterin)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (2)), (Big_int.of_int (2))))

and z_set_Counterin_IR ((zr_ref, zv) : ((ZCounterin.zCounterin) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Counterin_IR (zr, zv))))

and z_get_Counteren_TM (zv : (ZCounteren.zCounteren)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (1)), (Big_int.of_int (1))))

and z_update_Counteren_TM ((zv, zx) : (ZCounteren.zCounteren * (bit) list)) : ZCounteren.zCounteren = sail_call (fun r ->
  {zv with ZCounteren.zbits = update_subrange ((zv.zbits), (Big_int.of_int (1)), (Big_int.of_int (1)), zx)})

and z_set_Counteren_TM ((zr_ref, zv) : ((ZCounteren.zCounteren) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Counteren_TM (zr, zv))))

let zmcounteren : (ZCounteren.zCounteren) ref = ref (zundefined_Counteren ());;

let zscounteren : (ZCounteren.zCounteren) ref = ref (zundefined_Counteren ());;

let rec zlegalizze_mcounteren ((zc, zv) : (ZCounteren.zCounteren * (bit) list)) : ZCounteren.zCounteren = sail_call (fun r ->
  z_update_Counteren_CY ((z_update_Counteren_TM ((z_update_Counteren_IR (zc, [access (zv, (Big_int.of_int (2)))])), [access (zv, (Big_int.of_int (1)))])), [access (zv, Big_int.zero)]))

and zlegalizze_scounteren ((zc, zv) : (ZCounteren.zCounteren * (bit) list)) : ZCounteren.zCounteren = sail_call (fun r ->
  z_update_Counteren_CY ((z_update_Counteren_TM ((z_update_Counteren_IR (zc, [access (zv, (Big_int.of_int (2)))])), [access (zv, (Big_int.of_int (1)))])), [access (zv, Big_int.zero)]))

and zundefined_Counterin (() : (unit)) : ZCounterin.zCounterin = sail_call (fun r ->
  {ZCounterin.zbits = undefined_bitvector (Big_int.of_int (32))})

and zMk_Counterin (zv : ((bit) list)) : ZCounterin.zCounterin = sail_call (fun r ->
  {ZCounterin.zbits = zv})

let zmcountinhibit : (ZCounterin.zCounterin) ref = ref (zundefined_Counterin ());;

let rec zlegalizze_mcountinhibit ((zc, zv) : (ZCounterin.zCounterin * (bit) list)) : ZCounterin.zCounterin = sail_call (fun r ->
  z_update_Counterin_CY ((z_update_Counterin_IR (zc, [access (zv, (Big_int.of_int (2)))])), [access (zv, Big_int.zero)]))

let zmcycle : (zbits) ref = ref (undefined_bitvector (Big_int.of_int (64)));;

let zmtime : (zbits) ref = ref (undefined_bitvector (Big_int.of_int (64)));;

let zminstret : (zbits) ref = ref (undefined_bitvector (Big_int.of_int (64)));;

let zminstret_increment : (bool) ref = ref (undefined_bool ());;

let rec zretire_instruction (() : (unit)) : unit = sail_call (fun r ->
  (if !zminstret_increment then ((zminstret := (add_vec_int (!zminstret, (Big_int.of_int (1)))))) else ()))

let zmvendorid : (zbits) ref = ref (undefined_bitvector (Big_int.of_int (32)));;

let zmimpid : (zxlenbits) ref = ref (undefined_bitvector (Big_int.of_int (32)));;

let zmarchid : (zxlenbits) ref = ref (undefined_bitvector (Big_int.of_int (32)));;

let zmhartid : (zxlenbits) ref = ref (undefined_bitvector (Big_int.of_int (32)));;

let rec zundefined_Sstatus (() : (unit)) : ZSstatus.zSstatus = sail_call (fun r ->
  {ZSstatus.zbits = undefined_bitvector (Big_int.of_int (32))})

and zMk_Sstatus (zv : ((bit) list)) : ZSstatus.zSstatus = sail_call (fun r ->
  {ZSstatus.zbits = zv})

and zget_sstatus_UXL (zs : (ZSstatus.zSstatus)) : (bit) list = sail_call (fun r ->
  let zm = (zMk_Mstatus (zs.zbits)) in
  zget_mstatus_UXL zm)

and zset_sstatus_UXL ((zs, za) : (ZSstatus.zSstatus * (bit) list)) : ZSstatus.zSstatus = sail_call (fun r ->
  let zm = (zMk_Mstatus (zs.zbits)) in
  let zm = (zset_mstatus_UXL (zm, za)) in
  zMk_Sstatus (zm.zbits))

and zlower_mstatus (zm : (ZMstatus.zMstatus)) : ZSstatus.zSstatus = sail_call (fun r ->
  let zs = (zMk_Sstatus (zzzero_extend ((Big_int.of_int (32)), [B0]))) in
  let zs = (z_update_Sstatus_SD (zs, (z_get_Mstatus_SD zm))) in
  let zs = (zset_sstatus_UXL (zs, (zget_mstatus_UXL zm))) in
  let zs = (z_update_Sstatus_MXR (zs, (z_get_Mstatus_MXR zm))) in
  let zs = (z_update_Sstatus_SUM (zs, (z_get_Mstatus_SUM zm))) in
  let zs = (z_update_Sstatus_XS (zs, (z_get_Mstatus_XS zm))) in
  let zs = (z_update_Sstatus_FS (zs, (z_get_Mstatus_FS zm))) in
  let zs = (z_update_Sstatus_VS (zs, (z_get_Mstatus_VS zm))) in
  let zs = (z_update_Sstatus_SPP (zs, (z_get_Mstatus_SPP zm))) in
  let zs = (z_update_Sstatus_SPIE (zs, (z_get_Mstatus_SPIE zm))) in
  let zs = (z_update_Sstatus_UPIE (zs, (z_get_Mstatus_UPIE zm))) in
  let zs = (z_update_Sstatus_SIE (zs, (z_get_Mstatus_SIE zm))) in
  let zs = (z_update_Sstatus_UIE (zs, (z_get_Mstatus_UIE zm))) in
  zs)

and zlift_sstatus ((zm, zs) : (ZMstatus.zMstatus * ZSstatus.zSstatus)) : ZMstatus.zMstatus = sail_call (fun r ->
  let zm = (z_update_Mstatus_MXR (zm, (z_get_Sstatus_MXR zs))) in
  let zm = (z_update_Mstatus_SUM (zm, (z_get_Sstatus_SUM zs))) in
  let zm = (z_update_Mstatus_XS (zm, (z_get_Sstatus_XS zs))) in
  let zm = (z_update_Mstatus_FS (zm, (z_get_Sstatus_FS zs))) in
  let zm = (z_update_Mstatus_VS (zm, (z_get_Sstatus_VS zs))) in
  let zdirty = (((fun (x, y) -> x = y) ((zextStatus_of_bits (z_get_Mstatus_FS zm)), ZDirty)) || (((fun (x, y) -> x = y) ((zextStatus_of_bits (z_get_Mstatus_XS zm)), ZDirty)) || ((fun (x, y) -> x = y) ((zextStatus_of_bits (z_get_Mstatus_VS zm)), ZDirty)))) in
  let zm = (z_update_Mstatus_SD (zm, (zbool_to_bits zdirty))) in
  let zm = (z_update_Mstatus_SPP (zm, (z_get_Sstatus_SPP zs))) in
  let zm = (z_update_Mstatus_SPIE (zm, (z_get_Sstatus_SPIE zs))) in
  let zm = (z_update_Mstatus_UPIE (zm, (z_get_Sstatus_UPIE zs))) in
  let zm = (z_update_Mstatus_SIE (zm, (z_get_Sstatus_SIE zs))) in
  let zm = (z_update_Mstatus_UIE (zm, (z_get_Sstatus_UIE zs))) in
  zm)

and zlegalizze_sstatus ((zm, zv) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  zlegalizze_mstatus (zm, ((zlift_sstatus (zm, (zMk_Sstatus zv))).zbits)))

and zundefined_Sedeleg (() : (unit)) : ZSedeleg.zSedeleg = sail_call (fun r ->
  {ZSedeleg.zbits = undefined_bitvector (Big_int.of_int (32))})

and zMk_Sedeleg (zv : ((bit) list)) : ZSedeleg.zSedeleg = sail_call (fun r ->
  {ZSedeleg.zbits = zv})

let zsedeleg : (ZSedeleg.zSedeleg) ref = ref (zundefined_Sedeleg ());;

let rec zlegalizze_sedeleg ((zs, zv) : (ZSedeleg.zSedeleg * (bit) list)) : ZSedeleg.zSedeleg = sail_call (fun r ->
  zMk_Sedeleg (zzzero_extend ((Big_int.of_int (32)), (subrange (zv, (Big_int.of_int (8)), Big_int.zero)))))

and zundefined_Sinterrupts (() : (unit)) : ZSinterrupts.zSinterrupts = sail_call (fun r ->
  {ZSinterrupts.zbits = undefined_bitvector (Big_int.of_int (32))})

and zMk_Sinterrupts (zv : ((bit) list)) : ZSinterrupts.zSinterrupts = sail_call (fun r ->
  {ZSinterrupts.zbits = zv})

and zlower_mip ((zm, zd) : (ZMinterrupts.zMinterrupts * ZMinterrupts.zMinterrupts)) : ZSinterrupts.zSinterrupts = sail_call (fun r ->
  let zs = (zMk_Sinterrupts (zzzero_extend ((Big_int.of_int (32)), [B0]))) in
  let zs = (z_update_Sinterrupts_SEI (zs, (and_vec ((z_get_Minterrupts_SEI zm), (z_get_Minterrupts_SEI zd))))) in
  let zs = (z_update_Sinterrupts_STI (zs, (and_vec ((z_get_Minterrupts_STI zm), (z_get_Minterrupts_STI zd))))) in
  let zs = (z_update_Sinterrupts_SSI (zs, (and_vec ((z_get_Minterrupts_SSI zm), (z_get_Minterrupts_SSI zd))))) in
  let zs = (z_update_Sinterrupts_UEI (zs, (and_vec ((z_get_Minterrupts_UEI zm), (z_get_Minterrupts_UEI zd))))) in
  let zs = (z_update_Sinterrupts_UTI (zs, (and_vec ((z_get_Minterrupts_UTI zm), (z_get_Minterrupts_UTI zd))))) in
  let zs = (z_update_Sinterrupts_USI (zs, (and_vec ((z_get_Minterrupts_USI zm), (z_get_Minterrupts_USI zd))))) in
  zs)

and zlower_mie ((zm, zd) : (ZMinterrupts.zMinterrupts * ZMinterrupts.zMinterrupts)) : ZSinterrupts.zSinterrupts = sail_call (fun r ->
  let zs = (zMk_Sinterrupts (zzzero_extend ((Big_int.of_int (32)), [B0]))) in
  let zs = (z_update_Sinterrupts_SEI (zs, (and_vec ((z_get_Minterrupts_SEI zm), (z_get_Minterrupts_SEI zd))))) in
  let zs = (z_update_Sinterrupts_STI (zs, (and_vec ((z_get_Minterrupts_STI zm), (z_get_Minterrupts_STI zd))))) in
  let zs = (z_update_Sinterrupts_SSI (zs, (and_vec ((z_get_Minterrupts_SSI zm), (z_get_Minterrupts_SSI zd))))) in
  let zs = (z_update_Sinterrupts_UEI (zs, (and_vec ((z_get_Minterrupts_UEI zm), (z_get_Minterrupts_UEI zd))))) in
  let zs = (z_update_Sinterrupts_UTI (zs, (and_vec ((z_get_Minterrupts_UTI zm), (z_get_Minterrupts_UTI zd))))) in
  let zs = (z_update_Sinterrupts_USI (zs, (and_vec ((z_get_Minterrupts_USI zm), (z_get_Minterrupts_USI zd))))) in
  zs)

and zlift_sip ((zo, zd, zs) : (ZMinterrupts.zMinterrupts * ZMinterrupts.zMinterrupts * ZSinterrupts.zSinterrupts)) : ZMinterrupts.zMinterrupts = sail_call (fun r ->
  let zm = zo in
  let zm = ((if (eq_list ((z_get_Minterrupts_SSI zd), [B1])) then (z_update_Minterrupts_SSI (zm, (z_get_Sinterrupts_SSI zs))) else zm)) in
  (if (zhaveNExt ()) then (let zm = ((if (eq_list ((z_get_Minterrupts_UEI zd), [B1])) then (z_update_Minterrupts_UEI (zm, (z_get_Sinterrupts_UEI zs))) else zm)) in
  let zm = ((if (eq_list ((z_get_Minterrupts_USI zd), [B1])) then (z_update_Minterrupts_USI (zm, (z_get_Sinterrupts_USI zs))) else zm)) in
  zm) else zm))

and zlegalizze_sip ((zm, zd, zv) : (ZMinterrupts.zMinterrupts * ZMinterrupts.zMinterrupts * (bit) list)) : ZMinterrupts.zMinterrupts = sail_call (fun r ->
  zlift_sip (zm, zd, (zMk_Sinterrupts zv)))

and zlift_sie ((zo, zd, zs) : (ZMinterrupts.zMinterrupts * ZMinterrupts.zMinterrupts * ZSinterrupts.zSinterrupts)) : ZMinterrupts.zMinterrupts = sail_call (fun r ->
  let zm = zo in
  let zm = ((if (eq_list ((z_get_Minterrupts_SEI zd), [B1])) then (z_update_Minterrupts_SEI (zm, (z_get_Sinterrupts_SEI zs))) else zm)) in
  let zm = ((if (eq_list ((z_get_Minterrupts_STI zd), [B1])) then (z_update_Minterrupts_STI (zm, (z_get_Sinterrupts_STI zs))) else zm)) in
  let zm = ((if (eq_list ((z_get_Minterrupts_SSI zd), [B1])) then (z_update_Minterrupts_SSI (zm, (z_get_Sinterrupts_SSI zs))) else zm)) in
  (if (zhaveNExt ()) then (let zm = ((if (eq_list ((z_get_Minterrupts_UEI zd), [B1])) then (z_update_Minterrupts_UEI (zm, (z_get_Sinterrupts_UEI zs))) else zm)) in
  let zm = ((if (eq_list ((z_get_Minterrupts_UTI zd), [B1])) then (z_update_Minterrupts_UTI (zm, (z_get_Sinterrupts_UTI zs))) else zm)) in
  let zm = ((if (eq_list ((z_get_Minterrupts_USI zd), [B1])) then (z_update_Minterrupts_USI (zm, (z_get_Sinterrupts_USI zs))) else zm)) in
  zm) else zm))

and zlegalizze_sie ((zm, zd, zv) : (ZMinterrupts.zMinterrupts * ZMinterrupts.zMinterrupts * (bit) list)) : ZMinterrupts.zMinterrupts = sail_call (fun r ->
  zlift_sie (zm, zd, (zMk_Sinterrupts zv)))

let zsideleg : (ZSinterrupts.zSinterrupts) ref = ref (zundefined_Sinterrupts ());;

let zstvec : (ZMtvec.zMtvec) ref = ref (zundefined_Mtvec ());;

let zsscratch : (zxlenbits) ref = ref (undefined_bitvector (Big_int.of_int (32)));;

let zsepc : (zxlenbits) ref = ref (undefined_bitvector (Big_int.of_int (32)));;

let zscause : (ZMcause.zMcause) ref = ref (zundefined_Mcause ());;

let zstval : (zxlenbits) ref = ref (undefined_bitvector (Big_int.of_int (32)));;

let rec zundefined_Satp64 (() : (unit)) : ZSatp64.zSatp64 = sail_call (fun r ->
  {ZSatp64.zbits = undefined_bitvector (Big_int.of_int (64))})

and zMk_Satp64 (zv : ((bit) list)) : ZSatp64.zSatp64 = sail_call (fun r ->
  {ZSatp64.zbits = zv})

and z_get_Satp64_Asid (zv : (ZSatp64.zSatp64)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (59)), (Big_int.of_int (44))))

and z_update_Satp64_Asid ((zv, zx) : (ZSatp64.zSatp64 * (bit) list)) : ZSatp64.zSatp64 = sail_call (fun r ->
  {zv with ZSatp64.zbits = update_subrange ((zv.zbits), (Big_int.of_int (59)), (Big_int.of_int (44)), zx)})

and z_update_Satp32_Asid ((zv, zx) : (ZSatp32.zSatp32 * (bit) list)) : ZSatp32.zSatp32 = sail_call (fun r ->
  {zv with ZSatp32.zbits = update_subrange ((zv.zbits), (Big_int.of_int (30)), (Big_int.of_int (22)), zx)})

and z_set_Satp64_Asid ((zr_ref, zv) : ((ZSatp64.zSatp64) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Satp64_Asid (zr, zv))))

and z_get_Satp32_Asid (zv : (ZSatp32.zSatp32)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (30)), (Big_int.of_int (22))))

and z_set_Satp32_Asid ((zr_ref, zv) : ((ZSatp32.zSatp32) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Satp32_Asid (zr, zv))))

and z_get_Satp64_PPN (zv : (ZSatp64.zSatp64)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (43)), Big_int.zero))

and z_update_Satp64_PPN ((zv, zx) : (ZSatp64.zSatp64 * (bit) list)) : ZSatp64.zSatp64 = sail_call (fun r ->
  {zv with ZSatp64.zbits = update_subrange ((zv.zbits), (Big_int.of_int (43)), Big_int.zero, zx)})

and z_update_Satp32_PPN ((zv, zx) : (ZSatp32.zSatp32 * (bit) list)) : ZSatp32.zSatp32 = sail_call (fun r ->
  {zv with ZSatp32.zbits = update_subrange ((zv.zbits), (Big_int.of_int (21)), Big_int.zero, zx)})

and z_set_Satp64_PPN ((zr_ref, zv) : ((ZSatp64.zSatp64) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Satp64_PPN (zr, zv))))

and z_get_Satp32_PPN (zv : (ZSatp32.zSatp32)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (21)), Big_int.zero))

and z_set_Satp32_PPN ((zr_ref, zv) : ((ZSatp32.zSatp32) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Satp32_PPN (zr, zv))))

and zlegalizze_satp64 ((za, zo, zv) : (zArchitecture * (bit) list * (bit) list)) : (bit) list = sail_call (fun r ->
  let zs = (zMk_Satp64 zv) in
  begin
    match (zsatp64Mode_of_bits (za, (z_get_Satp64_Mode zs))) with
    | ZNone (()) -> zo
    | ZSome (ZSv32) -> zo
    | ZSome (_) -> zs.zbits
  end)

and zundefined_Satp32 (() : (unit)) : ZSatp32.zSatp32 = sail_call (fun r ->
  {ZSatp32.zbits = undefined_bitvector (Big_int.of_int (32))})

and zMk_Satp32 (zv : ((bit) list)) : ZSatp32.zSatp32 = sail_call (fun r ->
  {ZSatp32.zbits = zv})

and zlegalizze_satp32 ((za, zo, zv) : (zArchitecture * (bit) list * (bit) list)) : (bit) list = sail_call (fun r ->
  zv)

let ztselect : (zxlenbits) ref = ref (undefined_bitvector (Big_int.of_int (32)));;

type zseed_opst = | ZBIST | ZES16 | ZWAIT | ZDEAD;;

let string_of_zseed_opst = function
  | ZBIST -> "BIST"
  | ZES16 -> "ES16"
  | ZWAIT -> "WAIT"
  | ZDEAD -> "DEAD";;

let rec zundefined_seed_opst (() : (unit)) : zseed_opst = sail_call (fun r ->
  internal_pick [ZBIST; ZES16; ZWAIT; ZDEAD])

and zseed_opst_of_num (zargz3 : (Big_int.num)) : zseed_opst = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__383 when (eq_int (zl__383, Big_int.zero)) -> ZBIST
    | zl__384 when (eq_int (zl__384, (Big_int.of_int (1)))) -> ZES16
    | zl__385 when (eq_int (zl__385, (Big_int.of_int (2)))) -> ZWAIT
    | _ -> ZDEAD
  end)

and znum_of_seed_opst (zargz3 : (zseed_opst)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZBIST -> Big_int.zero
    | ZES16 -> (Big_int.of_int (1))
    | ZWAIT -> (Big_int.of_int (2))
    | ZDEAD -> (Big_int.of_int (3))
  end)

and zopst_code_forwards (zargz3 : (zseed_opst)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | ZBIST -> [B0; B0]
    | ZWAIT -> [B0; B1]
    | ZES16 -> [B1; B0]
    | ZDEAD -> [B1; B1]
  end)

and zopst_code_backwards (zargz3 : ((bit) list)) : zseed_opst = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0])) -> ZBIST
    | zb__1 when (eq_list (zb__1, [B0; B1])) -> ZWAIT
    | zb__2 when (eq_list (zb__2, [B1; B0])) -> ZES16
    | _ -> ZDEAD
  end)

and zopst_code_forwards_matches (zargz3 : (zseed_opst)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | ZBIST -> true
    | ZWAIT -> true
    | ZES16 -> true
    | ZDEAD -> true
    | _ -> false
  end)

and zopst_code_backwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0])) -> true
    | zb__1 when (eq_list (zb__1, [B0; B1])) -> true
    | zb__2 when (eq_list (zb__2, [B1; B0])) -> true
    | zb__3 when (eq_list (zb__3, [B1; B1])) -> true
    | _ -> false
  end)

and zread_seed_csr (() : (unit)) : (bit) list = sail_call (fun r ->
  let zreserved_bits = [B0; B0; B0; B0; B0; B0] in
  let zcustom_bits = [B0; B0; B0; B0; B0; B0; B0; B0] in
  let zseed = (Platform.get_16_random_bits ()) in
  zzzero_extend ((Big_int.of_int (32)), (append ((zopst_code_forwards ZES16), (append (zreserved_bits, (append (zcustom_bits, zseed))))))))

and zwrite_seed_csr (() : (unit)) : ((bit) list) zoption = sail_call (fun r ->
  ZNone ())

and zundefined_Envcfg (() : (unit)) : ZEnvcfg.zEnvcfg = sail_call (fun r ->
  {ZEnvcfg.zbits = undefined_bitvector (Big_int.of_int (64))})

and zMk_Envcfg (zv : ((bit) list)) : ZEnvcfg.zEnvcfg = sail_call (fun r ->
  {ZEnvcfg.zbits = zv})

and z_get_Envcfg_CBCFE (zv : (ZEnvcfg.zEnvcfg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (6)), (Big_int.of_int (6))))

and z_update_Envcfg_CBCFE ((zv, zx) : (ZEnvcfg.zEnvcfg * (bit) list)) : ZEnvcfg.zEnvcfg = sail_call (fun r ->
  {zv with ZEnvcfg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (6)), (Big_int.of_int (6)), zx)})

and z_set_Envcfg_CBCFE ((zr_ref, zv) : ((ZEnvcfg.zEnvcfg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Envcfg_CBCFE (zr, zv))))

and z_get_Envcfg_CBIE (zv : (ZEnvcfg.zEnvcfg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (5)), (Big_int.of_int (4))))

and z_update_Envcfg_CBIE ((zv, zx) : (ZEnvcfg.zEnvcfg * (bit) list)) : ZEnvcfg.zEnvcfg = sail_call (fun r ->
  {zv with ZEnvcfg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (5)), (Big_int.of_int (4)), zx)})

and z_set_Envcfg_CBIE ((zr_ref, zv) : ((ZEnvcfg.zEnvcfg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Envcfg_CBIE (zr, zv))))

and z_get_Envcfg_CBZE (zv : (ZEnvcfg.zEnvcfg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (7)), (Big_int.of_int (7))))

and z_update_Envcfg_CBZE ((zv, zx) : (ZEnvcfg.zEnvcfg * (bit) list)) : ZEnvcfg.zEnvcfg = sail_call (fun r ->
  {zv with ZEnvcfg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (7)), (Big_int.of_int (7)), zx)})

and z_set_Envcfg_CBZE ((zr_ref, zv) : ((ZEnvcfg.zEnvcfg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Envcfg_CBZE (zr, zv))))

and z_get_Envcfg_FIOM (zv : (ZEnvcfg.zEnvcfg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), Big_int.zero, Big_int.zero))

and z_update_Envcfg_FIOM ((zv, zx) : (ZEnvcfg.zEnvcfg * (bit) list)) : ZEnvcfg.zEnvcfg = sail_call (fun r ->
  {zv with ZEnvcfg.zbits = update_subrange ((zv.zbits), Big_int.zero, Big_int.zero, zx)})

and z_set_Envcfg_FIOM ((zr_ref, zv) : ((ZEnvcfg.zEnvcfg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Envcfg_FIOM (zr, zv))))

and z_get_Envcfg_PBMTE (zv : (ZEnvcfg.zEnvcfg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (62)), (Big_int.of_int (62))))

and z_update_Envcfg_PBMTE ((zv, zx) : (ZEnvcfg.zEnvcfg * (bit) list)) : ZEnvcfg.zEnvcfg = sail_call (fun r ->
  {zv with ZEnvcfg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (62)), (Big_int.of_int (62)), zx)})

and z_set_Envcfg_PBMTE ((zr_ref, zv) : ((ZEnvcfg.zEnvcfg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Envcfg_PBMTE (zr, zv))))

and z_get_Envcfg_STCE (zv : (ZEnvcfg.zEnvcfg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (63)), (Big_int.of_int (63))))

and z_update_Envcfg_STCE ((zv, zx) : (ZEnvcfg.zEnvcfg * (bit) list)) : ZEnvcfg.zEnvcfg = sail_call (fun r ->
  {zv with ZEnvcfg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (63)), (Big_int.of_int (63)), zx)})

and z_set_Envcfg_STCE ((zr_ref, zv) : ((ZEnvcfg.zEnvcfg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Envcfg_STCE (zr, zv))))

and z_get_Envcfg_wpri_0 (zv : (ZEnvcfg.zEnvcfg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (3)), (Big_int.of_int (1))))

and z_update_Envcfg_wpri_0 ((zv, zx) : (ZEnvcfg.zEnvcfg * (bit) list)) : ZEnvcfg.zEnvcfg = sail_call (fun r ->
  {zv with ZEnvcfg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (3)), (Big_int.of_int (1)), zx)})

and z_set_Envcfg_wpri_0 ((zr_ref, zv) : ((ZEnvcfg.zEnvcfg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Envcfg_wpri_0 (zr, zv))))

and z_get_Envcfg_wpri_1 (zv : (ZEnvcfg.zEnvcfg)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (61)), (Big_int.of_int (8))))

and z_update_Envcfg_wpri_1 ((zv, zx) : (ZEnvcfg.zEnvcfg * (bit) list)) : ZEnvcfg.zEnvcfg = sail_call (fun r ->
  {zv with ZEnvcfg.zbits = update_subrange ((zv.zbits), (Big_int.of_int (61)), (Big_int.of_int (8)), zx)})

and z_set_Envcfg_wpri_1 ((zr_ref, zv) : ((ZEnvcfg.zEnvcfg) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Envcfg_wpri_1 (zr, zv))))

let zmenvcfg : (ZEnvcfg.zEnvcfg) ref = ref (zundefined_Envcfg ());;

let zsenvcfg : (ZEnvcfg.zEnvcfg) ref = ref (zundefined_Envcfg ());;

let rec zlegalizze_envcfg ((zo, zv) : (ZEnvcfg.zEnvcfg * (bit) list)) : ZEnvcfg.zEnvcfg = sail_call (fun r ->
  let zv = (zMk_Envcfg zv) in
  let zo = (z_update_Envcfg_FIOM (zo, ((if (Platform.enable_writable_fiom ()) then (z_get_Envcfg_FIOM zv) else [B0])))) in
  zo)

and zis_fiom_active (() : (unit)) : bool = sail_call (fun r ->
  begin
    match !zcur_privilege with
    | ZMachine -> false
    | ZSupervisor -> eq_list ((z_get_Envcfg_FIOM !zmenvcfg), [B1])
    | ZUser ->
      eq_list ((or_vec ((z_get_Envcfg_FIOM !zmenvcfg), (z_get_Envcfg_FIOM !zsenvcfg))), [B1])
  end)

let zvstart : (zbits) ref = ref (undefined_bitvector (Big_int.of_int (16)));;

let zvxsat : (zbits) ref = ref (undefined_bitvector (Big_int.of_int (1)));;

let zvxrm : (zbits) ref = ref (undefined_bitvector (Big_int.of_int (2)));;

let zvl : (zxlenbits) ref = ref (undefined_bitvector (Big_int.of_int (32)));;

let zvlenb : (zxlenbits) ref = ref (undefined_bitvector (Big_int.of_int (32)));;

let rec zundefined_Vtype (() : (unit)) : ZVtype.zVtype = sail_call (fun r ->
  {ZVtype.zbits = undefined_bitvector (Big_int.of_int (32))})

and zMk_Vtype (zv : ((bit) list)) : ZVtype.zVtype = sail_call (fun r ->
  {ZVtype.zbits = zv})

and z_get_Vtype_reserved (zv : (ZVtype.zVtype)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (2)))), (Big_int.of_int (8))))

and z_update_Vtype_reserved ((zv, zx) : (ZVtype.zVtype * (bit) list)) : ZVtype.zVtype = sail_call (fun r ->
  {zv with ZVtype.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (2)))), (Big_int.of_int (8)), zx)})

and z_set_Vtype_reserved ((zr_ref, zv) : ((ZVtype.zVtype) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Vtype_reserved (zr, zv))))

and z_get_Vtype_vill (zv : (ZVtype.zVtype)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1))))))

and z_update_Vtype_vill ((zv, zx) : (ZVtype.zVtype * (bit) list)) : ZVtype.zVtype = sail_call (fun r ->
  {zv with ZVtype.zbits = update_subrange ((zv.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), zx)})

and z_set_Vtype_vill ((zr_ref, zv) : ((ZVtype.zVtype) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Vtype_vill (zr, zv))))

and z_get_Vtype_vlmul (zv : (ZVtype.zVtype)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (2)), Big_int.zero))

and z_update_Vtype_vlmul ((zv, zx) : (ZVtype.zVtype * (bit) list)) : ZVtype.zVtype = sail_call (fun r ->
  {zv with ZVtype.zbits = update_subrange ((zv.zbits), (Big_int.of_int (2)), Big_int.zero, zx)})

and z_set_Vtype_vlmul ((zr_ref, zv) : ((ZVtype.zVtype) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Vtype_vlmul (zr, zv))))

and z_get_Vtype_vma (zv : (ZVtype.zVtype)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (7)), (Big_int.of_int (7))))

and z_update_Vtype_vma ((zv, zx) : (ZVtype.zVtype * (bit) list)) : ZVtype.zVtype = sail_call (fun r ->
  {zv with ZVtype.zbits = update_subrange ((zv.zbits), (Big_int.of_int (7)), (Big_int.of_int (7)), zx)})

and z_set_Vtype_vma ((zr_ref, zv) : ((ZVtype.zVtype) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Vtype_vma (zr, zv))))

and z_get_Vtype_vsew (zv : (ZVtype.zVtype)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (5)), (Big_int.of_int (3))))

and z_update_Vtype_vsew ((zv, zx) : (ZVtype.zVtype * (bit) list)) : ZVtype.zVtype = sail_call (fun r ->
  {zv with ZVtype.zbits = update_subrange ((zv.zbits), (Big_int.of_int (5)), (Big_int.of_int (3)), zx)})

and z_set_Vtype_vsew ((zr_ref, zv) : ((ZVtype.zVtype) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Vtype_vsew (zr, zv))))

and z_get_Vtype_vta (zv : (ZVtype.zVtype)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (6)), (Big_int.of_int (6))))

and z_update_Vtype_vta ((zv, zx) : (ZVtype.zVtype * (bit) list)) : ZVtype.zVtype = sail_call (fun r ->
  {zv with ZVtype.zbits = update_subrange ((zv.zbits), (Big_int.of_int (6)), (Big_int.of_int (6)), zx)})

and z_set_Vtype_vta ((zr_ref, zv) : ((ZVtype.zVtype) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Vtype_vta (zr, zv))))

let zvtype : (ZVtype.zVtype) ref = ref (zundefined_Vtype ());;

let rec zget_sew_pow (() : (unit)) : Big_int.num = sail_call (fun r ->
  let zSEW_pow = (begin
    match (z_get_Vtype_vsew !zvtype) with
    | zb__0 when (eq_list (zb__0, [B0; B0; B0])) -> (Big_int.of_int (3))
    | zb__1 when (eq_list (zb__1, [B0; B0; B1])) -> (Big_int.of_int (4))
    | zb__2 when (eq_list (zb__2, [B0; B1; B0])) -> (Big_int.of_int (5))
    | zb__3 when (eq_list (zb__3, [B0; B1; B1])) -> (Big_int.of_int (6))
    | _ -> begin assert false; exit 0 end
  end) in
  zSEW_pow)

and zget_sew (() : (unit)) : Big_int.num = sail_call (fun r ->
  begin
    match (zget_sew_pow ()) with
    | zl__380 when (eq_int (zl__380, (Big_int.of_int (3)))) ->
      (Big_int.of_int (8))
    | zl__381 when (eq_int (zl__381, (Big_int.of_int (4)))) ->
      (Big_int.of_int (16))
    | zl__382 when (eq_int (zl__382, (Big_int.of_int (5)))) ->
      (Big_int.of_int (32))
    | _ -> (Big_int.of_int (64))
  end)

and zget_sew_bytes (() : (unit)) : Big_int.num = sail_call (fun r ->
  begin
    match (zget_sew_pow ()) with
    | zl__377 when (eq_int (zl__377, (Big_int.of_int (3)))) ->
      (Big_int.of_int (1))
    | zl__378 when (eq_int (zl__378, (Big_int.of_int (4)))) ->
      (Big_int.of_int (2))
    | zl__379 when (eq_int (zl__379, (Big_int.of_int (5)))) ->
      (Big_int.of_int (4))
    | _ -> (Big_int.of_int (8))
  end)

and zget_lmul_pow (() : (unit)) : Big_int.num = sail_call (fun r ->
  begin
    match (z_get_Vtype_vlmul !zvtype) with
    | zb__0 when (eq_list (zb__0, [B1; B0; B1])) -> (Big_int.of_int (-3))
    | zb__1 when (eq_list (zb__1, [B1; B1; B0])) -> (Big_int.of_int (-2))
    | zb__2 when (eq_list (zb__2, [B1; B1; B1])) -> (Big_int.of_int (-1))
    | zb__3 when (eq_list (zb__3, [B0; B0; B0])) -> Big_int.zero
    | zb__4 when (eq_list (zb__4, [B0; B0; B1])) -> (Big_int.of_int (1))
    | zb__5 when (eq_list (zb__5, [B0; B1; B0])) -> (Big_int.of_int (2))
    | zb__6 when (eq_list (zb__6, [B0; B1; B1])) -> (Big_int.of_int (3))
    | _ -> begin assert false; exit 0 end
  end)

type zagtype = | ZUNDISTURBED | ZAGNOSTIC;;

let string_of_zagtype = function
  | ZUNDISTURBED -> "UNDISTURBED"
  | ZAGNOSTIC -> "AGNOSTIC";;

let rec zundefined_agtype (() : (unit)) : zagtype = sail_call (fun r ->
  internal_pick [ZUNDISTURBED; ZAGNOSTIC])

and zagtype_of_num (zargz3 : (Big_int.num)) : zagtype = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__376 when (eq_int (zl__376, Big_int.zero)) -> ZUNDISTURBED
    | _ -> ZAGNOSTIC
  end)

and znum_of_agtype (zargz3 : (zagtype)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZUNDISTURBED -> Big_int.zero
    | ZAGNOSTIC -> (Big_int.of_int (1))
  end)

and zdecode_agtype (zag : ((bit) list)) : zagtype = sail_call (fun r ->
  begin
    match zag with
    | zb__0 when (eq_list (zb__0, [B0])) -> ZUNDISTURBED
    | _ -> ZAGNOSTIC
  end)

and zget_vtype_vma (() : (unit)) : zagtype = sail_call (fun r ->
  zdecode_agtype (z_get_Vtype_vma !zvtype))

and zget_vtype_vta (() : (unit)) : zagtype = sail_call (fun r ->
  zdecode_agtype (z_get_Vtype_vta !zvtype))

type zPmpAddrMatchType = | ZOFF | ZTOR | ZNA4 | ZNAPOT;;

let string_of_zPmpAddrMatchType = function
  | ZOFF -> "OFF"
  | ZTOR -> "TOR"
  | ZNA4 -> "NA4"
  | ZNAPOT -> "NAPOT";;

let rec zundefined_PmpAddrMatchType (() : (unit)) : zPmpAddrMatchType = sail_call (fun r ->
  internal_pick [ZOFF; ZTOR; ZNA4; ZNAPOT])

and zPmpAddrMatchType_of_num (zargz3 : (Big_int.num)) : zPmpAddrMatchType = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__373 when (eq_int (zl__373, Big_int.zero)) -> ZOFF
    | zl__374 when (eq_int (zl__374, (Big_int.of_int (1)))) -> ZTOR
    | zl__375 when (eq_int (zl__375, (Big_int.of_int (2)))) -> ZNA4
    | _ -> ZNAPOT
  end)

and znum_of_PmpAddrMatchType (zargz3 : (zPmpAddrMatchType)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZOFF -> Big_int.zero
    | ZTOR -> (Big_int.of_int (1))
    | ZNA4 -> (Big_int.of_int (2))
    | ZNAPOT -> (Big_int.of_int (3))
  end)

and zpmpAddrMatchType_of_bits (zbs : ((bit) list)) : zPmpAddrMatchType = sail_call (fun r ->
  begin
    match zbs with
    | zb__0 when (eq_list (zb__0, [B0; B0])) -> ZOFF
    | zb__1 when (eq_list (zb__1, [B0; B1])) -> ZTOR
    | zb__2 when (eq_list (zb__2, [B1; B0])) -> ZNA4
    | _ -> ZNAPOT
  end)

and zpmpAddrMatchType_to_bits (zbs : (zPmpAddrMatchType)) : (bit) list = sail_call (fun r ->
  begin
    match zbs with
    | ZOFF -> [B0; B0]
    | ZTOR -> [B0; B1]
    | ZNA4 -> [B1; B0]
    | ZNAPOT -> [B1; B1]
  end)

and zundefined_Pmpcfg_ent (() : (unit)) : ZPmpcfg_ent.zPmpcfg_ent = sail_call (fun r ->
  {ZPmpcfg_ent.zbits = undefined_bitvector (Big_int.of_int (8))})

and zMk_Pmpcfg_ent (zv : ((bit) list)) : ZPmpcfg_ent.zPmpcfg_ent = sail_call (fun r ->
  {ZPmpcfg_ent.zbits = zv})

let zpmpcfg_n : ((ZPmpcfg_ent.zPmpcfg_ent) list) ref = ref (undefined_vector ((Big_int.of_int (64)), (zundefined_Pmpcfg_ent ())));;

let zpmpaddr_n : ((zxlenbits) list) ref = ref (undefined_vector ((Big_int.of_int (64)), (undefined_bitvector (Big_int.of_int (32)))));;

let rec zpmpReadCfgReg (zn : (Big_int.num)) : (bit) list = sail_call (fun r ->
  (if (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) then (append (((access (!zpmpcfg_n, (add_int ((mult (zn, (Big_int.of_int (4)))), (Big_int.of_int (3)))))).zbits), (append (((access (!zpmpcfg_n, (add_int ((mult (zn, (Big_int.of_int (4)))), (Big_int.of_int (2)))))).zbits), (append (((access (!zpmpcfg_n, (add_int ((mult (zn, (Big_int.of_int (4)))), (Big_int.of_int (1)))))).zbits), ((access (!zpmpcfg_n, (add_int ((mult (zn, (Big_int.of_int (4)))), Big_int.zero)))).zbits))))))) else (begin
    assert (eq_int ((modulus (zn, (Big_int.of_int (2)))), Big_int.zero));
    exit 0
  end)))

and zpmpReadAddrReg (zn : (Big_int.num)) : (bit) list = sail_call (fun r ->
  let zG = (Platform.pmp_grain ()) in
  let zmatch_type = (z_get_Pmpcfg_ent_A (access (!zpmpcfg_n, zn))) in
  let zaddr = (access (!zpmpaddr_n, zn)) in
  begin
    match (access (zmatch_type, (Big_int.of_int (1)))) with
    | zp0z3 when ((gteq (zG, (Big_int.of_int (2)))) && (eq_bit (zp0z3, B1))) ->
      let zmask = (zzzero_extend ((Big_int.of_int (32)), (zones (min_int ((sub_int (zG, (Big_int.of_int (1)))), (Big_int.of_int (32))))))) in
      or_vec (zaddr, zmask)
    | zp0z3 when ((gteq (zG, (Big_int.of_int (1)))) && (eq_bit (zp0z3, B0))) ->
      let zmask = (zzzero_extend ((Big_int.of_int (32)), (zones (min_int (zG, (Big_int.of_int (32))))))) in
      and_vec (zaddr, (not_vec zmask))
    | _ -> zaddr
  end)

and zpmpLocked (zcfg : (ZPmpcfg_ent.zPmpcfg_ent)) : bool = sail_call (fun r ->
  eq_list ((z_get_Pmpcfg_ent_L zcfg), [B1]))

and zpmpTORLocked (zcfg : (ZPmpcfg_ent.zPmpcfg_ent)) : bool = sail_call (fun r ->
  (eq_list ((z_get_Pmpcfg_ent_L zcfg), [B1])) && ((fun (x, y) -> x = y) ((zpmpAddrMatchType_of_bits (z_get_Pmpcfg_ent_A zcfg)), ZTOR)))

and zpmpWriteCfg ((zn, zcfg, zv) : (Big_int.num * ZPmpcfg_ent.zPmpcfg_ent * (bit) list)) : ZPmpcfg_ent.zPmpcfg_ent = sail_call (fun r ->
  (if (zpmpLocked zcfg) then zcfg else (let zcfg = (zMk_Pmpcfg_ent (and_vec (zv, [B1; B0; B0; B1; B1; B1; B1; B1]))) in
  let zcfg = ((if ((eq_list ((z_get_Pmpcfg_ent_W zcfg), [B1])) && (eq_list ((z_get_Pmpcfg_ent_R zcfg), [B0]))) then (z_update_Pmpcfg_ent_R ((z_update_Pmpcfg_ent_W ((z_update_Pmpcfg_ent_X (zcfg, [B0])), [B0])), [B0])) else zcfg)) in
  let zcfg = ((if ((gteq ((Platform.pmp_grain ()), (Big_int.of_int (1)))) && ((fun (x, y) -> x = y) ((zpmpAddrMatchType_of_bits (z_get_Pmpcfg_ent_A zcfg)), ZNA4))) then (z_update_Pmpcfg_ent_A (zcfg, (zpmpAddrMatchType_to_bits ZOFF))) else zcfg)) in
  zcfg)))

and zpmpWriteCfgReg ((zn, zv) : (Big_int.num * (bit) list)) : unit = sail_call (fun r ->
  (if (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) then (let rec loop zi =
    if Big_int.less_equal zi (Big_int.of_int (3))
    then ((let zidx = (add_int ((mult (zn, (Big_int.of_int (4)))), zi)) in
    (zpmpcfg_n := (update (!zpmpcfg_n, zidx, (zpmpWriteCfg (zidx, (access (!zpmpcfg_n, zidx)), (subrange (zv, (add_int ((mult ((Big_int.of_int (8)), zi)), (Big_int.of_int (7)))), (mult ((Big_int.of_int (8)), zi)))))))))); loop (Big_int.add zi (Big_int.of_int (1))))
    else ()
  in
  loop Big_int.zero) else (begin
    assert (eq_int ((modulus (zn, (Big_int.of_int (2)))), Big_int.zero));
    exit 0
  end)))

and zpmpWriteAddr ((zlocked, ztor_locked, zreg, zv) : (bool * bool * (bit) list * (bit) list)) : (bit) list = sail_call (fun r ->
  (if (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) then ((if (zlocked || ztor_locked) then zreg else zv)) else ((if (zlocked || ztor_locked) then zreg else (zzzero_extend ((Big_int.of_int (32)), (subrange (zv, (Big_int.of_int (53)), Big_int.zero))))))))

and zpmpWriteAddrReg ((zn, zv) : (Big_int.num * (bit) list)) : unit = sail_call (fun r ->
  (zpmpaddr_n := (update (!zpmpaddr_n, zn, (zpmpWriteAddr ((zpmpLocked (access (!zpmpcfg_n, zn))), ((if (lt ((add_int (zn, (Big_int.of_int (1)))), (Big_int.of_int (64)))) then (zpmpTORLocked (access (!zpmpcfg_n, (add_int (zn, (Big_int.of_int (1))))))) else false)), (access (!zpmpaddr_n, zn)), zv))))))

type  zpmp_addr_range = ((zxlenbits * zxlenbits)) zoption;;

let string_of_zpmp_addr_range (gs5262 :  zpmp_addr_range) = "APP";;

let rec zpmpAddrRange ((zcfg, zpmpaddr, zprev_pmpaddr) : (ZPmpcfg_ent.zPmpcfg_ent * (bit) list * (bit) list)) : (((bit) list * (bit) list)) zoption = sail_call (fun r ->
  begin
    match (zpmpAddrMatchType_of_bits (z_get_Pmpcfg_ent_A zcfg)) with
    | ZOFF -> ZNone ()
    | ZTOR ->
      ZSome ((fun (v0, v1) -> (v1, v0)) (shiftl (zpmpaddr, (Big_int.of_int (2))), shiftl (zprev_pmpaddr, (Big_int.of_int (2)))))
    | ZNA4 ->
      begin
        assert (lt ((Platform.pmp_grain ()), (Big_int.of_int (1))));
        let zlo = (shiftl (zpmpaddr, (Big_int.of_int (2)))) in
        ZSome ((fun (v0, v1) -> (v1, v0)) (add_vec_int (zlo, (Big_int.of_int (4))), zlo))
      end
    | ZNAPOT ->
      let zmask = (xor_vec (zpmpaddr, (add_vec_int (zpmpaddr, (Big_int.of_int (1)))))) in
      let zlo = (and_vec (zpmpaddr, (not_vec zmask))) in
      let zlen = (add_vec_int (zmask, (Big_int.of_int (1)))) in
      ZSome ((fun (v0, v1) -> (v1, v0)) (shiftl ((add_vec (zlo, zlen)), (Big_int.of_int (2))), shiftl (zlo, (Big_int.of_int (2)))))
  end)

and zpmpCheckRWX ((zent, zacc) : (ZPmpcfg_ent.zPmpcfg_ent * (zext_access_type) zAccessType)) : bool = sail_call (fun r ->
  begin
    match zacc with
    | ZRead (_) -> eq_list ((z_get_Pmpcfg_ent_R zent), [B1])
    | ZWrite (_) -> eq_list ((z_get_Pmpcfg_ent_W zent), [B1])
    | ZReadWrite (_) ->
      (eq_list ((z_get_Pmpcfg_ent_R zent), [B1])) && (eq_list ((z_get_Pmpcfg_ent_W zent), [B1]))
    | ZExecute (()) -> eq_list ((z_get_Pmpcfg_ent_X zent), [B1])
  end)

and zpmpCheckPerms ((zent, zacc, zpriv) : (ZPmpcfg_ent.zPmpcfg_ent * (zext_access_type) zAccessType * zPrivilege)) : bool = sail_call (fun r ->
  begin
    match zpriv with
    | ZMachine ->
      (if (zpmpLocked zent) then (zpmpCheckRWX (zent, zacc)) else true)
    | _ -> zpmpCheckRWX (zent, zacc)
  end)

type zpmpAddrMatch = | ZPMP_NoMatch | ZPMP_PartialMatch | ZPMP_Match;;

let string_of_zpmpAddrMatch = function
  | ZPMP_NoMatch -> "PMP_NoMatch"
  | ZPMP_PartialMatch -> "PMP_PartialMatch"
  | ZPMP_Match -> "PMP_Match";;

let rec zundefined_pmpAddrMatch (() : (unit)) : zpmpAddrMatch = sail_call (fun r ->
  internal_pick [ZPMP_NoMatch; ZPMP_PartialMatch; ZPMP_Match])

and zpmpAddrMatch_of_num (zargz3 : (Big_int.num)) : zpmpAddrMatch = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__371 when (eq_int (zl__371, Big_int.zero)) -> ZPMP_NoMatch
    | zl__372 when (eq_int (zl__372, (Big_int.of_int (1)))) -> ZPMP_PartialMatch
    | _ -> ZPMP_Match
  end)

and znum_of_pmpAddrMatch (zargz3 : (zpmpAddrMatch)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZPMP_NoMatch -> Big_int.zero
    | ZPMP_PartialMatch -> (Big_int.of_int (1))
    | ZPMP_Match -> (Big_int.of_int (2))
  end)

and zpmpMatchAddr ((zaddr, zwidth, zrng) : ((bit) list * (bit) list * (((bit) list * (bit) list)) zoption)) : zpmpAddrMatch = sail_call (fun r ->
  begin
    match zrng with
    | ZNone (()) -> ZPMP_NoMatch
    | ZSome ((zlo, zhi)) ->
      (if (zz8operatorz0zIzJ_uz9 (zhi, zlo)) then ZPMP_NoMatch else ((if ((zz8operatorz0zIzJ_uz9 ((add_vec (zaddr, zwidth)), zlo)) || (zz8operatorz0zIzJ_uz9 (zhi, zaddr))) then ZPMP_NoMatch else ((if ((zz8operatorz0zIzJ_uz9 (zlo, zaddr)) && (zz8operatorz0zIzJ_uz9 ((add_vec (zaddr, zwidth)), zhi))) then ZPMP_Match else ZPMP_PartialMatch)))))
  end)

type zpmpMatch = | ZPMP_Success | ZPMP_Continue | ZPMP_Fail;;

let string_of_zpmpMatch = function
  | ZPMP_Success -> "PMP_Success"
  | ZPMP_Continue -> "PMP_Continue"
  | ZPMP_Fail -> "PMP_Fail";;

let rec zundefined_pmpMatch (() : (unit)) : zpmpMatch = sail_call (fun r ->
  internal_pick [ZPMP_Success; ZPMP_Continue; ZPMP_Fail])

and zpmpMatch_of_num (zargz3 : (Big_int.num)) : zpmpMatch = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__369 when (eq_int (zl__369, Big_int.zero)) -> ZPMP_Success
    | zl__370 when (eq_int (zl__370, (Big_int.of_int (1)))) -> ZPMP_Continue
    | _ -> ZPMP_Fail
  end)

and znum_of_pmpMatch (zargz3 : (zpmpMatch)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZPMP_Success -> Big_int.zero
    | ZPMP_Continue -> (Big_int.of_int (1))
    | ZPMP_Fail -> (Big_int.of_int (2))
  end)

and zpmpMatchEntry ((zaddr, zwidth, zacc, zpriv, zent, zpmpaddr, zprev_pmpaddr) : ((bit) list * (bit) list * (zext_access_type) zAccessType * zPrivilege * ZPmpcfg_ent.zPmpcfg_ent * (bit) list * (bit) list)) : zpmpMatch = sail_call (fun r ->
  let zrng = (zpmpAddrRange (zent, zpmpaddr, zprev_pmpaddr)) in
  begin
    match (zpmpMatchAddr (zaddr, zwidth, zrng)) with
    | ZPMP_NoMatch -> ZPMP_Continue
    | ZPMP_PartialMatch -> ZPMP_Fail
    | ZPMP_Match ->
      (if (zpmpCheckPerms (zent, zacc, zpriv)) then ZPMP_Success else ZPMP_Fail)
  end)

and zaccessToFault (zacc : ((zext_access_type) zAccessType)) : zExceptionType = sail_call (fun r ->
  begin
    match zacc with
    | ZRead (_) -> ZE_Load_Access_Fault ()
    | ZWrite (_) -> ZE_SAMO_Access_Fault ()
    | ZReadWrite (_) -> ZE_SAMO_Access_Fault ()
    | ZExecute (()) -> ZE_Fetch_Access_Fault ()
  end)

and zpmpCheck ((zaddr, zwidth, zacc, zpriv) : ((bit) list * Big_int.num * (zext_access_type) zAccessType * zPrivilege)) : (zExceptionType) zoption = sail_call (fun r ->
  let zwidth = (zto_bits ((Big_int.of_int (32)), zwidth)) in
  begin
    let rec loop zi =
      if Big_int.less_equal zi (Big_int.of_int (63))
      then ((let zprev_pmpaddr = ((if (gt (zi, Big_int.zero)) then (zpmpReadAddrReg (sub_int (zi, (Big_int.of_int (1))))) else (zzzeros_implicit (Big_int.of_int (32))))) in
      begin
        match (zpmpMatchEntry (zaddr, zwidth, zacc, zpriv, (access (!zpmpcfg_n, zi)), (zpmpReadAddrReg zi), zprev_pmpaddr)) with
        | ZPMP_Success -> r.return (ZNone ())
        | ZPMP_Fail -> r.return (ZSome (zaccessToFault zacc))
        | ZPMP_Continue -> ()
      end); loop (Big_int.add zi (Big_int.of_int (1))))
      else ()
    in
    loop Big_int.zero;
    (if ((fun (x, y) -> x = y) (zpriv, ZMachine)) then (ZNone ()) else (ZSome (zaccessToFault zacc)))
  end)

and zinit_pmp (() : (unit)) : unit = sail_call (fun r ->
  begin
    assert ((eq_int ((Platform.pmp_count ()), Big_int.zero)) || ((eq_int ((Platform.pmp_count ()), (Big_int.of_int (16)))) || (eq_int ((Platform.pmp_count ()), (Big_int.of_int (64))))));
    let rec loop zi =
      if Big_int.less_equal zi (Big_int.of_int (63))
      then (((zpmpcfg_n := (update (!zpmpcfg_n, zi, (z_update_Pmpcfg_ent_L ((z_update_Pmpcfg_ent_A ((access (!zpmpcfg_n, zi)), (zpmpAddrMatchType_to_bits ZOFF))), [B0])))))); loop (Big_int.add zi (Big_int.of_int (1))))
      else ()
    in
    loop Big_int.zero
  end)

and zundefined_ccsr (() : (unit)) : Zccsr.zccsr = sail_call (fun r ->
  {Zccsr.zbits = undefined_bitvector (Big_int.of_int (32))})

and zMk_ccsr (zv : ((bit) list)) : Zccsr.zccsr = sail_call (fun r ->
  {Zccsr.zbits = zv})

and z_get_ccsr_d (zv : (Zccsr.zccsr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (1)), (Big_int.of_int (1))))

and z_update_ccsr_d ((zv, zx) : (Zccsr.zccsr * (bit) list)) : Zccsr.zccsr = sail_call (fun r ->
  {zv with Zccsr.zbits = update_subrange ((zv.zbits), (Big_int.of_int (1)), (Big_int.of_int (1)), zx)})

and z_set_ccsr_d ((zr_ref, zv) : ((Zccsr.zccsr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_ccsr_d (zr, zv))))

and z_get_ccsr_e (zv : (Zccsr.zccsr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), Big_int.zero, Big_int.zero))

and z_update_ccsr_e ((zv, zx) : (Zccsr.zccsr * (bit) list)) : Zccsr.zccsr = sail_call (fun r ->
  {zv with Zccsr.zbits = update_subrange ((zv.zbits), Big_int.zero, Big_int.zero, zx)})

and z_set_ccsr_e ((zr_ref, zv) : ((Zccsr.zccsr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_ccsr_e (zr, zv))))

let zmccsr : (Zccsr.zccsr) ref = ref (zundefined_ccsr ());;

let zsccsr : (Zccsr.zccsr) ref = ref (zundefined_ccsr ());;

let zuccsr : (Zccsr.zccsr) ref = ref (zundefined_ccsr ());;

let zMSHWMB : (zxlenbits) ref = ref (undefined_bitvector (Big_int.of_int (32)));;

let zMSHWM : (zxlenbits) ref = ref (undefined_bitvector (Big_int.of_int (32)));;

let rec zlegalizze_ccsr ((zc, zv) : (Zccsr.zccsr * (bit) list)) : Zccsr.zccsr = sail_call (fun r ->
  let zv = (zMk_ccsr zv) in
  let zc = (z_update_ccsr_d (zc, [B1])) in
  let zc = (z_update_ccsr_e (zc, [B1])) in
  zc)

and zlegalizze_mshwm (zv : ((bit) list)) : (bit) list = sail_call (fun r ->
  update_subrange (zv, (Big_int.of_int (3)), Big_int.zero, [B0; B0; B0; B0]))

let znextPCC : (ZCapability.zCapability) ref = ref (zundefined_Capability ());;

let zMTCC : (ZCapability.zCapability) ref = ref (zundefined_Capability ());;

let zMTDC : (ZCapability.zCapability) ref = ref (zundefined_Capability ());;

let zMScratchC : (ZCapability.zCapability) ref = ref (zundefined_Capability ());;

let zMEPCC : (ZCapability.zCapability) ref = ref (zundefined_Capability ());;

let rec zmin_instruction_bytes (() : (unit)) : Big_int.num = sail_call (fun r ->
  (if ((not (Platform.enable_writable_misa ())) && (not (Platform.enable_rvc ()))) then (Big_int.of_int (4)) else (Big_int.of_int (2))))

and zhaveXcheri (() : (unit)) : bool = sail_call (fun r ->
  eq_list ((z_get_Misa_X !zmisa), [B1]))

and zrC (zr : (Big_int.num)) : ZCapability.zCapability = sail_call (fun r ->
  begin
    match zr with
    | zl__353 when (eq_int (zl__353, Big_int.zero)) -> zzzero_reg
    | zl__354 when (eq_int (zl__354, (Big_int.of_int (1)))) -> !zx1
    | zl__355 when (eq_int (zl__355, (Big_int.of_int (2)))) -> !zx2
    | zl__356 when (eq_int (zl__356, (Big_int.of_int (3)))) -> !zx3
    | zl__357 when (eq_int (zl__357, (Big_int.of_int (4)))) -> !zx4
    | zl__358 when (eq_int (zl__358, (Big_int.of_int (5)))) -> !zx5
    | zl__359 when (eq_int (zl__359, (Big_int.of_int (6)))) -> !zx6
    | zl__360 when (eq_int (zl__360, (Big_int.of_int (7)))) -> !zx7
    | zl__361 when (eq_int (zl__361, (Big_int.of_int (8)))) -> !zx8
    | zl__362 when (eq_int (zl__362, (Big_int.of_int (9)))) -> !zx9
    | zl__363 when (eq_int (zl__363, (Big_int.of_int (10)))) -> !zx10
    | zl__364 when (eq_int (zl__364, (Big_int.of_int (11)))) -> !zx11
    | zl__365 when (eq_int (zl__365, (Big_int.of_int (12)))) -> !zx12
    | zl__366 when (eq_int (zl__366, (Big_int.of_int (13)))) -> !zx13
    | zl__367 when (eq_int (zl__367, (Big_int.of_int (14)))) -> !zx14
    | zl__368 when (eq_int (zl__368, (Big_int.of_int (15)))) -> !zx15
    | _ -> raise (ZError_not_rv32e_register ())
  end)

and zwC ((zr, zv) : (Big_int.num * ZCapability.zCapability)) : unit = sail_call (fun r ->
  let zv = (zencCapabilityToCapability ((zv.ztag), (zcapToEncCap zv))) in
  begin
    begin
      match zr with
      | zl__337 when (eq_int (zl__337, Big_int.zero)) -> ()
      | zl__338 when (eq_int (zl__338, (Big_int.of_int (1)))) -> (zx1 := zv)
      | zl__339 when (eq_int (zl__339, (Big_int.of_int (2)))) -> (zx2 := zv)
      | zl__340 when (eq_int (zl__340, (Big_int.of_int (3)))) -> (zx3 := zv)
      | zl__341 when (eq_int (zl__341, (Big_int.of_int (4)))) -> (zx4 := zv)
      | zl__342 when (eq_int (zl__342, (Big_int.of_int (5)))) -> (zx5 := zv)
      | zl__343 when (eq_int (zl__343, (Big_int.of_int (6)))) -> (zx6 := zv)
      | zl__344 when (eq_int (zl__344, (Big_int.of_int (7)))) -> (zx7 := zv)
      | zl__345 when (eq_int (zl__345, (Big_int.of_int (8)))) -> (zx8 := zv)
      | zl__346 when (eq_int (zl__346, (Big_int.of_int (9)))) -> (zx9 := zv)
      | zl__347 when (eq_int (zl__347, (Big_int.of_int (10)))) -> (zx10 := zv)
      | zl__348 when (eq_int (zl__348, (Big_int.of_int (11)))) -> (zx11 := zv)
      | zl__349 when (eq_int (zl__349, (Big_int.of_int (12)))) -> (zx12 := zv)
      | zl__350 when (eq_int (zl__350, (Big_int.of_int (13)))) -> (zx13 := zv)
      | zl__351 when (eq_int (zl__351, (Big_int.of_int (14)))) -> (zx14 := zv)
      | zl__352 when (eq_int (zl__352, (Big_int.of_int (15)))) -> (zx15 := zv)
      | _ -> raise (ZError_not_rv32e_register ())
    end;
    (if (zneq_int (zr, Big_int.zero)) then (begin
      zrvfi_wX (zr, (zv.zaddress));
      (if (Platform.get_config_print_reg ()) then (Platform.print_reg (concat_str ("x", (concat_str ((dec_str zr), (concat_str (" <- ", (zRegStr zv)))))))) else ())
    end) else ())
  end)

and zrC_bits (zr : ((bit) list)) : ZCapability.zCapability = sail_call (fun r ->
  zrC (uint zr))

and zwC_bits ((zr, zv) : ((bit) list * ZCapability.zCapability)) : unit = sail_call (fun r ->
  zwC ((uint zr), zv))

and zext_init_regs (() : (unit)) : unit = sail_call (fun r ->
  begin
    (zPCC := zroot_cap_exe);
    (znextPCC := zroot_cap_exe);
    (zMTCC := zroot_cap_exe);
    (zMTDC := zroot_cap_mem);
    (zMScratchC := zroot_cap_seal);
    (zMEPCC := zroot_cap_exe);
    (zx1 := znull_cap);
    (zx2 := znull_cap);
    (zx3 := znull_cap);
    (zx4 := znull_cap);
    (zx5 := znull_cap);
    (zx6 := znull_cap);
    (zx7 := znull_cap);
    (zx8 := znull_cap);
    (zx9 := znull_cap);
    (zx10 := znull_cap);
    (zx11 := znull_cap);
    (zx12 := znull_cap);
    (zx13 := znull_cap);
    (zx14 := znull_cap);
    (zx15 := znull_cap);
    z_set_Misa_X (zmisa, [B1]);
    z_set_ccsr_d (zmccsr, [B1]);
    z_set_ccsr_e (zmccsr, [B1]);
    z_set_ccsr_d (zsccsr, [B1]);
    z_set_ccsr_e (zsccsr, [B1]);
    z_set_ccsr_d (zuccsr, [B1]);
    z_set_ccsr_e (zuccsr, [B1])
  end)

and zext_rvfi_init (() : (unit)) : unit = sail_call (fun r ->
  begin
    (zx1 := zroot_cap_mem);
    (zx2 := zroot_cap_mem);
    (zx3 := zroot_cap_mem);
    (zx4 := zroot_cap_mem);
    (zx5 := zroot_cap_mem);
    (zx6 := zroot_cap_mem);
    (zx7 := zroot_cap_mem);
    (zx8 := zroot_cap_mem);
    (zx9 := zroot_cap_mem);
    (zx10 := zroot_cap_mem);
    (zx11 := zroot_cap_mem);
    (zx12 := zroot_cap_mem);
    (zx13 := zroot_cap_mem);
    (zx14 := zroot_cap_mem);
    (zx15 := zroot_cap_mem)
  end)

and zcap_reg_name_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin match zargz3 with | "cnull" -> [B0; B0; B0; B0; B0] | _ -> exit 0 end)

and zcap_reg_name_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0; B0; B0; B0])) -> true
    | zr -> true
    | _ -> false
  end)

and zcap_reg_name_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | "cnull" -> true | _ -> exit 0 | _ -> false end)

and zcap_creg_name_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin match zargz3 with | _ -> exit 0 end)

and zcap_creg_name_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin match zargz3 with | zr -> true | _ -> false end)

and zcap_creg_name_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | _ -> exit 0 | _ -> false end)

and zstring_of_capreg_idx (zreg : ((bit) list)) : string = sail_call (fun r ->
  begin
    match zreg with
    | zv__14 when (eq_list ((subrange (zv__14, (Big_int.of_int (5)), (Big_int.of_int (5)))), [B0])) ->
      let zgreg = (subrange (zv__14, (Big_int.of_int (4)), Big_int.zero)) in
      concat_str ("c", (concat_str ((dec_str (uint zgreg)), (concat_str ("/", (zcap_reg_name_abi zgreg))))))
    | zb__0 when (eq_list (zb__0, [B1; B0; B0; B0; B0; B0])) -> "PCC"
    | zb__1 when (eq_list (zb__1, [B1; B1; B1; B1; B0; B0])) -> "MTCC"
    | zb__2 when (eq_list (zb__2, [B1; B1; B1; B1; B0; B1])) -> "MTDC"
    | zb__3 when (eq_list (zb__3, [B1; B1; B1; B1; B1; B0])) -> "MScratchC"
    | zb__4 when (eq_list (zb__4, [B1; B1; B1; B1; B1; B1])) -> "EPCC"
    | _ -> concat_str ("Unknown/", (string_of_bits zreg))
  end)

and zget_arch_pc (() : (unit)) : (bit) list = sail_call (fun r -> !zPC)

and zget_next_pc (() : (unit)) : (bit) list = sail_call (fun r -> !znextPC)

and zset_next_pc (zpc : ((bit) list)) : unit = sail_call (fun r ->
  (znextPC := zpc))

and ztick_pc (() : (unit)) : unit = sail_call (fun r ->
  begin (zPCC := !znextPCC); (zPC := !znextPC) end)

type  zvreglenbits = zbits;;

let string_of_zvreglenbits (gs5513 :  zvreglenbits) = string_of_zbits gs5513;;

type  zvregtype = zvreglenbits;;

let string_of_zvregtype (gs5514 :  zvregtype) = string_of_zvreglenbits gs5514;;

type zvsetop = | ZVSETVLI | ZVSETVL;;

let string_of_zvsetop = function
  | ZVSETVLI -> "VSETVLI"
  | ZVSETVL -> "VSETVL";;

let rec zundefined_vsetop (() : (unit)) : zvsetop = sail_call (fun r ->
  internal_pick [ZVSETVLI; ZVSETVL])

and zvsetop_of_num (zargz3 : (Big_int.num)) : zvsetop = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__336 when (eq_int (zl__336, Big_int.zero)) -> ZVSETVLI
    | _ -> ZVSETVL
  end)

and znum_of_vsetop (zargz3 : (zvsetop)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVSETVLI -> Big_int.zero
    | ZVSETVL -> (Big_int.of_int (1))
  end)

type zvvfunct6 =
  | ZVV_VADD
  | ZVV_VSUB
  | ZVV_VMINU
  | ZVV_VMIN
  | ZVV_VMAXU
  | ZVV_VMAX
  | ZVV_VAND
  | ZVV_VOR
  | ZVV_VXOR
  | ZVV_VRGATHER
  | ZVV_VRGATHEREI16
  | ZVV_VSADDU
  | ZVV_VSADD
  | ZVV_VSSUBU
  | ZVV_VSSUB
  | ZVV_VSLL
  | ZVV_VSMUL
  | ZVV_VSRL
  | ZVV_VSRA
  | ZVV_VSSRL
  | ZVV_VSSRA;;

let string_of_zvvfunct6 = function
  | ZVV_VADD -> "VV_VADD"
  | ZVV_VSUB -> "VV_VSUB"
  | ZVV_VMINU -> "VV_VMINU"
  | ZVV_VMIN -> "VV_VMIN"
  | ZVV_VMAXU -> "VV_VMAXU"
  | ZVV_VMAX -> "VV_VMAX"
  | ZVV_VAND -> "VV_VAND"
  | ZVV_VOR -> "VV_VOR"
  | ZVV_VXOR -> "VV_VXOR"
  | ZVV_VRGATHER -> "VV_VRGATHER"
  | ZVV_VRGATHEREI16 -> "VV_VRGATHEREI16"
  | ZVV_VSADDU -> "VV_VSADDU"
  | ZVV_VSADD -> "VV_VSADD"
  | ZVV_VSSUBU -> "VV_VSSUBU"
  | ZVV_VSSUB -> "VV_VSSUB"
  | ZVV_VSLL -> "VV_VSLL"
  | ZVV_VSMUL -> "VV_VSMUL"
  | ZVV_VSRL -> "VV_VSRL"
  | ZVV_VSRA -> "VV_VSRA"
  | ZVV_VSSRL -> "VV_VSSRL"
  | ZVV_VSSRA -> "VV_VSSRA";;

let rec zundefined_vvfunct6 (() : (unit)) : zvvfunct6 = sail_call (fun r ->
  internal_pick [ZVV_VADD; ZVV_VSUB; ZVV_VMINU; ZVV_VMIN; ZVV_VMAXU; ZVV_VMAX; ZVV_VAND; ZVV_VOR; ZVV_VXOR; ZVV_VRGATHER; ZVV_VRGATHEREI16; ZVV_VSADDU; ZVV_VSADD; ZVV_VSSUBU; ZVV_VSSUB; ZVV_VSLL; ZVV_VSMUL; ZVV_VSRL; ZVV_VSRA; ZVV_VSSRL; ZVV_VSSRA])

and zvvfunct6_of_num (zargz3 : (Big_int.num)) : zvvfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__316 when (eq_int (zl__316, Big_int.zero)) -> ZVV_VADD
    | zl__317 when (eq_int (zl__317, (Big_int.of_int (1)))) -> ZVV_VSUB
    | zl__318 when (eq_int (zl__318, (Big_int.of_int (2)))) -> ZVV_VMINU
    | zl__319 when (eq_int (zl__319, (Big_int.of_int (3)))) -> ZVV_VMIN
    | zl__320 when (eq_int (zl__320, (Big_int.of_int (4)))) -> ZVV_VMAXU
    | zl__321 when (eq_int (zl__321, (Big_int.of_int (5)))) -> ZVV_VMAX
    | zl__322 when (eq_int (zl__322, (Big_int.of_int (6)))) -> ZVV_VAND
    | zl__323 when (eq_int (zl__323, (Big_int.of_int (7)))) -> ZVV_VOR
    | zl__324 when (eq_int (zl__324, (Big_int.of_int (8)))) -> ZVV_VXOR
    | zl__325 when (eq_int (zl__325, (Big_int.of_int (9)))) -> ZVV_VRGATHER
    | zl__326 when (eq_int (zl__326, (Big_int.of_int (10)))) -> ZVV_VRGATHEREI16
    | zl__327 when (eq_int (zl__327, (Big_int.of_int (11)))) -> ZVV_VSADDU
    | zl__328 when (eq_int (zl__328, (Big_int.of_int (12)))) -> ZVV_VSADD
    | zl__329 when (eq_int (zl__329, (Big_int.of_int (13)))) -> ZVV_VSSUBU
    | zl__330 when (eq_int (zl__330, (Big_int.of_int (14)))) -> ZVV_VSSUB
    | zl__331 when (eq_int (zl__331, (Big_int.of_int (15)))) -> ZVV_VSLL
    | zl__332 when (eq_int (zl__332, (Big_int.of_int (16)))) -> ZVV_VSMUL
    | zl__333 when (eq_int (zl__333, (Big_int.of_int (17)))) -> ZVV_VSRL
    | zl__334 when (eq_int (zl__334, (Big_int.of_int (18)))) -> ZVV_VSRA
    | zl__335 when (eq_int (zl__335, (Big_int.of_int (19)))) -> ZVV_VSSRL
    | _ -> ZVV_VSSRA
  end)

and znum_of_vvfunct6 (zargz3 : (zvvfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVV_VADD -> Big_int.zero
    | ZVV_VSUB -> (Big_int.of_int (1))
    | ZVV_VMINU -> (Big_int.of_int (2))
    | ZVV_VMIN -> (Big_int.of_int (3))
    | ZVV_VMAXU -> (Big_int.of_int (4))
    | ZVV_VMAX -> (Big_int.of_int (5))
    | ZVV_VAND -> (Big_int.of_int (6))
    | ZVV_VOR -> (Big_int.of_int (7))
    | ZVV_VXOR -> (Big_int.of_int (8))
    | ZVV_VRGATHER -> (Big_int.of_int (9))
    | ZVV_VRGATHEREI16 -> (Big_int.of_int (10))
    | ZVV_VSADDU -> (Big_int.of_int (11))
    | ZVV_VSADD -> (Big_int.of_int (12))
    | ZVV_VSSUBU -> (Big_int.of_int (13))
    | ZVV_VSSUB -> (Big_int.of_int (14))
    | ZVV_VSLL -> (Big_int.of_int (15))
    | ZVV_VSMUL -> (Big_int.of_int (16))
    | ZVV_VSRL -> (Big_int.of_int (17))
    | ZVV_VSRA -> (Big_int.of_int (18))
    | ZVV_VSSRL -> (Big_int.of_int (19))
    | ZVV_VSSRA -> (Big_int.of_int (20))
  end)

type zvvcmpfunct6 =
  | ZVVCMP_VMSEQ
  | ZVVCMP_VMSNE
  | ZVVCMP_VMSLTU
  | ZVVCMP_VMSLT
  | ZVVCMP_VMSLEU
  | ZVVCMP_VMSLE;;

let string_of_zvvcmpfunct6 = function
  | ZVVCMP_VMSEQ -> "VVCMP_VMSEQ"
  | ZVVCMP_VMSNE -> "VVCMP_VMSNE"
  | ZVVCMP_VMSLTU -> "VVCMP_VMSLTU"
  | ZVVCMP_VMSLT -> "VVCMP_VMSLT"
  | ZVVCMP_VMSLEU -> "VVCMP_VMSLEU"
  | ZVVCMP_VMSLE -> "VVCMP_VMSLE";;

let rec zundefined_vvcmpfunct6 (() : (unit)) : zvvcmpfunct6 = sail_call (fun r ->
  internal_pick [ZVVCMP_VMSEQ; ZVVCMP_VMSNE; ZVVCMP_VMSLTU; ZVVCMP_VMSLT; ZVVCMP_VMSLEU; ZVVCMP_VMSLE])

and zvvcmpfunct6_of_num (zargz3 : (Big_int.num)) : zvvcmpfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__311 when (eq_int (zl__311, Big_int.zero)) -> ZVVCMP_VMSEQ
    | zl__312 when (eq_int (zl__312, (Big_int.of_int (1)))) -> ZVVCMP_VMSNE
    | zl__313 when (eq_int (zl__313, (Big_int.of_int (2)))) -> ZVVCMP_VMSLTU
    | zl__314 when (eq_int (zl__314, (Big_int.of_int (3)))) -> ZVVCMP_VMSLT
    | zl__315 when (eq_int (zl__315, (Big_int.of_int (4)))) -> ZVVCMP_VMSLEU
    | _ -> ZVVCMP_VMSLE
  end)

and znum_of_vvcmpfunct6 (zargz3 : (zvvcmpfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVVCMP_VMSEQ -> Big_int.zero
    | ZVVCMP_VMSNE -> (Big_int.of_int (1))
    | ZVVCMP_VMSLTU -> (Big_int.of_int (2))
    | ZVVCMP_VMSLT -> (Big_int.of_int (3))
    | ZVVCMP_VMSLEU -> (Big_int.of_int (4))
    | ZVVCMP_VMSLE -> (Big_int.of_int (5))
  end)

type zvvmfunct6 = | ZVVM_VMADC | ZVVM_VMSBC;;

let string_of_zvvmfunct6 = function
  | ZVVM_VMADC -> "VVM_VMADC"
  | ZVVM_VMSBC -> "VVM_VMSBC";;

let rec zundefined_vvmfunct6 (() : (unit)) : zvvmfunct6 = sail_call (fun r ->
  internal_pick [ZVVM_VMADC; ZVVM_VMSBC])

and zvvmfunct6_of_num (zargz3 : (Big_int.num)) : zvvmfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__310 when (eq_int (zl__310, Big_int.zero)) -> ZVVM_VMADC
    | _ -> ZVVM_VMSBC
  end)

and znum_of_vvmfunct6 (zargz3 : (zvvmfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVVM_VMADC -> Big_int.zero
    | ZVVM_VMSBC -> (Big_int.of_int (1))
  end)

type zvvmcfunct6 = | ZVVMC_VMADC | ZVVMC_VMSBC;;

let string_of_zvvmcfunct6 = function
  | ZVVMC_VMADC -> "VVMC_VMADC"
  | ZVVMC_VMSBC -> "VVMC_VMSBC";;

let rec zundefined_vvmcfunct6 (() : (unit)) : zvvmcfunct6 = sail_call (fun r ->
  internal_pick [ZVVMC_VMADC; ZVVMC_VMSBC])

and zvvmcfunct6_of_num (zargz3 : (Big_int.num)) : zvvmcfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__309 when (eq_int (zl__309, Big_int.zero)) -> ZVVMC_VMADC
    | _ -> ZVVMC_VMSBC
  end)

and znum_of_vvmcfunct6 (zargz3 : (zvvmcfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVVMC_VMADC -> Big_int.zero
    | ZVVMC_VMSBC -> (Big_int.of_int (1))
  end)

type zvvmsfunct6 = | ZVVMS_VADC | ZVVMS_VSBC;;

let string_of_zvvmsfunct6 = function
  | ZVVMS_VADC -> "VVMS_VADC"
  | ZVVMS_VSBC -> "VVMS_VSBC";;

let rec zundefined_vvmsfunct6 (() : (unit)) : zvvmsfunct6 = sail_call (fun r ->
  internal_pick [ZVVMS_VADC; ZVVMS_VSBC])

and zvvmsfunct6_of_num (zargz3 : (Big_int.num)) : zvvmsfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__308 when (eq_int (zl__308, Big_int.zero)) -> ZVVMS_VADC
    | _ -> ZVVMS_VSBC
  end)

and znum_of_vvmsfunct6 (zargz3 : (zvvmsfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVVMS_VADC -> Big_int.zero
    | ZVVMS_VSBC -> (Big_int.of_int (1))
  end)

type zvxmfunct6 = | ZVXM_VMADC | ZVXM_VMSBC;;

let string_of_zvxmfunct6 = function
  | ZVXM_VMADC -> "VXM_VMADC"
  | ZVXM_VMSBC -> "VXM_VMSBC";;

let rec zundefined_vxmfunct6 (() : (unit)) : zvxmfunct6 = sail_call (fun r ->
  internal_pick [ZVXM_VMADC; ZVXM_VMSBC])

and zvxmfunct6_of_num (zargz3 : (Big_int.num)) : zvxmfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__307 when (eq_int (zl__307, Big_int.zero)) -> ZVXM_VMADC
    | _ -> ZVXM_VMSBC
  end)

and znum_of_vxmfunct6 (zargz3 : (zvxmfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVXM_VMADC -> Big_int.zero
    | ZVXM_VMSBC -> (Big_int.of_int (1))
  end)

type zvxmcfunct6 = | ZVXMC_VMADC | ZVXMC_VMSBC;;

let string_of_zvxmcfunct6 = function
  | ZVXMC_VMADC -> "VXMC_VMADC"
  | ZVXMC_VMSBC -> "VXMC_VMSBC";;

let rec zundefined_vxmcfunct6 (() : (unit)) : zvxmcfunct6 = sail_call (fun r ->
  internal_pick [ZVXMC_VMADC; ZVXMC_VMSBC])

and zvxmcfunct6_of_num (zargz3 : (Big_int.num)) : zvxmcfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__306 when (eq_int (zl__306, Big_int.zero)) -> ZVXMC_VMADC
    | _ -> ZVXMC_VMSBC
  end)

and znum_of_vxmcfunct6 (zargz3 : (zvxmcfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVXMC_VMADC -> Big_int.zero
    | ZVXMC_VMSBC -> (Big_int.of_int (1))
  end)

type zvxmsfunct6 = | ZVXMS_VADC | ZVXMS_VSBC;;

let string_of_zvxmsfunct6 = function
  | ZVXMS_VADC -> "VXMS_VADC"
  | ZVXMS_VSBC -> "VXMS_VSBC";;

let rec zundefined_vxmsfunct6 (() : (unit)) : zvxmsfunct6 = sail_call (fun r ->
  internal_pick [ZVXMS_VADC; ZVXMS_VSBC])

and zvxmsfunct6_of_num (zargz3 : (Big_int.num)) : zvxmsfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__305 when (eq_int (zl__305, Big_int.zero)) -> ZVXMS_VADC
    | _ -> ZVXMS_VSBC
  end)

and znum_of_vxmsfunct6 (zargz3 : (zvxmsfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVXMS_VADC -> Big_int.zero
    | ZVXMS_VSBC -> (Big_int.of_int (1))
  end)

type zvimfunct6 = | ZVIM_VMADC;;

let string_of_zvimfunct6 = function | ZVIM_VMADC -> "VIM_VMADC";;

let rec zundefined_vimfunct6 (() : (unit)) : zvimfunct6 = sail_call (fun r ->
  internal_pick [ZVIM_VMADC])

and zvimfunct6_of_num (zargz3 : (Big_int.num)) : zvimfunct6 = sail_call (fun r ->
  begin match zargz3 with | _ -> ZVIM_VMADC end)

and znum_of_vimfunct6 (zargz3 : (zvimfunct6)) : Big_int.num = sail_call (fun r ->
  begin match zargz3 with | ZVIM_VMADC -> Big_int.zero end)

type zvimcfunct6 = | ZVIMC_VMADC;;

let string_of_zvimcfunct6 = function | ZVIMC_VMADC -> "VIMC_VMADC";;

let rec zundefined_vimcfunct6 (() : (unit)) : zvimcfunct6 = sail_call (fun r ->
  internal_pick [ZVIMC_VMADC])

and zvimcfunct6_of_num (zargz3 : (Big_int.num)) : zvimcfunct6 = sail_call (fun r ->
  begin match zargz3 with | _ -> ZVIMC_VMADC end)

and znum_of_vimcfunct6 (zargz3 : (zvimcfunct6)) : Big_int.num = sail_call (fun r ->
  begin match zargz3 with | ZVIMC_VMADC -> Big_int.zero end)

type zvimsfunct6 = | ZVIMS_VADC;;

let string_of_zvimsfunct6 = function | ZVIMS_VADC -> "VIMS_VADC";;

let rec zundefined_vimsfunct6 (() : (unit)) : zvimsfunct6 = sail_call (fun r ->
  internal_pick [ZVIMS_VADC])

and zvimsfunct6_of_num (zargz3 : (Big_int.num)) : zvimsfunct6 = sail_call (fun r ->
  begin match zargz3 with | _ -> ZVIMS_VADC end)

and znum_of_vimsfunct6 (zargz3 : (zvimsfunct6)) : Big_int.num = sail_call (fun r ->
  begin match zargz3 with | ZVIMS_VADC -> Big_int.zero end)

type zvxcmpfunct6 =
  | ZVXCMP_VMSEQ
  | ZVXCMP_VMSNE
  | ZVXCMP_VMSLTU
  | ZVXCMP_VMSLT
  | ZVXCMP_VMSLEU
  | ZVXCMP_VMSLE
  | ZVXCMP_VMSGTU
  | ZVXCMP_VMSGT;;

let string_of_zvxcmpfunct6 = function
  | ZVXCMP_VMSEQ -> "VXCMP_VMSEQ"
  | ZVXCMP_VMSNE -> "VXCMP_VMSNE"
  | ZVXCMP_VMSLTU -> "VXCMP_VMSLTU"
  | ZVXCMP_VMSLT -> "VXCMP_VMSLT"
  | ZVXCMP_VMSLEU -> "VXCMP_VMSLEU"
  | ZVXCMP_VMSLE -> "VXCMP_VMSLE"
  | ZVXCMP_VMSGTU -> "VXCMP_VMSGTU"
  | ZVXCMP_VMSGT -> "VXCMP_VMSGT";;

let rec zundefined_vxcmpfunct6 (() : (unit)) : zvxcmpfunct6 = sail_call (fun r ->
  internal_pick [ZVXCMP_VMSEQ; ZVXCMP_VMSNE; ZVXCMP_VMSLTU; ZVXCMP_VMSLT; ZVXCMP_VMSLEU; ZVXCMP_VMSLE; ZVXCMP_VMSGTU; ZVXCMP_VMSGT])

and zvxcmpfunct6_of_num (zargz3 : (Big_int.num)) : zvxcmpfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__298 when (eq_int (zl__298, Big_int.zero)) -> ZVXCMP_VMSEQ
    | zl__299 when (eq_int (zl__299, (Big_int.of_int (1)))) -> ZVXCMP_VMSNE
    | zl__300 when (eq_int (zl__300, (Big_int.of_int (2)))) -> ZVXCMP_VMSLTU
    | zl__301 when (eq_int (zl__301, (Big_int.of_int (3)))) -> ZVXCMP_VMSLT
    | zl__302 when (eq_int (zl__302, (Big_int.of_int (4)))) -> ZVXCMP_VMSLEU
    | zl__303 when (eq_int (zl__303, (Big_int.of_int (5)))) -> ZVXCMP_VMSLE
    | zl__304 when (eq_int (zl__304, (Big_int.of_int (6)))) -> ZVXCMP_VMSGTU
    | _ -> ZVXCMP_VMSGT
  end)

and znum_of_vxcmpfunct6 (zargz3 : (zvxcmpfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVXCMP_VMSEQ -> Big_int.zero
    | ZVXCMP_VMSNE -> (Big_int.of_int (1))
    | ZVXCMP_VMSLTU -> (Big_int.of_int (2))
    | ZVXCMP_VMSLT -> (Big_int.of_int (3))
    | ZVXCMP_VMSLEU -> (Big_int.of_int (4))
    | ZVXCMP_VMSLE -> (Big_int.of_int (5))
    | ZVXCMP_VMSGTU -> (Big_int.of_int (6))
    | ZVXCMP_VMSGT -> (Big_int.of_int (7))
  end)

type zvicmpfunct6 =
  | ZVICMP_VMSEQ
  | ZVICMP_VMSNE
  | ZVICMP_VMSLEU
  | ZVICMP_VMSLE
  | ZVICMP_VMSGTU
  | ZVICMP_VMSGT;;

let string_of_zvicmpfunct6 = function
  | ZVICMP_VMSEQ -> "VICMP_VMSEQ"
  | ZVICMP_VMSNE -> "VICMP_VMSNE"
  | ZVICMP_VMSLEU -> "VICMP_VMSLEU"
  | ZVICMP_VMSLE -> "VICMP_VMSLE"
  | ZVICMP_VMSGTU -> "VICMP_VMSGTU"
  | ZVICMP_VMSGT -> "VICMP_VMSGT";;

let rec zundefined_vicmpfunct6 (() : (unit)) : zvicmpfunct6 = sail_call (fun r ->
  internal_pick [ZVICMP_VMSEQ; ZVICMP_VMSNE; ZVICMP_VMSLEU; ZVICMP_VMSLE; ZVICMP_VMSGTU; ZVICMP_VMSGT])

and zvicmpfunct6_of_num (zargz3 : (Big_int.num)) : zvicmpfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__293 when (eq_int (zl__293, Big_int.zero)) -> ZVICMP_VMSEQ
    | zl__294 when (eq_int (zl__294, (Big_int.of_int (1)))) -> ZVICMP_VMSNE
    | zl__295 when (eq_int (zl__295, (Big_int.of_int (2)))) -> ZVICMP_VMSLEU
    | zl__296 when (eq_int (zl__296, (Big_int.of_int (3)))) -> ZVICMP_VMSLE
    | zl__297 when (eq_int (zl__297, (Big_int.of_int (4)))) -> ZVICMP_VMSGTU
    | _ -> ZVICMP_VMSGT
  end)

and znum_of_vicmpfunct6 (zargz3 : (zvicmpfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVICMP_VMSEQ -> Big_int.zero
    | ZVICMP_VMSNE -> (Big_int.of_int (1))
    | ZVICMP_VMSLEU -> (Big_int.of_int (2))
    | ZVICMP_VMSLE -> (Big_int.of_int (3))
    | ZVICMP_VMSGTU -> (Big_int.of_int (4))
    | ZVICMP_VMSGT -> (Big_int.of_int (5))
  end)

type znvfunct6 = | ZNV_VNCLIPU | ZNV_VNCLIP;;

let string_of_znvfunct6 = function
  | ZNV_VNCLIPU -> "NV_VNCLIPU"
  | ZNV_VNCLIP -> "NV_VNCLIP";;

let rec zundefined_nvfunct6 (() : (unit)) : znvfunct6 = sail_call (fun r ->
  internal_pick [ZNV_VNCLIPU; ZNV_VNCLIP])

and znvfunct6_of_num (zargz3 : (Big_int.num)) : znvfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__292 when (eq_int (zl__292, Big_int.zero)) -> ZNV_VNCLIPU
    | _ -> ZNV_VNCLIP
  end)

and znum_of_nvfunct6 (zargz3 : (znvfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZNV_VNCLIPU -> Big_int.zero
    | ZNV_VNCLIP -> (Big_int.of_int (1))
  end)

type znvsfunct6 = | ZNVS_VNSRL | ZNVS_VNSRA;;

let string_of_znvsfunct6 = function
  | ZNVS_VNSRL -> "NVS_VNSRL"
  | ZNVS_VNSRA -> "NVS_VNSRA";;

let rec zundefined_nvsfunct6 (() : (unit)) : znvsfunct6 = sail_call (fun r ->
  internal_pick [ZNVS_VNSRL; ZNVS_VNSRA])

and znvsfunct6_of_num (zargz3 : (Big_int.num)) : znvsfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__291 when (eq_int (zl__291, Big_int.zero)) -> ZNVS_VNSRL
    | _ -> ZNVS_VNSRA
  end)

and znum_of_nvsfunct6 (zargz3 : (znvsfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZNVS_VNSRL -> Big_int.zero
    | ZNVS_VNSRA -> (Big_int.of_int (1))
  end)

type znxfunct6 = | ZNX_VNCLIPU | ZNX_VNCLIP;;

let string_of_znxfunct6 = function
  | ZNX_VNCLIPU -> "NX_VNCLIPU"
  | ZNX_VNCLIP -> "NX_VNCLIP";;

let rec zundefined_nxfunct6 (() : (unit)) : znxfunct6 = sail_call (fun r ->
  internal_pick [ZNX_VNCLIPU; ZNX_VNCLIP])

and znxfunct6_of_num (zargz3 : (Big_int.num)) : znxfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__290 when (eq_int (zl__290, Big_int.zero)) -> ZNX_VNCLIPU
    | _ -> ZNX_VNCLIP
  end)

and znum_of_nxfunct6 (zargz3 : (znxfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZNX_VNCLIPU -> Big_int.zero
    | ZNX_VNCLIP -> (Big_int.of_int (1))
  end)

type znxsfunct6 = | ZNXS_VNSRL | ZNXS_VNSRA;;

let string_of_znxsfunct6 = function
  | ZNXS_VNSRL -> "NXS_VNSRL"
  | ZNXS_VNSRA -> "NXS_VNSRA";;

let rec zundefined_nxsfunct6 (() : (unit)) : znxsfunct6 = sail_call (fun r ->
  internal_pick [ZNXS_VNSRL; ZNXS_VNSRA])

and znxsfunct6_of_num (zargz3 : (Big_int.num)) : znxsfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__289 when (eq_int (zl__289, Big_int.zero)) -> ZNXS_VNSRL
    | _ -> ZNXS_VNSRA
  end)

and znum_of_nxsfunct6 (zargz3 : (znxsfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZNXS_VNSRL -> Big_int.zero
    | ZNXS_VNSRA -> (Big_int.of_int (1))
  end)

type zmmfunct6 =
  | ZMM_VMAND
  | ZMM_VMNAND
  | ZMM_VMANDNOT
  | ZMM_VMXOR
  | ZMM_VMOR
  | ZMM_VMNOR
  | ZMM_VMORNOT
  | ZMM_VMXNOR;;

let string_of_zmmfunct6 = function
  | ZMM_VMAND -> "MM_VMAND"
  | ZMM_VMNAND -> "MM_VMNAND"
  | ZMM_VMANDNOT -> "MM_VMANDNOT"
  | ZMM_VMXOR -> "MM_VMXOR"
  | ZMM_VMOR -> "MM_VMOR"
  | ZMM_VMNOR -> "MM_VMNOR"
  | ZMM_VMORNOT -> "MM_VMORNOT"
  | ZMM_VMXNOR -> "MM_VMXNOR";;

let rec zundefined_mmfunct6 (() : (unit)) : zmmfunct6 = sail_call (fun r ->
  internal_pick [ZMM_VMAND; ZMM_VMNAND; ZMM_VMANDNOT; ZMM_VMXOR; ZMM_VMOR; ZMM_VMNOR; ZMM_VMORNOT; ZMM_VMXNOR])

and zmmfunct6_of_num (zargz3 : (Big_int.num)) : zmmfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__282 when (eq_int (zl__282, Big_int.zero)) -> ZMM_VMAND
    | zl__283 when (eq_int (zl__283, (Big_int.of_int (1)))) -> ZMM_VMNAND
    | zl__284 when (eq_int (zl__284, (Big_int.of_int (2)))) -> ZMM_VMANDNOT
    | zl__285 when (eq_int (zl__285, (Big_int.of_int (3)))) -> ZMM_VMXOR
    | zl__286 when (eq_int (zl__286, (Big_int.of_int (4)))) -> ZMM_VMOR
    | zl__287 when (eq_int (zl__287, (Big_int.of_int (5)))) -> ZMM_VMNOR
    | zl__288 when (eq_int (zl__288, (Big_int.of_int (6)))) -> ZMM_VMORNOT
    | _ -> ZMM_VMXNOR
  end)

and znum_of_mmfunct6 (zargz3 : (zmmfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZMM_VMAND -> Big_int.zero
    | ZMM_VMNAND -> (Big_int.of_int (1))
    | ZMM_VMANDNOT -> (Big_int.of_int (2))
    | ZMM_VMXOR -> (Big_int.of_int (3))
    | ZMM_VMOR -> (Big_int.of_int (4))
    | ZMM_VMNOR -> (Big_int.of_int (5))
    | ZMM_VMORNOT -> (Big_int.of_int (6))
    | ZMM_VMXNOR -> (Big_int.of_int (7))
  end)

type znifunct6 = | ZNI_VNCLIPU | ZNI_VNCLIP;;

let string_of_znifunct6 = function
  | ZNI_VNCLIPU -> "NI_VNCLIPU"
  | ZNI_VNCLIP -> "NI_VNCLIP";;

let rec zundefined_nifunct6 (() : (unit)) : znifunct6 = sail_call (fun r ->
  internal_pick [ZNI_VNCLIPU; ZNI_VNCLIP])

and znifunct6_of_num (zargz3 : (Big_int.num)) : znifunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__281 when (eq_int (zl__281, Big_int.zero)) -> ZNI_VNCLIPU
    | _ -> ZNI_VNCLIP
  end)

and znum_of_nifunct6 (zargz3 : (znifunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZNI_VNCLIPU -> Big_int.zero
    | ZNI_VNCLIP -> (Big_int.of_int (1))
  end)

type znisfunct6 = | ZNIS_VNSRL | ZNIS_VNSRA;;

let string_of_znisfunct6 = function
  | ZNIS_VNSRL -> "NIS_VNSRL"
  | ZNIS_VNSRA -> "NIS_VNSRA";;

let rec zundefined_nisfunct6 (() : (unit)) : znisfunct6 = sail_call (fun r ->
  internal_pick [ZNIS_VNSRL; ZNIS_VNSRA])

and znisfunct6_of_num (zargz3 : (Big_int.num)) : znisfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__280 when (eq_int (zl__280, Big_int.zero)) -> ZNIS_VNSRL
    | _ -> ZNIS_VNSRA
  end)

and znum_of_nisfunct6 (zargz3 : (znisfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZNIS_VNSRL -> Big_int.zero
    | ZNIS_VNSRA -> (Big_int.of_int (1))
  end)

type zwvvfunct6 =
  | ZWVV_VADD
  | ZWVV_VSUB
  | ZWVV_VADDU
  | ZWVV_VSUBU
  | ZWVV_VWMUL
  | ZWVV_VWMULU
  | ZWVV_VWMULSU;;

let string_of_zwvvfunct6 = function
  | ZWVV_VADD -> "WVV_VADD"
  | ZWVV_VSUB -> "WVV_VSUB"
  | ZWVV_VADDU -> "WVV_VADDU"
  | ZWVV_VSUBU -> "WVV_VSUBU"
  | ZWVV_VWMUL -> "WVV_VWMUL"
  | ZWVV_VWMULU -> "WVV_VWMULU"
  | ZWVV_VWMULSU -> "WVV_VWMULSU";;

let rec zundefined_wvvfunct6 (() : (unit)) : zwvvfunct6 = sail_call (fun r ->
  internal_pick [ZWVV_VADD; ZWVV_VSUB; ZWVV_VADDU; ZWVV_VSUBU; ZWVV_VWMUL; ZWVV_VWMULU; ZWVV_VWMULSU])

and zwvvfunct6_of_num (zargz3 : (Big_int.num)) : zwvvfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__274 when (eq_int (zl__274, Big_int.zero)) -> ZWVV_VADD
    | zl__275 when (eq_int (zl__275, (Big_int.of_int (1)))) -> ZWVV_VSUB
    | zl__276 when (eq_int (zl__276, (Big_int.of_int (2)))) -> ZWVV_VADDU
    | zl__277 when (eq_int (zl__277, (Big_int.of_int (3)))) -> ZWVV_VSUBU
    | zl__278 when (eq_int (zl__278, (Big_int.of_int (4)))) -> ZWVV_VWMUL
    | zl__279 when (eq_int (zl__279, (Big_int.of_int (5)))) -> ZWVV_VWMULU
    | _ -> ZWVV_VWMULSU
  end)

and znum_of_wvvfunct6 (zargz3 : (zwvvfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZWVV_VADD -> Big_int.zero
    | ZWVV_VSUB -> (Big_int.of_int (1))
    | ZWVV_VADDU -> (Big_int.of_int (2))
    | ZWVV_VSUBU -> (Big_int.of_int (3))
    | ZWVV_VWMUL -> (Big_int.of_int (4))
    | ZWVV_VWMULU -> (Big_int.of_int (5))
    | ZWVV_VWMULSU -> (Big_int.of_int (6))
  end)

type zwvfunct6 = | ZWV_VADD | ZWV_VSUB | ZWV_VADDU | ZWV_VSUBU;;

let string_of_zwvfunct6 = function
  | ZWV_VADD -> "WV_VADD"
  | ZWV_VSUB -> "WV_VSUB"
  | ZWV_VADDU -> "WV_VADDU"
  | ZWV_VSUBU -> "WV_VSUBU";;

let rec zundefined_wvfunct6 (() : (unit)) : zwvfunct6 = sail_call (fun r ->
  internal_pick [ZWV_VADD; ZWV_VSUB; ZWV_VADDU; ZWV_VSUBU])

and zwvfunct6_of_num (zargz3 : (Big_int.num)) : zwvfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__271 when (eq_int (zl__271, Big_int.zero)) -> ZWV_VADD
    | zl__272 when (eq_int (zl__272, (Big_int.of_int (1)))) -> ZWV_VSUB
    | zl__273 when (eq_int (zl__273, (Big_int.of_int (2)))) -> ZWV_VADDU
    | _ -> ZWV_VSUBU
  end)

and znum_of_wvfunct6 (zargz3 : (zwvfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZWV_VADD -> Big_int.zero
    | ZWV_VSUB -> (Big_int.of_int (1))
    | ZWV_VADDU -> (Big_int.of_int (2))
    | ZWV_VSUBU -> (Big_int.of_int (3))
  end)

type zwvxfunct6 =
  | ZWVX_VADD
  | ZWVX_VSUB
  | ZWVX_VADDU
  | ZWVX_VSUBU
  | ZWVX_VWMUL
  | ZWVX_VWMULU
  | ZWVX_VWMULSU;;

let string_of_zwvxfunct6 = function
  | ZWVX_VADD -> "WVX_VADD"
  | ZWVX_VSUB -> "WVX_VSUB"
  | ZWVX_VADDU -> "WVX_VADDU"
  | ZWVX_VSUBU -> "WVX_VSUBU"
  | ZWVX_VWMUL -> "WVX_VWMUL"
  | ZWVX_VWMULU -> "WVX_VWMULU"
  | ZWVX_VWMULSU -> "WVX_VWMULSU";;

let rec zundefined_wvxfunct6 (() : (unit)) : zwvxfunct6 = sail_call (fun r ->
  internal_pick [ZWVX_VADD; ZWVX_VSUB; ZWVX_VADDU; ZWVX_VSUBU; ZWVX_VWMUL; ZWVX_VWMULU; ZWVX_VWMULSU])

and zwvxfunct6_of_num (zargz3 : (Big_int.num)) : zwvxfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__265 when (eq_int (zl__265, Big_int.zero)) -> ZWVX_VADD
    | zl__266 when (eq_int (zl__266, (Big_int.of_int (1)))) -> ZWVX_VSUB
    | zl__267 when (eq_int (zl__267, (Big_int.of_int (2)))) -> ZWVX_VADDU
    | zl__268 when (eq_int (zl__268, (Big_int.of_int (3)))) -> ZWVX_VSUBU
    | zl__269 when (eq_int (zl__269, (Big_int.of_int (4)))) -> ZWVX_VWMUL
    | zl__270 when (eq_int (zl__270, (Big_int.of_int (5)))) -> ZWVX_VWMULU
    | _ -> ZWVX_VWMULSU
  end)

and znum_of_wvxfunct6 (zargz3 : (zwvxfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZWVX_VADD -> Big_int.zero
    | ZWVX_VSUB -> (Big_int.of_int (1))
    | ZWVX_VADDU -> (Big_int.of_int (2))
    | ZWVX_VSUBU -> (Big_int.of_int (3))
    | ZWVX_VWMUL -> (Big_int.of_int (4))
    | ZWVX_VWMULU -> (Big_int.of_int (5))
    | ZWVX_VWMULSU -> (Big_int.of_int (6))
  end)

type zwxfunct6 = | ZWX_VADD | ZWX_VSUB | ZWX_VADDU | ZWX_VSUBU;;

let string_of_zwxfunct6 = function
  | ZWX_VADD -> "WX_VADD"
  | ZWX_VSUB -> "WX_VSUB"
  | ZWX_VADDU -> "WX_VADDU"
  | ZWX_VSUBU -> "WX_VSUBU";;

let rec zundefined_wxfunct6 (() : (unit)) : zwxfunct6 = sail_call (fun r ->
  internal_pick [ZWX_VADD; ZWX_VSUB; ZWX_VADDU; ZWX_VSUBU])

and zwxfunct6_of_num (zargz3 : (Big_int.num)) : zwxfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__262 when (eq_int (zl__262, Big_int.zero)) -> ZWX_VADD
    | zl__263 when (eq_int (zl__263, (Big_int.of_int (1)))) -> ZWX_VSUB
    | zl__264 when (eq_int (zl__264, (Big_int.of_int (2)))) -> ZWX_VADDU
    | _ -> ZWX_VSUBU
  end)

and znum_of_wxfunct6 (zargz3 : (zwxfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZWX_VADD -> Big_int.zero
    | ZWX_VSUB -> (Big_int.of_int (1))
    | ZWX_VADDU -> (Big_int.of_int (2))
    | ZWX_VSUBU -> (Big_int.of_int (3))
  end)

type zvext2funct6 = | ZVEXT2_ZVF2 | ZVEXT2_SVF2;;

let string_of_zvext2funct6 = function
  | ZVEXT2_ZVF2 -> "VEXT2_ZVF2"
  | ZVEXT2_SVF2 -> "VEXT2_SVF2";;

let rec zundefined_vext2funct6 (() : (unit)) : zvext2funct6 = sail_call (fun r ->
  internal_pick [ZVEXT2_ZVF2; ZVEXT2_SVF2])

and zvext2funct6_of_num (zargz3 : (Big_int.num)) : zvext2funct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__261 when (eq_int (zl__261, Big_int.zero)) -> ZVEXT2_ZVF2
    | _ -> ZVEXT2_SVF2
  end)

and znum_of_vext2funct6 (zargz3 : (zvext2funct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVEXT2_ZVF2 -> Big_int.zero
    | ZVEXT2_SVF2 -> (Big_int.of_int (1))
  end)

type zvext4funct6 = | ZVEXT4_ZVF4 | ZVEXT4_SVF4;;

let string_of_zvext4funct6 = function
  | ZVEXT4_ZVF4 -> "VEXT4_ZVF4"
  | ZVEXT4_SVF4 -> "VEXT4_SVF4";;

let rec zundefined_vext4funct6 (() : (unit)) : zvext4funct6 = sail_call (fun r ->
  internal_pick [ZVEXT4_ZVF4; ZVEXT4_SVF4])

and zvext4funct6_of_num (zargz3 : (Big_int.num)) : zvext4funct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__260 when (eq_int (zl__260, Big_int.zero)) -> ZVEXT4_ZVF4
    | _ -> ZVEXT4_SVF4
  end)

and znum_of_vext4funct6 (zargz3 : (zvext4funct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVEXT4_ZVF4 -> Big_int.zero
    | ZVEXT4_SVF4 -> (Big_int.of_int (1))
  end)

type zvext8funct6 = | ZVEXT8_ZVF8 | ZVEXT8_SVF8;;

let string_of_zvext8funct6 = function
  | ZVEXT8_ZVF8 -> "VEXT8_ZVF8"
  | ZVEXT8_SVF8 -> "VEXT8_SVF8";;

let rec zundefined_vext8funct6 (() : (unit)) : zvext8funct6 = sail_call (fun r ->
  internal_pick [ZVEXT8_ZVF8; ZVEXT8_SVF8])

and zvext8funct6_of_num (zargz3 : (Big_int.num)) : zvext8funct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__259 when (eq_int (zl__259, Big_int.zero)) -> ZVEXT8_ZVF8
    | _ -> ZVEXT8_SVF8
  end)

and znum_of_vext8funct6 (zargz3 : (zvext8funct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVEXT8_ZVF8 -> Big_int.zero
    | ZVEXT8_SVF8 -> (Big_int.of_int (1))
  end)

type zvxfunct6 =
  | ZVX_VADD
  | ZVX_VSUB
  | ZVX_VRSUB
  | ZVX_VMINU
  | ZVX_VMIN
  | ZVX_VMAXU
  | ZVX_VMAX
  | ZVX_VAND
  | ZVX_VOR
  | ZVX_VXOR
  | ZVX_VSADDU
  | ZVX_VSADD
  | ZVX_VSSUBU
  | ZVX_VSSUB
  | ZVX_VSLL
  | ZVX_VSMUL
  | ZVX_VSRL
  | ZVX_VSRA
  | ZVX_VSSRL
  | ZVX_VSSRA;;

let string_of_zvxfunct6 = function
  | ZVX_VADD -> "VX_VADD"
  | ZVX_VSUB -> "VX_VSUB"
  | ZVX_VRSUB -> "VX_VRSUB"
  | ZVX_VMINU -> "VX_VMINU"
  | ZVX_VMIN -> "VX_VMIN"
  | ZVX_VMAXU -> "VX_VMAXU"
  | ZVX_VMAX -> "VX_VMAX"
  | ZVX_VAND -> "VX_VAND"
  | ZVX_VOR -> "VX_VOR"
  | ZVX_VXOR -> "VX_VXOR"
  | ZVX_VSADDU -> "VX_VSADDU"
  | ZVX_VSADD -> "VX_VSADD"
  | ZVX_VSSUBU -> "VX_VSSUBU"
  | ZVX_VSSUB -> "VX_VSSUB"
  | ZVX_VSLL -> "VX_VSLL"
  | ZVX_VSMUL -> "VX_VSMUL"
  | ZVX_VSRL -> "VX_VSRL"
  | ZVX_VSRA -> "VX_VSRA"
  | ZVX_VSSRL -> "VX_VSSRL"
  | ZVX_VSSRA -> "VX_VSSRA";;

let rec zundefined_vxfunct6 (() : (unit)) : zvxfunct6 = sail_call (fun r ->
  internal_pick [ZVX_VADD; ZVX_VSUB; ZVX_VRSUB; ZVX_VMINU; ZVX_VMIN; ZVX_VMAXU; ZVX_VMAX; ZVX_VAND; ZVX_VOR; ZVX_VXOR; ZVX_VSADDU; ZVX_VSADD; ZVX_VSSUBU; ZVX_VSSUB; ZVX_VSLL; ZVX_VSMUL; ZVX_VSRL; ZVX_VSRA; ZVX_VSSRL; ZVX_VSSRA])

and zvxfunct6_of_num (zargz3 : (Big_int.num)) : zvxfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__240 when (eq_int (zl__240, Big_int.zero)) -> ZVX_VADD
    | zl__241 when (eq_int (zl__241, (Big_int.of_int (1)))) -> ZVX_VSUB
    | zl__242 when (eq_int (zl__242, (Big_int.of_int (2)))) -> ZVX_VRSUB
    | zl__243 when (eq_int (zl__243, (Big_int.of_int (3)))) -> ZVX_VMINU
    | zl__244 when (eq_int (zl__244, (Big_int.of_int (4)))) -> ZVX_VMIN
    | zl__245 when (eq_int (zl__245, (Big_int.of_int (5)))) -> ZVX_VMAXU
    | zl__246 when (eq_int (zl__246, (Big_int.of_int (6)))) -> ZVX_VMAX
    | zl__247 when (eq_int (zl__247, (Big_int.of_int (7)))) -> ZVX_VAND
    | zl__248 when (eq_int (zl__248, (Big_int.of_int (8)))) -> ZVX_VOR
    | zl__249 when (eq_int (zl__249, (Big_int.of_int (9)))) -> ZVX_VXOR
    | zl__250 when (eq_int (zl__250, (Big_int.of_int (10)))) -> ZVX_VSADDU
    | zl__251 when (eq_int (zl__251, (Big_int.of_int (11)))) -> ZVX_VSADD
    | zl__252 when (eq_int (zl__252, (Big_int.of_int (12)))) -> ZVX_VSSUBU
    | zl__253 when (eq_int (zl__253, (Big_int.of_int (13)))) -> ZVX_VSSUB
    | zl__254 when (eq_int (zl__254, (Big_int.of_int (14)))) -> ZVX_VSLL
    | zl__255 when (eq_int (zl__255, (Big_int.of_int (15)))) -> ZVX_VSMUL
    | zl__256 when (eq_int (zl__256, (Big_int.of_int (16)))) -> ZVX_VSRL
    | zl__257 when (eq_int (zl__257, (Big_int.of_int (17)))) -> ZVX_VSRA
    | zl__258 when (eq_int (zl__258, (Big_int.of_int (18)))) -> ZVX_VSSRL
    | _ -> ZVX_VSSRA
  end)

and znum_of_vxfunct6 (zargz3 : (zvxfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVX_VADD -> Big_int.zero
    | ZVX_VSUB -> (Big_int.of_int (1))
    | ZVX_VRSUB -> (Big_int.of_int (2))
    | ZVX_VMINU -> (Big_int.of_int (3))
    | ZVX_VMIN -> (Big_int.of_int (4))
    | ZVX_VMAXU -> (Big_int.of_int (5))
    | ZVX_VMAX -> (Big_int.of_int (6))
    | ZVX_VAND -> (Big_int.of_int (7))
    | ZVX_VOR -> (Big_int.of_int (8))
    | ZVX_VXOR -> (Big_int.of_int (9))
    | ZVX_VSADDU -> (Big_int.of_int (10))
    | ZVX_VSADD -> (Big_int.of_int (11))
    | ZVX_VSSUBU -> (Big_int.of_int (12))
    | ZVX_VSSUB -> (Big_int.of_int (13))
    | ZVX_VSLL -> (Big_int.of_int (14))
    | ZVX_VSMUL -> (Big_int.of_int (15))
    | ZVX_VSRL -> (Big_int.of_int (16))
    | ZVX_VSRA -> (Big_int.of_int (17))
    | ZVX_VSSRL -> (Big_int.of_int (18))
    | ZVX_VSSRA -> (Big_int.of_int (19))
  end)

type zvifunct6 =
  | ZVI_VADD
  | ZVI_VRSUB
  | ZVI_VAND
  | ZVI_VOR
  | ZVI_VXOR
  | ZVI_VSADDU
  | ZVI_VSADD
  | ZVI_VSLL
  | ZVI_VSRL
  | ZVI_VSRA
  | ZVI_VSSRL
  | ZVI_VSSRA;;

let string_of_zvifunct6 = function
  | ZVI_VADD -> "VI_VADD"
  | ZVI_VRSUB -> "VI_VRSUB"
  | ZVI_VAND -> "VI_VAND"
  | ZVI_VOR -> "VI_VOR"
  | ZVI_VXOR -> "VI_VXOR"
  | ZVI_VSADDU -> "VI_VSADDU"
  | ZVI_VSADD -> "VI_VSADD"
  | ZVI_VSLL -> "VI_VSLL"
  | ZVI_VSRL -> "VI_VSRL"
  | ZVI_VSRA -> "VI_VSRA"
  | ZVI_VSSRL -> "VI_VSSRL"
  | ZVI_VSSRA -> "VI_VSSRA";;

let rec zundefined_vifunct6 (() : (unit)) : zvifunct6 = sail_call (fun r ->
  internal_pick [ZVI_VADD; ZVI_VRSUB; ZVI_VAND; ZVI_VOR; ZVI_VXOR; ZVI_VSADDU; ZVI_VSADD; ZVI_VSLL; ZVI_VSRL; ZVI_VSRA; ZVI_VSSRL; ZVI_VSSRA])

and zvifunct6_of_num (zargz3 : (Big_int.num)) : zvifunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__229 when (eq_int (zl__229, Big_int.zero)) -> ZVI_VADD
    | zl__230 when (eq_int (zl__230, (Big_int.of_int (1)))) -> ZVI_VRSUB
    | zl__231 when (eq_int (zl__231, (Big_int.of_int (2)))) -> ZVI_VAND
    | zl__232 when (eq_int (zl__232, (Big_int.of_int (3)))) -> ZVI_VOR
    | zl__233 when (eq_int (zl__233, (Big_int.of_int (4)))) -> ZVI_VXOR
    | zl__234 when (eq_int (zl__234, (Big_int.of_int (5)))) -> ZVI_VSADDU
    | zl__235 when (eq_int (zl__235, (Big_int.of_int (6)))) -> ZVI_VSADD
    | zl__236 when (eq_int (zl__236, (Big_int.of_int (7)))) -> ZVI_VSLL
    | zl__237 when (eq_int (zl__237, (Big_int.of_int (8)))) -> ZVI_VSRL
    | zl__238 when (eq_int (zl__238, (Big_int.of_int (9)))) -> ZVI_VSRA
    | zl__239 when (eq_int (zl__239, (Big_int.of_int (10)))) -> ZVI_VSSRL
    | _ -> ZVI_VSSRA
  end)

and znum_of_vifunct6 (zargz3 : (zvifunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVI_VADD -> Big_int.zero
    | ZVI_VRSUB -> (Big_int.of_int (1))
    | ZVI_VAND -> (Big_int.of_int (2))
    | ZVI_VOR -> (Big_int.of_int (3))
    | ZVI_VXOR -> (Big_int.of_int (4))
    | ZVI_VSADDU -> (Big_int.of_int (5))
    | ZVI_VSADD -> (Big_int.of_int (6))
    | ZVI_VSLL -> (Big_int.of_int (7))
    | ZVI_VSRL -> (Big_int.of_int (8))
    | ZVI_VSRA -> (Big_int.of_int (9))
    | ZVI_VSSRL -> (Big_int.of_int (10))
    | ZVI_VSSRA -> (Big_int.of_int (11))
  end)

type zvxsgfunct6 = | ZVX_VSLIDEUP | ZVX_VSLIDEDOWN | ZVX_VRGATHER;;

let string_of_zvxsgfunct6 = function
  | ZVX_VSLIDEUP -> "VX_VSLIDEUP"
  | ZVX_VSLIDEDOWN -> "VX_VSLIDEDOWN"
  | ZVX_VRGATHER -> "VX_VRGATHER";;

let rec zundefined_vxsgfunct6 (() : (unit)) : zvxsgfunct6 = sail_call (fun r ->
  internal_pick [ZVX_VSLIDEUP; ZVX_VSLIDEDOWN; ZVX_VRGATHER])

and zvxsgfunct6_of_num (zargz3 : (Big_int.num)) : zvxsgfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__227 when (eq_int (zl__227, Big_int.zero)) -> ZVX_VSLIDEUP
    | zl__228 when (eq_int (zl__228, (Big_int.of_int (1)))) -> ZVX_VSLIDEDOWN
    | _ -> ZVX_VRGATHER
  end)

and znum_of_vxsgfunct6 (zargz3 : (zvxsgfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVX_VSLIDEUP -> Big_int.zero
    | ZVX_VSLIDEDOWN -> (Big_int.of_int (1))
    | ZVX_VRGATHER -> (Big_int.of_int (2))
  end)

type zvisgfunct6 = | ZVI_VSLIDEUP | ZVI_VSLIDEDOWN | ZVI_VRGATHER;;

let string_of_zvisgfunct6 = function
  | ZVI_VSLIDEUP -> "VI_VSLIDEUP"
  | ZVI_VSLIDEDOWN -> "VI_VSLIDEDOWN"
  | ZVI_VRGATHER -> "VI_VRGATHER";;

let rec zundefined_visgfunct6 (() : (unit)) : zvisgfunct6 = sail_call (fun r ->
  internal_pick [ZVI_VSLIDEUP; ZVI_VSLIDEDOWN; ZVI_VRGATHER])

and zvisgfunct6_of_num (zargz3 : (Big_int.num)) : zvisgfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__225 when (eq_int (zl__225, Big_int.zero)) -> ZVI_VSLIDEUP
    | zl__226 when (eq_int (zl__226, (Big_int.of_int (1)))) -> ZVI_VSLIDEDOWN
    | _ -> ZVI_VRGATHER
  end)

and znum_of_visgfunct6 (zargz3 : (zvisgfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVI_VSLIDEUP -> Big_int.zero
    | ZVI_VSLIDEDOWN -> (Big_int.of_int (1))
    | ZVI_VRGATHER -> (Big_int.of_int (2))
  end)

type zmvvfunct6 =
  | ZMVV_VAADDU
  | ZMVV_VAADD
  | ZMVV_VASUBU
  | ZMVV_VASUB
  | ZMVV_VMUL
  | ZMVV_VMULH
  | ZMVV_VMULHU
  | ZMVV_VMULHSU
  | ZMVV_VDIVU
  | ZMVV_VDIV
  | ZMVV_VREMU
  | ZMVV_VREM;;

let string_of_zmvvfunct6 = function
  | ZMVV_VAADDU -> "MVV_VAADDU"
  | ZMVV_VAADD -> "MVV_VAADD"
  | ZMVV_VASUBU -> "MVV_VASUBU"
  | ZMVV_VASUB -> "MVV_VASUB"
  | ZMVV_VMUL -> "MVV_VMUL"
  | ZMVV_VMULH -> "MVV_VMULH"
  | ZMVV_VMULHU -> "MVV_VMULHU"
  | ZMVV_VMULHSU -> "MVV_VMULHSU"
  | ZMVV_VDIVU -> "MVV_VDIVU"
  | ZMVV_VDIV -> "MVV_VDIV"
  | ZMVV_VREMU -> "MVV_VREMU"
  | ZMVV_VREM -> "MVV_VREM";;

let rec zundefined_mvvfunct6 (() : (unit)) : zmvvfunct6 = sail_call (fun r ->
  internal_pick [ZMVV_VAADDU; ZMVV_VAADD; ZMVV_VASUBU; ZMVV_VASUB; ZMVV_VMUL; ZMVV_VMULH; ZMVV_VMULHU; ZMVV_VMULHSU; ZMVV_VDIVU; ZMVV_VDIV; ZMVV_VREMU; ZMVV_VREM])

and zmvvfunct6_of_num (zargz3 : (Big_int.num)) : zmvvfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__214 when (eq_int (zl__214, Big_int.zero)) -> ZMVV_VAADDU
    | zl__215 when (eq_int (zl__215, (Big_int.of_int (1)))) -> ZMVV_VAADD
    | zl__216 when (eq_int (zl__216, (Big_int.of_int (2)))) -> ZMVV_VASUBU
    | zl__217 when (eq_int (zl__217, (Big_int.of_int (3)))) -> ZMVV_VASUB
    | zl__218 when (eq_int (zl__218, (Big_int.of_int (4)))) -> ZMVV_VMUL
    | zl__219 when (eq_int (zl__219, (Big_int.of_int (5)))) -> ZMVV_VMULH
    | zl__220 when (eq_int (zl__220, (Big_int.of_int (6)))) -> ZMVV_VMULHU
    | zl__221 when (eq_int (zl__221, (Big_int.of_int (7)))) -> ZMVV_VMULHSU
    | zl__222 when (eq_int (zl__222, (Big_int.of_int (8)))) -> ZMVV_VDIVU
    | zl__223 when (eq_int (zl__223, (Big_int.of_int (9)))) -> ZMVV_VDIV
    | zl__224 when (eq_int (zl__224, (Big_int.of_int (10)))) -> ZMVV_VREMU
    | _ -> ZMVV_VREM
  end)

and znum_of_mvvfunct6 (zargz3 : (zmvvfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZMVV_VAADDU -> Big_int.zero
    | ZMVV_VAADD -> (Big_int.of_int (1))
    | ZMVV_VASUBU -> (Big_int.of_int (2))
    | ZMVV_VASUB -> (Big_int.of_int (3))
    | ZMVV_VMUL -> (Big_int.of_int (4))
    | ZMVV_VMULH -> (Big_int.of_int (5))
    | ZMVV_VMULHU -> (Big_int.of_int (6))
    | ZMVV_VMULHSU -> (Big_int.of_int (7))
    | ZMVV_VDIVU -> (Big_int.of_int (8))
    | ZMVV_VDIV -> (Big_int.of_int (9))
    | ZMVV_VREMU -> (Big_int.of_int (10))
    | ZMVV_VREM -> (Big_int.of_int (11))
  end)

type zmvvmafunct6 = | ZMVV_VMACC | ZMVV_VNMSAC | ZMVV_VMADD | ZMVV_VNMSUB;;

let string_of_zmvvmafunct6 = function
  | ZMVV_VMACC -> "MVV_VMACC"
  | ZMVV_VNMSAC -> "MVV_VNMSAC"
  | ZMVV_VMADD -> "MVV_VMADD"
  | ZMVV_VNMSUB -> "MVV_VNMSUB";;

let rec zundefined_mvvmafunct6 (() : (unit)) : zmvvmafunct6 = sail_call (fun r ->
  internal_pick [ZMVV_VMACC; ZMVV_VNMSAC; ZMVV_VMADD; ZMVV_VNMSUB])

and zmvvmafunct6_of_num (zargz3 : (Big_int.num)) : zmvvmafunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__211 when (eq_int (zl__211, Big_int.zero)) -> ZMVV_VMACC
    | zl__212 when (eq_int (zl__212, (Big_int.of_int (1)))) -> ZMVV_VNMSAC
    | zl__213 when (eq_int (zl__213, (Big_int.of_int (2)))) -> ZMVV_VMADD
    | _ -> ZMVV_VNMSUB
  end)

and znum_of_mvvmafunct6 (zargz3 : (zmvvmafunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZMVV_VMACC -> Big_int.zero
    | ZMVV_VNMSAC -> (Big_int.of_int (1))
    | ZMVV_VMADD -> (Big_int.of_int (2))
    | ZMVV_VNMSUB -> (Big_int.of_int (3))
  end)

type zrmvvfunct6 =
  | ZMVV_VREDSUM
  | ZMVV_VREDAND
  | ZMVV_VREDOR
  | ZMVV_VREDXOR
  | ZMVV_VREDMINU
  | ZMVV_VREDMIN
  | ZMVV_VREDMAXU
  | ZMVV_VREDMAX;;

let string_of_zrmvvfunct6 = function
  | ZMVV_VREDSUM -> "MVV_VREDSUM"
  | ZMVV_VREDAND -> "MVV_VREDAND"
  | ZMVV_VREDOR -> "MVV_VREDOR"
  | ZMVV_VREDXOR -> "MVV_VREDXOR"
  | ZMVV_VREDMINU -> "MVV_VREDMINU"
  | ZMVV_VREDMIN -> "MVV_VREDMIN"
  | ZMVV_VREDMAXU -> "MVV_VREDMAXU"
  | ZMVV_VREDMAX -> "MVV_VREDMAX";;

let rec zundefined_rmvvfunct6 (() : (unit)) : zrmvvfunct6 = sail_call (fun r ->
  internal_pick [ZMVV_VREDSUM; ZMVV_VREDAND; ZMVV_VREDOR; ZMVV_VREDXOR; ZMVV_VREDMINU; ZMVV_VREDMIN; ZMVV_VREDMAXU; ZMVV_VREDMAX])

and zrmvvfunct6_of_num (zargz3 : (Big_int.num)) : zrmvvfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__204 when (eq_int (zl__204, Big_int.zero)) -> ZMVV_VREDSUM
    | zl__205 when (eq_int (zl__205, (Big_int.of_int (1)))) -> ZMVV_VREDAND
    | zl__206 when (eq_int (zl__206, (Big_int.of_int (2)))) -> ZMVV_VREDOR
    | zl__207 when (eq_int (zl__207, (Big_int.of_int (3)))) -> ZMVV_VREDXOR
    | zl__208 when (eq_int (zl__208, (Big_int.of_int (4)))) -> ZMVV_VREDMINU
    | zl__209 when (eq_int (zl__209, (Big_int.of_int (5)))) -> ZMVV_VREDMIN
    | zl__210 when (eq_int (zl__210, (Big_int.of_int (6)))) -> ZMVV_VREDMAXU
    | _ -> ZMVV_VREDMAX
  end)

and znum_of_rmvvfunct6 (zargz3 : (zrmvvfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZMVV_VREDSUM -> Big_int.zero
    | ZMVV_VREDAND -> (Big_int.of_int (1))
    | ZMVV_VREDOR -> (Big_int.of_int (2))
    | ZMVV_VREDXOR -> (Big_int.of_int (3))
    | ZMVV_VREDMINU -> (Big_int.of_int (4))
    | ZMVV_VREDMIN -> (Big_int.of_int (5))
    | ZMVV_VREDMAXU -> (Big_int.of_int (6))
    | ZMVV_VREDMAX -> (Big_int.of_int (7))
  end)

type zrivvfunct6 = | ZIVV_VWREDSUMU | ZIVV_VWREDSUM;;

let string_of_zrivvfunct6 = function
  | ZIVV_VWREDSUMU -> "IVV_VWREDSUMU"
  | ZIVV_VWREDSUM -> "IVV_VWREDSUM";;

let rec zundefined_rivvfunct6 (() : (unit)) : zrivvfunct6 = sail_call (fun r ->
  internal_pick [ZIVV_VWREDSUMU; ZIVV_VWREDSUM])

and zrivvfunct6_of_num (zargz3 : (Big_int.num)) : zrivvfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__203 when (eq_int (zl__203, Big_int.zero)) -> ZIVV_VWREDSUMU
    | _ -> ZIVV_VWREDSUM
  end)

and znum_of_rivvfunct6 (zargz3 : (zrivvfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZIVV_VWREDSUMU -> Big_int.zero
    | ZIVV_VWREDSUM -> (Big_int.of_int (1))
  end)

type zrfvvfunct6 =
  | ZFVV_VFREDOSUM
  | ZFVV_VFREDUSUM
  | ZFVV_VFREDMAX
  | ZFVV_VFREDMIN
  | ZFVV_VFWREDOSUM
  | ZFVV_VFWREDUSUM;;

let string_of_zrfvvfunct6 = function
  | ZFVV_VFREDOSUM -> "FVV_VFREDOSUM"
  | ZFVV_VFREDUSUM -> "FVV_VFREDUSUM"
  | ZFVV_VFREDMAX -> "FVV_VFREDMAX"
  | ZFVV_VFREDMIN -> "FVV_VFREDMIN"
  | ZFVV_VFWREDOSUM -> "FVV_VFWREDOSUM"
  | ZFVV_VFWREDUSUM -> "FVV_VFWREDUSUM";;

let rec zundefined_rfvvfunct6 (() : (unit)) : zrfvvfunct6 = sail_call (fun r ->
  internal_pick [ZFVV_VFREDOSUM; ZFVV_VFREDUSUM; ZFVV_VFREDMAX; ZFVV_VFREDMIN; ZFVV_VFWREDOSUM; ZFVV_VFWREDUSUM])

and zrfvvfunct6_of_num (zargz3 : (Big_int.num)) : zrfvvfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__198 when (eq_int (zl__198, Big_int.zero)) -> ZFVV_VFREDOSUM
    | zl__199 when (eq_int (zl__199, (Big_int.of_int (1)))) -> ZFVV_VFREDUSUM
    | zl__200 when (eq_int (zl__200, (Big_int.of_int (2)))) -> ZFVV_VFREDMAX
    | zl__201 when (eq_int (zl__201, (Big_int.of_int (3)))) -> ZFVV_VFREDMIN
    | zl__202 when (eq_int (zl__202, (Big_int.of_int (4)))) -> ZFVV_VFWREDOSUM
    | _ -> ZFVV_VFWREDUSUM
  end)

and znum_of_rfvvfunct6 (zargz3 : (zrfvvfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZFVV_VFREDOSUM -> Big_int.zero
    | ZFVV_VFREDUSUM -> (Big_int.of_int (1))
    | ZFVV_VFREDMAX -> (Big_int.of_int (2))
    | ZFVV_VFREDMIN -> (Big_int.of_int (3))
    | ZFVV_VFWREDOSUM -> (Big_int.of_int (4))
    | ZFVV_VFWREDUSUM -> (Big_int.of_int (5))
  end)

type zwmvvfunct6 = | ZWMVV_VWMACCU | ZWMVV_VWMACC | ZWMVV_VWMACCSU;;

let string_of_zwmvvfunct6 = function
  | ZWMVV_VWMACCU -> "WMVV_VWMACCU"
  | ZWMVV_VWMACC -> "WMVV_VWMACC"
  | ZWMVV_VWMACCSU -> "WMVV_VWMACCSU";;

let rec zundefined_wmvvfunct6 (() : (unit)) : zwmvvfunct6 = sail_call (fun r ->
  internal_pick [ZWMVV_VWMACCU; ZWMVV_VWMACC; ZWMVV_VWMACCSU])

and zwmvvfunct6_of_num (zargz3 : (Big_int.num)) : zwmvvfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__196 when (eq_int (zl__196, Big_int.zero)) -> ZWMVV_VWMACCU
    | zl__197 when (eq_int (zl__197, (Big_int.of_int (1)))) -> ZWMVV_VWMACC
    | _ -> ZWMVV_VWMACCSU
  end)

and znum_of_wmvvfunct6 (zargz3 : (zwmvvfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZWMVV_VWMACCU -> Big_int.zero
    | ZWMVV_VWMACC -> (Big_int.of_int (1))
    | ZWMVV_VWMACCSU -> (Big_int.of_int (2))
  end)

type zmvxfunct6 =
  | ZMVX_VAADDU
  | ZMVX_VAADD
  | ZMVX_VASUBU
  | ZMVX_VASUB
  | ZMVX_VSLIDE1UP
  | ZMVX_VSLIDE1DOWN
  | ZMVX_VMUL
  | ZMVX_VMULH
  | ZMVX_VMULHU
  | ZMVX_VMULHSU
  | ZMVX_VDIVU
  | ZMVX_VDIV
  | ZMVX_VREMU
  | ZMVX_VREM;;

let string_of_zmvxfunct6 = function
  | ZMVX_VAADDU -> "MVX_VAADDU"
  | ZMVX_VAADD -> "MVX_VAADD"
  | ZMVX_VASUBU -> "MVX_VASUBU"
  | ZMVX_VASUB -> "MVX_VASUB"
  | ZMVX_VSLIDE1UP -> "MVX_VSLIDE1UP"
  | ZMVX_VSLIDE1DOWN -> "MVX_VSLIDE1DOWN"
  | ZMVX_VMUL -> "MVX_VMUL"
  | ZMVX_VMULH -> "MVX_VMULH"
  | ZMVX_VMULHU -> "MVX_VMULHU"
  | ZMVX_VMULHSU -> "MVX_VMULHSU"
  | ZMVX_VDIVU -> "MVX_VDIVU"
  | ZMVX_VDIV -> "MVX_VDIV"
  | ZMVX_VREMU -> "MVX_VREMU"
  | ZMVX_VREM -> "MVX_VREM";;

let rec zundefined_mvxfunct6 (() : (unit)) : zmvxfunct6 = sail_call (fun r ->
  internal_pick [ZMVX_VAADDU; ZMVX_VAADD; ZMVX_VASUBU; ZMVX_VASUB; ZMVX_VSLIDE1UP; ZMVX_VSLIDE1DOWN; ZMVX_VMUL; ZMVX_VMULH; ZMVX_VMULHU; ZMVX_VMULHSU; ZMVX_VDIVU; ZMVX_VDIV; ZMVX_VREMU; ZMVX_VREM])

and zmvxfunct6_of_num (zargz3 : (Big_int.num)) : zmvxfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__183 when (eq_int (zl__183, Big_int.zero)) -> ZMVX_VAADDU
    | zl__184 when (eq_int (zl__184, (Big_int.of_int (1)))) -> ZMVX_VAADD
    | zl__185 when (eq_int (zl__185, (Big_int.of_int (2)))) -> ZMVX_VASUBU
    | zl__186 when (eq_int (zl__186, (Big_int.of_int (3)))) -> ZMVX_VASUB
    | zl__187 when (eq_int (zl__187, (Big_int.of_int (4)))) -> ZMVX_VSLIDE1UP
    | zl__188 when (eq_int (zl__188, (Big_int.of_int (5)))) -> ZMVX_VSLIDE1DOWN
    | zl__189 when (eq_int (zl__189, (Big_int.of_int (6)))) -> ZMVX_VMUL
    | zl__190 when (eq_int (zl__190, (Big_int.of_int (7)))) -> ZMVX_VMULH
    | zl__191 when (eq_int (zl__191, (Big_int.of_int (8)))) -> ZMVX_VMULHU
    | zl__192 when (eq_int (zl__192, (Big_int.of_int (9)))) -> ZMVX_VMULHSU
    | zl__193 when (eq_int (zl__193, (Big_int.of_int (10)))) -> ZMVX_VDIVU
    | zl__194 when (eq_int (zl__194, (Big_int.of_int (11)))) -> ZMVX_VDIV
    | zl__195 when (eq_int (zl__195, (Big_int.of_int (12)))) -> ZMVX_VREMU
    | _ -> ZMVX_VREM
  end)

and znum_of_mvxfunct6 (zargz3 : (zmvxfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZMVX_VAADDU -> Big_int.zero
    | ZMVX_VAADD -> (Big_int.of_int (1))
    | ZMVX_VASUBU -> (Big_int.of_int (2))
    | ZMVX_VASUB -> (Big_int.of_int (3))
    | ZMVX_VSLIDE1UP -> (Big_int.of_int (4))
    | ZMVX_VSLIDE1DOWN -> (Big_int.of_int (5))
    | ZMVX_VMUL -> (Big_int.of_int (6))
    | ZMVX_VMULH -> (Big_int.of_int (7))
    | ZMVX_VMULHU -> (Big_int.of_int (8))
    | ZMVX_VMULHSU -> (Big_int.of_int (9))
    | ZMVX_VDIVU -> (Big_int.of_int (10))
    | ZMVX_VDIV -> (Big_int.of_int (11))
    | ZMVX_VREMU -> (Big_int.of_int (12))
    | ZMVX_VREM -> (Big_int.of_int (13))
  end)

type zmvxmafunct6 = | ZMVX_VMACC | ZMVX_VNMSAC | ZMVX_VMADD | ZMVX_VNMSUB;;

let string_of_zmvxmafunct6 = function
  | ZMVX_VMACC -> "MVX_VMACC"
  | ZMVX_VNMSAC -> "MVX_VNMSAC"
  | ZMVX_VMADD -> "MVX_VMADD"
  | ZMVX_VNMSUB -> "MVX_VNMSUB";;

let rec zundefined_mvxmafunct6 (() : (unit)) : zmvxmafunct6 = sail_call (fun r ->
  internal_pick [ZMVX_VMACC; ZMVX_VNMSAC; ZMVX_VMADD; ZMVX_VNMSUB])

and zmvxmafunct6_of_num (zargz3 : (Big_int.num)) : zmvxmafunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__180 when (eq_int (zl__180, Big_int.zero)) -> ZMVX_VMACC
    | zl__181 when (eq_int (zl__181, (Big_int.of_int (1)))) -> ZMVX_VNMSAC
    | zl__182 when (eq_int (zl__182, (Big_int.of_int (2)))) -> ZMVX_VMADD
    | _ -> ZMVX_VNMSUB
  end)

and znum_of_mvxmafunct6 (zargz3 : (zmvxmafunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZMVX_VMACC -> Big_int.zero
    | ZMVX_VNMSAC -> (Big_int.of_int (1))
    | ZMVX_VMADD -> (Big_int.of_int (2))
    | ZMVX_VNMSUB -> (Big_int.of_int (3))
  end)

type zwmvxfunct6 =
  | ZWMVX_VWMACCU
  | ZWMVX_VWMACC
  | ZWMVX_VWMACCUS
  | ZWMVX_VWMACCSU;;

let string_of_zwmvxfunct6 = function
  | ZWMVX_VWMACCU -> "WMVX_VWMACCU"
  | ZWMVX_VWMACC -> "WMVX_VWMACC"
  | ZWMVX_VWMACCUS -> "WMVX_VWMACCUS"
  | ZWMVX_VWMACCSU -> "WMVX_VWMACCSU";;

let rec zundefined_wmvxfunct6 (() : (unit)) : zwmvxfunct6 = sail_call (fun r ->
  internal_pick [ZWMVX_VWMACCU; ZWMVX_VWMACC; ZWMVX_VWMACCUS; ZWMVX_VWMACCSU])

and zwmvxfunct6_of_num (zargz3 : (Big_int.num)) : zwmvxfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__177 when (eq_int (zl__177, Big_int.zero)) -> ZWMVX_VWMACCU
    | zl__178 when (eq_int (zl__178, (Big_int.of_int (1)))) -> ZWMVX_VWMACC
    | zl__179 when (eq_int (zl__179, (Big_int.of_int (2)))) -> ZWMVX_VWMACCUS
    | _ -> ZWMVX_VWMACCSU
  end)

and znum_of_wmvxfunct6 (zargz3 : (zwmvxfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZWMVX_VWMACCU -> Big_int.zero
    | ZWMVX_VWMACC -> (Big_int.of_int (1))
    | ZWMVX_VWMACCUS -> (Big_int.of_int (2))
    | ZWMVX_VWMACCSU -> (Big_int.of_int (3))
  end)

type zmaskfunct3 = | ZVV_VMERGE | ZVI_VMERGE | ZVX_VMERGE;;

let string_of_zmaskfunct3 = function
  | ZVV_VMERGE -> "VV_VMERGE"
  | ZVI_VMERGE -> "VI_VMERGE"
  | ZVX_VMERGE -> "VX_VMERGE";;

let rec zundefined_maskfunct3 (() : (unit)) : zmaskfunct3 = sail_call (fun r ->
  internal_pick [ZVV_VMERGE; ZVI_VMERGE; ZVX_VMERGE])

and zmaskfunct3_of_num (zargz3 : (Big_int.num)) : zmaskfunct3 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__175 when (eq_int (zl__175, Big_int.zero)) -> ZVV_VMERGE
    | zl__176 when (eq_int (zl__176, (Big_int.of_int (1)))) -> ZVI_VMERGE
    | _ -> ZVX_VMERGE
  end)

and znum_of_maskfunct3 (zargz3 : (zmaskfunct3)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVV_VMERGE -> Big_int.zero
    | ZVI_VMERGE -> (Big_int.of_int (1))
    | ZVX_VMERGE -> (Big_int.of_int (2))
  end)

type zvlewidth = | ZVLE8 | ZVLE16 | ZVLE32 | ZVLE64;;

let string_of_zvlewidth = function
  | ZVLE8 -> "VLE8"
  | ZVLE16 -> "VLE16"
  | ZVLE32 -> "VLE32"
  | ZVLE64 -> "VLE64";;

let rec zundefined_vlewidth (() : (unit)) : zvlewidth = sail_call (fun r ->
  internal_pick [ZVLE8; ZVLE16; ZVLE32; ZVLE64])

and zvlewidth_of_num (zargz3 : (Big_int.num)) : zvlewidth = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__172 when (eq_int (zl__172, Big_int.zero)) -> ZVLE8
    | zl__173 when (eq_int (zl__173, (Big_int.of_int (1)))) -> ZVLE16
    | zl__174 when (eq_int (zl__174, (Big_int.of_int (2)))) -> ZVLE32
    | _ -> ZVLE64
  end)

and znum_of_vlewidth (zargz3 : (zvlewidth)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVLE8 -> Big_int.zero
    | ZVLE16 -> (Big_int.of_int (1))
    | ZVLE32 -> (Big_int.of_int (2))
    | ZVLE64 -> (Big_int.of_int (3))
  end)

type zfvvfunct6 =
  | ZFVV_VADD
  | ZFVV_VSUB
  | ZFVV_VMIN
  | ZFVV_VMAX
  | ZFVV_VSGNJ
  | ZFVV_VSGNJN
  | ZFVV_VSGNJX
  | ZFVV_VDIV
  | ZFVV_VMUL;;

let string_of_zfvvfunct6 = function
  | ZFVV_VADD -> "FVV_VADD"
  | ZFVV_VSUB -> "FVV_VSUB"
  | ZFVV_VMIN -> "FVV_VMIN"
  | ZFVV_VMAX -> "FVV_VMAX"
  | ZFVV_VSGNJ -> "FVV_VSGNJ"
  | ZFVV_VSGNJN -> "FVV_VSGNJN"
  | ZFVV_VSGNJX -> "FVV_VSGNJX"
  | ZFVV_VDIV -> "FVV_VDIV"
  | ZFVV_VMUL -> "FVV_VMUL";;

let rec zundefined_fvvfunct6 (() : (unit)) : zfvvfunct6 = sail_call (fun r ->
  internal_pick [ZFVV_VADD; ZFVV_VSUB; ZFVV_VMIN; ZFVV_VMAX; ZFVV_VSGNJ; ZFVV_VSGNJN; ZFVV_VSGNJX; ZFVV_VDIV; ZFVV_VMUL])

and zfvvfunct6_of_num (zargz3 : (Big_int.num)) : zfvvfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__164 when (eq_int (zl__164, Big_int.zero)) -> ZFVV_VADD
    | zl__165 when (eq_int (zl__165, (Big_int.of_int (1)))) -> ZFVV_VSUB
    | zl__166 when (eq_int (zl__166, (Big_int.of_int (2)))) -> ZFVV_VMIN
    | zl__167 when (eq_int (zl__167, (Big_int.of_int (3)))) -> ZFVV_VMAX
    | zl__168 when (eq_int (zl__168, (Big_int.of_int (4)))) -> ZFVV_VSGNJ
    | zl__169 when (eq_int (zl__169, (Big_int.of_int (5)))) -> ZFVV_VSGNJN
    | zl__170 when (eq_int (zl__170, (Big_int.of_int (6)))) -> ZFVV_VSGNJX
    | zl__171 when (eq_int (zl__171, (Big_int.of_int (7)))) -> ZFVV_VDIV
    | _ -> ZFVV_VMUL
  end)

and znum_of_fvvfunct6 (zargz3 : (zfvvfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZFVV_VADD -> Big_int.zero
    | ZFVV_VSUB -> (Big_int.of_int (1))
    | ZFVV_VMIN -> (Big_int.of_int (2))
    | ZFVV_VMAX -> (Big_int.of_int (3))
    | ZFVV_VSGNJ -> (Big_int.of_int (4))
    | ZFVV_VSGNJN -> (Big_int.of_int (5))
    | ZFVV_VSGNJX -> (Big_int.of_int (6))
    | ZFVV_VDIV -> (Big_int.of_int (7))
    | ZFVV_VMUL -> (Big_int.of_int (8))
  end)

type zfvvmafunct6 =
  | ZFVV_VMADD
  | ZFVV_VNMADD
  | ZFVV_VMSUB
  | ZFVV_VNMSUB
  | ZFVV_VMACC
  | ZFVV_VNMACC
  | ZFVV_VMSAC
  | ZFVV_VNMSAC;;

let string_of_zfvvmafunct6 = function
  | ZFVV_VMADD -> "FVV_VMADD"
  | ZFVV_VNMADD -> "FVV_VNMADD"
  | ZFVV_VMSUB -> "FVV_VMSUB"
  | ZFVV_VNMSUB -> "FVV_VNMSUB"
  | ZFVV_VMACC -> "FVV_VMACC"
  | ZFVV_VNMACC -> "FVV_VNMACC"
  | ZFVV_VMSAC -> "FVV_VMSAC"
  | ZFVV_VNMSAC -> "FVV_VNMSAC";;

let rec zundefined_fvvmafunct6 (() : (unit)) : zfvvmafunct6 = sail_call (fun r ->
  internal_pick [ZFVV_VMADD; ZFVV_VNMADD; ZFVV_VMSUB; ZFVV_VNMSUB; ZFVV_VMACC; ZFVV_VNMACC; ZFVV_VMSAC; ZFVV_VNMSAC])

and zfvvmafunct6_of_num (zargz3 : (Big_int.num)) : zfvvmafunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__157 when (eq_int (zl__157, Big_int.zero)) -> ZFVV_VMADD
    | zl__158 when (eq_int (zl__158, (Big_int.of_int (1)))) -> ZFVV_VNMADD
    | zl__159 when (eq_int (zl__159, (Big_int.of_int (2)))) -> ZFVV_VMSUB
    | zl__160 when (eq_int (zl__160, (Big_int.of_int (3)))) -> ZFVV_VNMSUB
    | zl__161 when (eq_int (zl__161, (Big_int.of_int (4)))) -> ZFVV_VMACC
    | zl__162 when (eq_int (zl__162, (Big_int.of_int (5)))) -> ZFVV_VNMACC
    | zl__163 when (eq_int (zl__163, (Big_int.of_int (6)))) -> ZFVV_VMSAC
    | _ -> ZFVV_VNMSAC
  end)

and znum_of_fvvmafunct6 (zargz3 : (zfvvmafunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZFVV_VMADD -> Big_int.zero
    | ZFVV_VNMADD -> (Big_int.of_int (1))
    | ZFVV_VMSUB -> (Big_int.of_int (2))
    | ZFVV_VNMSUB -> (Big_int.of_int (3))
    | ZFVV_VMACC -> (Big_int.of_int (4))
    | ZFVV_VNMACC -> (Big_int.of_int (5))
    | ZFVV_VMSAC -> (Big_int.of_int (6))
    | ZFVV_VNMSAC -> (Big_int.of_int (7))
  end)

type zfwvvfunct6 = | ZFWVV_VADD | ZFWVV_VSUB | ZFWVV_VMUL;;

let string_of_zfwvvfunct6 = function
  | ZFWVV_VADD -> "FWVV_VADD"
  | ZFWVV_VSUB -> "FWVV_VSUB"
  | ZFWVV_VMUL -> "FWVV_VMUL";;

let rec zundefined_fwvvfunct6 (() : (unit)) : zfwvvfunct6 = sail_call (fun r ->
  internal_pick [ZFWVV_VADD; ZFWVV_VSUB; ZFWVV_VMUL])

and zfwvvfunct6_of_num (zargz3 : (Big_int.num)) : zfwvvfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__155 when (eq_int (zl__155, Big_int.zero)) -> ZFWVV_VADD
    | zl__156 when (eq_int (zl__156, (Big_int.of_int (1)))) -> ZFWVV_VSUB
    | _ -> ZFWVV_VMUL
  end)

and znum_of_fwvvfunct6 (zargz3 : (zfwvvfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZFWVV_VADD -> Big_int.zero
    | ZFWVV_VSUB -> (Big_int.of_int (1))
    | ZFWVV_VMUL -> (Big_int.of_int (2))
  end)

type zfwvvmafunct6 = | ZFWVV_VMACC | ZFWVV_VNMACC | ZFWVV_VMSAC | ZFWVV_VNMSAC;;

let string_of_zfwvvmafunct6 = function
  | ZFWVV_VMACC -> "FWVV_VMACC"
  | ZFWVV_VNMACC -> "FWVV_VNMACC"
  | ZFWVV_VMSAC -> "FWVV_VMSAC"
  | ZFWVV_VNMSAC -> "FWVV_VNMSAC";;

let rec zundefined_fwvvmafunct6 (() : (unit)) : zfwvvmafunct6 = sail_call (fun r ->
  internal_pick [ZFWVV_VMACC; ZFWVV_VNMACC; ZFWVV_VMSAC; ZFWVV_VNMSAC])

and zfwvvmafunct6_of_num (zargz3 : (Big_int.num)) : zfwvvmafunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__152 when (eq_int (zl__152, Big_int.zero)) -> ZFWVV_VMACC
    | zl__153 when (eq_int (zl__153, (Big_int.of_int (1)))) -> ZFWVV_VNMACC
    | zl__154 when (eq_int (zl__154, (Big_int.of_int (2)))) -> ZFWVV_VMSAC
    | _ -> ZFWVV_VNMSAC
  end)

and znum_of_fwvvmafunct6 (zargz3 : (zfwvvmafunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZFWVV_VMACC -> Big_int.zero
    | ZFWVV_VNMACC -> (Big_int.of_int (1))
    | ZFWVV_VMSAC -> (Big_int.of_int (2))
    | ZFWVV_VNMSAC -> (Big_int.of_int (3))
  end)

type zfwvfunct6 = | ZFWV_VADD | ZFWV_VSUB;;

let string_of_zfwvfunct6 = function
  | ZFWV_VADD -> "FWV_VADD"
  | ZFWV_VSUB -> "FWV_VSUB";;

let rec zundefined_fwvfunct6 (() : (unit)) : zfwvfunct6 = sail_call (fun r ->
  internal_pick [ZFWV_VADD; ZFWV_VSUB])

and zfwvfunct6_of_num (zargz3 : (Big_int.num)) : zfwvfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__151 when (eq_int (zl__151, Big_int.zero)) -> ZFWV_VADD
    | _ -> ZFWV_VSUB
  end)

and znum_of_fwvfunct6 (zargz3 : (zfwvfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZFWV_VADD -> Big_int.zero
    | ZFWV_VSUB -> (Big_int.of_int (1))
  end)

type zfvvmfunct6 = | ZFVVM_VMFEQ | ZFVVM_VMFLE | ZFVVM_VMFLT | ZFVVM_VMFNE;;

let string_of_zfvvmfunct6 = function
  | ZFVVM_VMFEQ -> "FVVM_VMFEQ"
  | ZFVVM_VMFLE -> "FVVM_VMFLE"
  | ZFVVM_VMFLT -> "FVVM_VMFLT"
  | ZFVVM_VMFNE -> "FVVM_VMFNE";;

let rec zundefined_fvvmfunct6 (() : (unit)) : zfvvmfunct6 = sail_call (fun r ->
  internal_pick [ZFVVM_VMFEQ; ZFVVM_VMFLE; ZFVVM_VMFLT; ZFVVM_VMFNE])

and zfvvmfunct6_of_num (zargz3 : (Big_int.num)) : zfvvmfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__148 when (eq_int (zl__148, Big_int.zero)) -> ZFVVM_VMFEQ
    | zl__149 when (eq_int (zl__149, (Big_int.of_int (1)))) -> ZFVVM_VMFLE
    | zl__150 when (eq_int (zl__150, (Big_int.of_int (2)))) -> ZFVVM_VMFLT
    | _ -> ZFVVM_VMFNE
  end)

and znum_of_fvvmfunct6 (zargz3 : (zfvvmfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZFVVM_VMFEQ -> Big_int.zero
    | ZFVVM_VMFLE -> (Big_int.of_int (1))
    | ZFVVM_VMFLT -> (Big_int.of_int (2))
    | ZFVVM_VMFNE -> (Big_int.of_int (3))
  end)

type zvfunary0 =
  | ZFV_CVT_XU_F
  | ZFV_CVT_X_F
  | ZFV_CVT_F_XU
  | ZFV_CVT_F_X
  | ZFV_CVT_RTZ_XU_F
  | ZFV_CVT_RTZ_X_F;;

let string_of_zvfunary0 = function
  | ZFV_CVT_XU_F -> "FV_CVT_XU_F"
  | ZFV_CVT_X_F -> "FV_CVT_X_F"
  | ZFV_CVT_F_XU -> "FV_CVT_F_XU"
  | ZFV_CVT_F_X -> "FV_CVT_F_X"
  | ZFV_CVT_RTZ_XU_F -> "FV_CVT_RTZ_XU_F"
  | ZFV_CVT_RTZ_X_F -> "FV_CVT_RTZ_X_F";;

let rec zundefined_vfunary0 (() : (unit)) : zvfunary0 = sail_call (fun r ->
  internal_pick [ZFV_CVT_XU_F; ZFV_CVT_X_F; ZFV_CVT_F_XU; ZFV_CVT_F_X; ZFV_CVT_RTZ_XU_F; ZFV_CVT_RTZ_X_F])

and zvfunary0_of_num (zargz3 : (Big_int.num)) : zvfunary0 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__143 when (eq_int (zl__143, Big_int.zero)) -> ZFV_CVT_XU_F
    | zl__144 when (eq_int (zl__144, (Big_int.of_int (1)))) -> ZFV_CVT_X_F
    | zl__145 when (eq_int (zl__145, (Big_int.of_int (2)))) -> ZFV_CVT_F_XU
    | zl__146 when (eq_int (zl__146, (Big_int.of_int (3)))) -> ZFV_CVT_F_X
    | zl__147 when (eq_int (zl__147, (Big_int.of_int (4)))) -> ZFV_CVT_RTZ_XU_F
    | _ -> ZFV_CVT_RTZ_X_F
  end)

and znum_of_vfunary0 (zargz3 : (zvfunary0)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZFV_CVT_XU_F -> Big_int.zero
    | ZFV_CVT_X_F -> (Big_int.of_int (1))
    | ZFV_CVT_F_XU -> (Big_int.of_int (2))
    | ZFV_CVT_F_X -> (Big_int.of_int (3))
    | ZFV_CVT_RTZ_XU_F -> (Big_int.of_int (4))
    | ZFV_CVT_RTZ_X_F -> (Big_int.of_int (5))
  end)

type zvfwunary0 =
  | ZFWV_CVT_XU_F
  | ZFWV_CVT_X_F
  | ZFWV_CVT_F_XU
  | ZFWV_CVT_F_X
  | ZFWV_CVT_F_F
  | ZFWV_CVT_RTZ_XU_F
  | ZFWV_CVT_RTZ_X_F;;

let string_of_zvfwunary0 = function
  | ZFWV_CVT_XU_F -> "FWV_CVT_XU_F"
  | ZFWV_CVT_X_F -> "FWV_CVT_X_F"
  | ZFWV_CVT_F_XU -> "FWV_CVT_F_XU"
  | ZFWV_CVT_F_X -> "FWV_CVT_F_X"
  | ZFWV_CVT_F_F -> "FWV_CVT_F_F"
  | ZFWV_CVT_RTZ_XU_F -> "FWV_CVT_RTZ_XU_F"
  | ZFWV_CVT_RTZ_X_F -> "FWV_CVT_RTZ_X_F";;

let rec zundefined_vfwunary0 (() : (unit)) : zvfwunary0 = sail_call (fun r ->
  internal_pick [ZFWV_CVT_XU_F; ZFWV_CVT_X_F; ZFWV_CVT_F_XU; ZFWV_CVT_F_X; ZFWV_CVT_F_F; ZFWV_CVT_RTZ_XU_F; ZFWV_CVT_RTZ_X_F])

and zvfwunary0_of_num (zargz3 : (Big_int.num)) : zvfwunary0 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__137 when (eq_int (zl__137, Big_int.zero)) -> ZFWV_CVT_XU_F
    | zl__138 when (eq_int (zl__138, (Big_int.of_int (1)))) -> ZFWV_CVT_X_F
    | zl__139 when (eq_int (zl__139, (Big_int.of_int (2)))) -> ZFWV_CVT_F_XU
    | zl__140 when (eq_int (zl__140, (Big_int.of_int (3)))) -> ZFWV_CVT_F_X
    | zl__141 when (eq_int (zl__141, (Big_int.of_int (4)))) -> ZFWV_CVT_F_F
    | zl__142 when (eq_int (zl__142, (Big_int.of_int (5)))) -> ZFWV_CVT_RTZ_XU_F
    | _ -> ZFWV_CVT_RTZ_X_F
  end)

and znum_of_vfwunary0 (zargz3 : (zvfwunary0)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZFWV_CVT_XU_F -> Big_int.zero
    | ZFWV_CVT_X_F -> (Big_int.of_int (1))
    | ZFWV_CVT_F_XU -> (Big_int.of_int (2))
    | ZFWV_CVT_F_X -> (Big_int.of_int (3))
    | ZFWV_CVT_F_F -> (Big_int.of_int (4))
    | ZFWV_CVT_RTZ_XU_F -> (Big_int.of_int (5))
    | ZFWV_CVT_RTZ_X_F -> (Big_int.of_int (6))
  end)

type zvfnunary0 =
  | ZFNV_CVT_XU_F
  | ZFNV_CVT_X_F
  | ZFNV_CVT_F_XU
  | ZFNV_CVT_F_X
  | ZFNV_CVT_F_F
  | ZFNV_CVT_ROD_F_F
  | ZFNV_CVT_RTZ_XU_F
  | ZFNV_CVT_RTZ_X_F;;

let string_of_zvfnunary0 = function
  | ZFNV_CVT_XU_F -> "FNV_CVT_XU_F"
  | ZFNV_CVT_X_F -> "FNV_CVT_X_F"
  | ZFNV_CVT_F_XU -> "FNV_CVT_F_XU"
  | ZFNV_CVT_F_X -> "FNV_CVT_F_X"
  | ZFNV_CVT_F_F -> "FNV_CVT_F_F"
  | ZFNV_CVT_ROD_F_F -> "FNV_CVT_ROD_F_F"
  | ZFNV_CVT_RTZ_XU_F -> "FNV_CVT_RTZ_XU_F"
  | ZFNV_CVT_RTZ_X_F -> "FNV_CVT_RTZ_X_F";;

let rec zundefined_vfnunary0 (() : (unit)) : zvfnunary0 = sail_call (fun r ->
  internal_pick [ZFNV_CVT_XU_F; ZFNV_CVT_X_F; ZFNV_CVT_F_XU; ZFNV_CVT_F_X; ZFNV_CVT_F_F; ZFNV_CVT_ROD_F_F; ZFNV_CVT_RTZ_XU_F; ZFNV_CVT_RTZ_X_F])

and zvfnunary0_of_num (zargz3 : (Big_int.num)) : zvfnunary0 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__130 when (eq_int (zl__130, Big_int.zero)) -> ZFNV_CVT_XU_F
    | zl__131 when (eq_int (zl__131, (Big_int.of_int (1)))) -> ZFNV_CVT_X_F
    | zl__132 when (eq_int (zl__132, (Big_int.of_int (2)))) -> ZFNV_CVT_F_XU
    | zl__133 when (eq_int (zl__133, (Big_int.of_int (3)))) -> ZFNV_CVT_F_X
    | zl__134 when (eq_int (zl__134, (Big_int.of_int (4)))) -> ZFNV_CVT_F_F
    | zl__135 when (eq_int (zl__135, (Big_int.of_int (5)))) -> ZFNV_CVT_ROD_F_F
    | zl__136 when (eq_int (zl__136, (Big_int.of_int (6)))) -> ZFNV_CVT_RTZ_XU_F
    | _ -> ZFNV_CVT_RTZ_X_F
  end)

and znum_of_vfnunary0 (zargz3 : (zvfnunary0)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZFNV_CVT_XU_F -> Big_int.zero
    | ZFNV_CVT_X_F -> (Big_int.of_int (1))
    | ZFNV_CVT_F_XU -> (Big_int.of_int (2))
    | ZFNV_CVT_F_X -> (Big_int.of_int (3))
    | ZFNV_CVT_F_F -> (Big_int.of_int (4))
    | ZFNV_CVT_ROD_F_F -> (Big_int.of_int (5))
    | ZFNV_CVT_RTZ_XU_F -> (Big_int.of_int (6))
    | ZFNV_CVT_RTZ_X_F -> (Big_int.of_int (7))
  end)

type zvfunary1 = | ZFVV_VSQRT | ZFVV_VRSQRT7 | ZFVV_VREC7 | ZFVV_VCLASS;;

let string_of_zvfunary1 = function
  | ZFVV_VSQRT -> "FVV_VSQRT"
  | ZFVV_VRSQRT7 -> "FVV_VRSQRT7"
  | ZFVV_VREC7 -> "FVV_VREC7"
  | ZFVV_VCLASS -> "FVV_VCLASS";;

let rec zundefined_vfunary1 (() : (unit)) : zvfunary1 = sail_call (fun r ->
  internal_pick [ZFVV_VSQRT; ZFVV_VRSQRT7; ZFVV_VREC7; ZFVV_VCLASS])

and zvfunary1_of_num (zargz3 : (Big_int.num)) : zvfunary1 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__127 when (eq_int (zl__127, Big_int.zero)) -> ZFVV_VSQRT
    | zl__128 when (eq_int (zl__128, (Big_int.of_int (1)))) -> ZFVV_VRSQRT7
    | zl__129 when (eq_int (zl__129, (Big_int.of_int (2)))) -> ZFVV_VREC7
    | _ -> ZFVV_VCLASS
  end)

and znum_of_vfunary1 (zargz3 : (zvfunary1)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZFVV_VSQRT -> Big_int.zero
    | ZFVV_VRSQRT7 -> (Big_int.of_int (1))
    | ZFVV_VREC7 -> (Big_int.of_int (2))
    | ZFVV_VCLASS -> (Big_int.of_int (3))
  end)

type zfvffunct6 =
  | ZVF_VADD
  | ZVF_VSUB
  | ZVF_VMIN
  | ZVF_VMAX
  | ZVF_VSGNJ
  | ZVF_VSGNJN
  | ZVF_VSGNJX
  | ZVF_VDIV
  | ZVF_VRDIV
  | ZVF_VMUL
  | ZVF_VRSUB
  | ZVF_VSLIDE1UP
  | ZVF_VSLIDE1DOWN;;

let string_of_zfvffunct6 = function
  | ZVF_VADD -> "VF_VADD"
  | ZVF_VSUB -> "VF_VSUB"
  | ZVF_VMIN -> "VF_VMIN"
  | ZVF_VMAX -> "VF_VMAX"
  | ZVF_VSGNJ -> "VF_VSGNJ"
  | ZVF_VSGNJN -> "VF_VSGNJN"
  | ZVF_VSGNJX -> "VF_VSGNJX"
  | ZVF_VDIV -> "VF_VDIV"
  | ZVF_VRDIV -> "VF_VRDIV"
  | ZVF_VMUL -> "VF_VMUL"
  | ZVF_VRSUB -> "VF_VRSUB"
  | ZVF_VSLIDE1UP -> "VF_VSLIDE1UP"
  | ZVF_VSLIDE1DOWN -> "VF_VSLIDE1DOWN";;

let rec zundefined_fvffunct6 (() : (unit)) : zfvffunct6 = sail_call (fun r ->
  internal_pick [ZVF_VADD; ZVF_VSUB; ZVF_VMIN; ZVF_VMAX; ZVF_VSGNJ; ZVF_VSGNJN; ZVF_VSGNJX; ZVF_VDIV; ZVF_VRDIV; ZVF_VMUL; ZVF_VRSUB; ZVF_VSLIDE1UP; ZVF_VSLIDE1DOWN])

and zfvffunct6_of_num (zargz3 : (Big_int.num)) : zfvffunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__115 when (eq_int (zl__115, Big_int.zero)) -> ZVF_VADD
    | zl__116 when (eq_int (zl__116, (Big_int.of_int (1)))) -> ZVF_VSUB
    | zl__117 when (eq_int (zl__117, (Big_int.of_int (2)))) -> ZVF_VMIN
    | zl__118 when (eq_int (zl__118, (Big_int.of_int (3)))) -> ZVF_VMAX
    | zl__119 when (eq_int (zl__119, (Big_int.of_int (4)))) -> ZVF_VSGNJ
    | zl__120 when (eq_int (zl__120, (Big_int.of_int (5)))) -> ZVF_VSGNJN
    | zl__121 when (eq_int (zl__121, (Big_int.of_int (6)))) -> ZVF_VSGNJX
    | zl__122 when (eq_int (zl__122, (Big_int.of_int (7)))) -> ZVF_VDIV
    | zl__123 when (eq_int (zl__123, (Big_int.of_int (8)))) -> ZVF_VRDIV
    | zl__124 when (eq_int (zl__124, (Big_int.of_int (9)))) -> ZVF_VMUL
    | zl__125 when (eq_int (zl__125, (Big_int.of_int (10)))) -> ZVF_VRSUB
    | zl__126 when (eq_int (zl__126, (Big_int.of_int (11)))) -> ZVF_VSLIDE1UP
    | _ -> ZVF_VSLIDE1DOWN
  end)

and znum_of_fvffunct6 (zargz3 : (zfvffunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVF_VADD -> Big_int.zero
    | ZVF_VSUB -> (Big_int.of_int (1))
    | ZVF_VMIN -> (Big_int.of_int (2))
    | ZVF_VMAX -> (Big_int.of_int (3))
    | ZVF_VSGNJ -> (Big_int.of_int (4))
    | ZVF_VSGNJN -> (Big_int.of_int (5))
    | ZVF_VSGNJX -> (Big_int.of_int (6))
    | ZVF_VDIV -> (Big_int.of_int (7))
    | ZVF_VRDIV -> (Big_int.of_int (8))
    | ZVF_VMUL -> (Big_int.of_int (9))
    | ZVF_VRSUB -> (Big_int.of_int (10))
    | ZVF_VSLIDE1UP -> (Big_int.of_int (11))
    | ZVF_VSLIDE1DOWN -> (Big_int.of_int (12))
  end)

type zfvfmafunct6 =
  | ZVF_VMADD
  | ZVF_VNMADD
  | ZVF_VMSUB
  | ZVF_VNMSUB
  | ZVF_VMACC
  | ZVF_VNMACC
  | ZVF_VMSAC
  | ZVF_VNMSAC;;

let string_of_zfvfmafunct6 = function
  | ZVF_VMADD -> "VF_VMADD"
  | ZVF_VNMADD -> "VF_VNMADD"
  | ZVF_VMSUB -> "VF_VMSUB"
  | ZVF_VNMSUB -> "VF_VNMSUB"
  | ZVF_VMACC -> "VF_VMACC"
  | ZVF_VNMACC -> "VF_VNMACC"
  | ZVF_VMSAC -> "VF_VMSAC"
  | ZVF_VNMSAC -> "VF_VNMSAC";;

let rec zundefined_fvfmafunct6 (() : (unit)) : zfvfmafunct6 = sail_call (fun r ->
  internal_pick [ZVF_VMADD; ZVF_VNMADD; ZVF_VMSUB; ZVF_VNMSUB; ZVF_VMACC; ZVF_VNMACC; ZVF_VMSAC; ZVF_VNMSAC])

and zfvfmafunct6_of_num (zargz3 : (Big_int.num)) : zfvfmafunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__108 when (eq_int (zl__108, Big_int.zero)) -> ZVF_VMADD
    | zl__109 when (eq_int (zl__109, (Big_int.of_int (1)))) -> ZVF_VNMADD
    | zl__110 when (eq_int (zl__110, (Big_int.of_int (2)))) -> ZVF_VMSUB
    | zl__111 when (eq_int (zl__111, (Big_int.of_int (3)))) -> ZVF_VNMSUB
    | zl__112 when (eq_int (zl__112, (Big_int.of_int (4)))) -> ZVF_VMACC
    | zl__113 when (eq_int (zl__113, (Big_int.of_int (5)))) -> ZVF_VNMACC
    | zl__114 when (eq_int (zl__114, (Big_int.of_int (6)))) -> ZVF_VMSAC
    | _ -> ZVF_VNMSAC
  end)

and znum_of_fvfmafunct6 (zargz3 : (zfvfmafunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVF_VMADD -> Big_int.zero
    | ZVF_VNMADD -> (Big_int.of_int (1))
    | ZVF_VMSUB -> (Big_int.of_int (2))
    | ZVF_VNMSUB -> (Big_int.of_int (3))
    | ZVF_VMACC -> (Big_int.of_int (4))
    | ZVF_VNMACC -> (Big_int.of_int (5))
    | ZVF_VMSAC -> (Big_int.of_int (6))
    | ZVF_VNMSAC -> (Big_int.of_int (7))
  end)

type zfwvffunct6 = | ZFWVF_VADD | ZFWVF_VSUB | ZFWVF_VMUL;;

let string_of_zfwvffunct6 = function
  | ZFWVF_VADD -> "FWVF_VADD"
  | ZFWVF_VSUB -> "FWVF_VSUB"
  | ZFWVF_VMUL -> "FWVF_VMUL";;

let rec zundefined_fwvffunct6 (() : (unit)) : zfwvffunct6 = sail_call (fun r ->
  internal_pick [ZFWVF_VADD; ZFWVF_VSUB; ZFWVF_VMUL])

and zfwvffunct6_of_num (zargz3 : (Big_int.num)) : zfwvffunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__106 when (eq_int (zl__106, Big_int.zero)) -> ZFWVF_VADD
    | zl__107 when (eq_int (zl__107, (Big_int.of_int (1)))) -> ZFWVF_VSUB
    | _ -> ZFWVF_VMUL
  end)

and znum_of_fwvffunct6 (zargz3 : (zfwvffunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZFWVF_VADD -> Big_int.zero
    | ZFWVF_VSUB -> (Big_int.of_int (1))
    | ZFWVF_VMUL -> (Big_int.of_int (2))
  end)

type zfwvfmafunct6 = | ZFWVF_VMACC | ZFWVF_VNMACC | ZFWVF_VMSAC | ZFWVF_VNMSAC;;

let string_of_zfwvfmafunct6 = function
  | ZFWVF_VMACC -> "FWVF_VMACC"
  | ZFWVF_VNMACC -> "FWVF_VNMACC"
  | ZFWVF_VMSAC -> "FWVF_VMSAC"
  | ZFWVF_VNMSAC -> "FWVF_VNMSAC";;

let rec zundefined_fwvfmafunct6 (() : (unit)) : zfwvfmafunct6 = sail_call (fun r ->
  internal_pick [ZFWVF_VMACC; ZFWVF_VNMACC; ZFWVF_VMSAC; ZFWVF_VNMSAC])

and zfwvfmafunct6_of_num (zargz3 : (Big_int.num)) : zfwvfmafunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__103 when (eq_int (zl__103, Big_int.zero)) -> ZFWVF_VMACC
    | zl__104 when (eq_int (zl__104, (Big_int.of_int (1)))) -> ZFWVF_VNMACC
    | zl__105 when (eq_int (zl__105, (Big_int.of_int (2)))) -> ZFWVF_VMSAC
    | _ -> ZFWVF_VNMSAC
  end)

and znum_of_fwvfmafunct6 (zargz3 : (zfwvfmafunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZFWVF_VMACC -> Big_int.zero
    | ZFWVF_VNMACC -> (Big_int.of_int (1))
    | ZFWVF_VMSAC -> (Big_int.of_int (2))
    | ZFWVF_VNMSAC -> (Big_int.of_int (3))
  end)

type zfwffunct6 = | ZFWF_VADD | ZFWF_VSUB;;

let string_of_zfwffunct6 = function
  | ZFWF_VADD -> "FWF_VADD"
  | ZFWF_VSUB -> "FWF_VSUB";;

let rec zundefined_fwffunct6 (() : (unit)) : zfwffunct6 = sail_call (fun r ->
  internal_pick [ZFWF_VADD; ZFWF_VSUB])

and zfwffunct6_of_num (zargz3 : (Big_int.num)) : zfwffunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__102 when (eq_int (zl__102, Big_int.zero)) -> ZFWF_VADD
    | _ -> ZFWF_VSUB
  end)

and znum_of_fwffunct6 (zargz3 : (zfwffunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZFWF_VADD -> Big_int.zero
    | ZFWF_VSUB -> (Big_int.of_int (1))
  end)

type zfvfmfunct6 =
  | ZVFM_VMFEQ
  | ZVFM_VMFLE
  | ZVFM_VMFLT
  | ZVFM_VMFNE
  | ZVFM_VMFGT
  | ZVFM_VMFGE;;

let string_of_zfvfmfunct6 = function
  | ZVFM_VMFEQ -> "VFM_VMFEQ"
  | ZVFM_VMFLE -> "VFM_VMFLE"
  | ZVFM_VMFLT -> "VFM_VMFLT"
  | ZVFM_VMFNE -> "VFM_VMFNE"
  | ZVFM_VMFGT -> "VFM_VMFGT"
  | ZVFM_VMFGE -> "VFM_VMFGE";;

let rec zundefined_fvfmfunct6 (() : (unit)) : zfvfmfunct6 = sail_call (fun r ->
  internal_pick [ZVFM_VMFEQ; ZVFM_VMFLE; ZVFM_VMFLT; ZVFM_VMFNE; ZVFM_VMFGT; ZVFM_VMFGE])

and zfvfmfunct6_of_num (zargz3 : (Big_int.num)) : zfvfmfunct6 = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__97 when (eq_int (zl__97, Big_int.zero)) -> ZVFM_VMFEQ
    | zl__98 when (eq_int (zl__98, (Big_int.of_int (1)))) -> ZVFM_VMFLE
    | zl__99 when (eq_int (zl__99, (Big_int.of_int (2)))) -> ZVFM_VMFLT
    | zl__100 when (eq_int (zl__100, (Big_int.of_int (3)))) -> ZVFM_VMFNE
    | zl__101 when (eq_int (zl__101, (Big_int.of_int (4)))) -> ZVFM_VMFGT
    | _ -> ZVFM_VMFGE
  end)

and znum_of_fvfmfunct6 (zargz3 : (zfvfmfunct6)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVFM_VMFEQ -> Big_int.zero
    | ZVFM_VMFLE -> (Big_int.of_int (1))
    | ZVFM_VMFLT -> (Big_int.of_int (2))
    | ZVFM_VMFNE -> (Big_int.of_int (3))
    | ZVFM_VMFGT -> (Big_int.of_int (4))
    | ZVFM_VMFGE -> (Big_int.of_int (5))
  end)

type zvmlsop = | ZVLM | ZVSM;;

let string_of_zvmlsop = function
  | ZVLM -> "VLM"
  | ZVSM -> "VSM";;

let rec zundefined_vmlsop (() : (unit)) : zvmlsop = sail_call (fun r ->
  internal_pick [ZVLM; ZVSM])

and zvmlsop_of_num (zargz3 : (Big_int.num)) : zvmlsop = sail_call (fun r ->
  begin
    match zargz3 with
    | zl__96 when (eq_int (zl__96, Big_int.zero)) -> ZVLM
    | _ -> ZVSM
  end)

and znum_of_vmlsop (zargz3 : (zvmlsop)) : Big_int.num = sail_call (fun r ->
  begin
    match zargz3 with
    | ZVLM -> Big_int.zero
    | ZVSM -> (Big_int.of_int (1))
  end)

let zvr0 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr1 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr2 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr3 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr4 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr5 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr6 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr7 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr8 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr9 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr10 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr11 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr12 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr13 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr14 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr15 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr16 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr17 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr18 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr19 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr20 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr21 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr22 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr23 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr24 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr25 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr26 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr27 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr28 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr29 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr30 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let zvr31 : (zvregtype) ref = ref (undefined_bitvector (Big_int.of_int (65536)));;

let rec zvreg_name_forwards (zargz3 : ((bit) list)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0; B0; B0; B0])) -> "v0"
    | zb__1 when (eq_list (zb__1, [B0; B0; B0; B0; B1])) -> "v1"
    | zb__2 when (eq_list (zb__2, [B0; B0; B0; B1; B0])) -> "v2"
    | zb__3 when (eq_list (zb__3, [B0; B0; B0; B1; B1])) -> "v3"
    | zb__4 when (eq_list (zb__4, [B0; B0; B1; B0; B0])) -> "v4"
    | zb__5 when (eq_list (zb__5, [B0; B0; B1; B0; B1])) -> "v5"
    | zb__6 when (eq_list (zb__6, [B0; B0; B1; B1; B0])) -> "v6"
    | zb__7 when (eq_list (zb__7, [B0; B0; B1; B1; B1])) -> "v7"
    | zb__8 when (eq_list (zb__8, [B0; B1; B0; B0; B0])) -> "v8"
    | zb__9 when (eq_list (zb__9, [B0; B1; B0; B0; B1])) -> "v9"
    | zb__10 when (eq_list (zb__10, [B0; B1; B0; B1; B0])) -> "v10"
    | zb__11 when (eq_list (zb__11, [B0; B1; B0; B1; B1])) -> "v11"
    | zb__12 when (eq_list (zb__12, [B0; B1; B1; B0; B0])) -> "v12"
    | zb__13 when (eq_list (zb__13, [B0; B1; B1; B0; B1])) -> "v13"
    | zb__14 when (eq_list (zb__14, [B0; B1; B1; B1; B0])) -> "v14"
    | zb__15 when (eq_list (zb__15, [B0; B1; B1; B1; B1])) -> "v15"
    | zb__16 when (eq_list (zb__16, [B1; B0; B0; B0; B0])) -> "v16"
    | zb__17 when (eq_list (zb__17, [B1; B0; B0; B0; B1])) -> "v17"
    | zb__18 when (eq_list (zb__18, [B1; B0; B0; B1; B0])) -> "v18"
    | zb__19 when (eq_list (zb__19, [B1; B0; B0; B1; B1])) -> "v19"
    | zb__20 when (eq_list (zb__20, [B1; B0; B1; B0; B0])) -> "v20"
    | zb__21 when (eq_list (zb__21, [B1; B0; B1; B0; B1])) -> "v21"
    | zb__22 when (eq_list (zb__22, [B1; B0; B1; B1; B0])) -> "v22"
    | zb__23 when (eq_list (zb__23, [B1; B0; B1; B1; B1])) -> "v23"
    | zb__24 when (eq_list (zb__24, [B1; B1; B0; B0; B0])) -> "v24"
    | zb__25 when (eq_list (zb__25, [B1; B1; B0; B0; B1])) -> "v25"
    | zb__26 when (eq_list (zb__26, [B1; B1; B0; B1; B0])) -> "v26"
    | zb__27 when (eq_list (zb__27, [B1; B1; B0; B1; B1])) -> "v27"
    | zb__28 when (eq_list (zb__28, [B1; B1; B1; B0; B0])) -> "v28"
    | zb__29 when (eq_list (zb__29, [B1; B1; B1; B0; B1])) -> "v29"
    | zb__30 when (eq_list (zb__30, [B1; B1; B1; B1; B0])) -> "v30"
    | _ -> "v31"
  end)

and zvreg_name_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | "v0" -> [B0; B0; B0; B0; B0]
    | "v1" -> [B0; B0; B0; B0; B1]
    | "v2" -> [B0; B0; B0; B1; B0]
    | "v3" -> [B0; B0; B0; B1; B1]
    | "v4" -> [B0; B0; B1; B0; B0]
    | "v5" -> [B0; B0; B1; B0; B1]
    | "v6" -> [B0; B0; B1; B1; B0]
    | "v7" -> [B0; B0; B1; B1; B1]
    | "v8" -> [B0; B1; B0; B0; B0]
    | "v9" -> [B0; B1; B0; B0; B1]
    | "v10" -> [B0; B1; B0; B1; B0]
    | "v11" -> [B0; B1; B0; B1; B1]
    | "v12" -> [B0; B1; B1; B0; B0]
    | "v13" -> [B0; B1; B1; B0; B1]
    | "v14" -> [B0; B1; B1; B1; B0]
    | "v15" -> [B0; B1; B1; B1; B1]
    | "v16" -> [B1; B0; B0; B0; B0]
    | "v17" -> [B1; B0; B0; B0; B1]
    | "v18" -> [B1; B0; B0; B1; B0]
    | "v19" -> [B1; B0; B0; B1; B1]
    | "v20" -> [B1; B0; B1; B0; B0]
    | "v21" -> [B1; B0; B1; B0; B1]
    | "v22" -> [B1; B0; B1; B1; B0]
    | "v23" -> [B1; B0; B1; B1; B1]
    | "v24" -> [B1; B1; B0; B0; B0]
    | "v25" -> [B1; B1; B0; B0; B1]
    | "v26" -> [B1; B1; B0; B1; B0]
    | "v27" -> [B1; B1; B0; B1; B1]
    | "v28" -> [B1; B1; B1; B0; B0]
    | "v29" -> [B1; B1; B1; B0; B1]
    | "v30" -> [B1; B1; B1; B1; B0]
    | "v31" -> [B1; B1; B1; B1; B1]
  end)

and zvreg_name_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0; B0; B0; B0])) -> true
    | zb__1 when (eq_list (zb__1, [B0; B0; B0; B0; B1])) -> true
    | zb__2 when (eq_list (zb__2, [B0; B0; B0; B1; B0])) -> true
    | zb__3 when (eq_list (zb__3, [B0; B0; B0; B1; B1])) -> true
    | zb__4 when (eq_list (zb__4, [B0; B0; B1; B0; B0])) -> true
    | zb__5 when (eq_list (zb__5, [B0; B0; B1; B0; B1])) -> true
    | zb__6 when (eq_list (zb__6, [B0; B0; B1; B1; B0])) -> true
    | zb__7 when (eq_list (zb__7, [B0; B0; B1; B1; B1])) -> true
    | zb__8 when (eq_list (zb__8, [B0; B1; B0; B0; B0])) -> true
    | zb__9 when (eq_list (zb__9, [B0; B1; B0; B0; B1])) -> true
    | zb__10 when (eq_list (zb__10, [B0; B1; B0; B1; B0])) -> true
    | zb__11 when (eq_list (zb__11, [B0; B1; B0; B1; B1])) -> true
    | zb__12 when (eq_list (zb__12, [B0; B1; B1; B0; B0])) -> true
    | zb__13 when (eq_list (zb__13, [B0; B1; B1; B0; B1])) -> true
    | zb__14 when (eq_list (zb__14, [B0; B1; B1; B1; B0])) -> true
    | zb__15 when (eq_list (zb__15, [B0; B1; B1; B1; B1])) -> true
    | zb__16 when (eq_list (zb__16, [B1; B0; B0; B0; B0])) -> true
    | zb__17 when (eq_list (zb__17, [B1; B0; B0; B0; B1])) -> true
    | zb__18 when (eq_list (zb__18, [B1; B0; B0; B1; B0])) -> true
    | zb__19 when (eq_list (zb__19, [B1; B0; B0; B1; B1])) -> true
    | zb__20 when (eq_list (zb__20, [B1; B0; B1; B0; B0])) -> true
    | zb__21 when (eq_list (zb__21, [B1; B0; B1; B0; B1])) -> true
    | zb__22 when (eq_list (zb__22, [B1; B0; B1; B1; B0])) -> true
    | zb__23 when (eq_list (zb__23, [B1; B0; B1; B1; B1])) -> true
    | zb__24 when (eq_list (zb__24, [B1; B1; B0; B0; B0])) -> true
    | zb__25 when (eq_list (zb__25, [B1; B1; B0; B0; B1])) -> true
    | zb__26 when (eq_list (zb__26, [B1; B1; B0; B1; B0])) -> true
    | zb__27 when (eq_list (zb__27, [B1; B1; B0; B1; B1])) -> true
    | zb__28 when (eq_list (zb__28, [B1; B1; B1; B0; B0])) -> true
    | zb__29 when (eq_list (zb__29, [B1; B1; B1; B0; B1])) -> true
    | zb__30 when (eq_list (zb__30, [B1; B1; B1; B1; B0])) -> true
    | zb__31 when (eq_list (zb__31, [B1; B1; B1; B1; B1])) -> true
    | _ -> false
  end)

and zvreg_name_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | "v0" -> true
    | "v1" -> true
    | "v2" -> true
    | "v3" -> true
    | "v4" -> true
    | "v5" -> true
    | "v6" -> true
    | "v7" -> true
    | "v8" -> true
    | "v9" -> true
    | "v10" -> true
    | "v11" -> true
    | "v12" -> true
    | "v13" -> true
    | "v14" -> true
    | "v15" -> true
    | "v16" -> true
    | "v17" -> true
    | "v18" -> true
    | "v19" -> true
    | "v20" -> true
    | "v21" -> true
    | "v22" -> true
    | "v23" -> true
    | "v24" -> true
    | "v25" -> true
    | "v26" -> true
    | "v27" -> true
    | "v28" -> true
    | "v29" -> true
    | "v30" -> true
    | "v31" -> true
    | _ -> false
  end)

and zdirty_v_context (() : (unit)) : unit = sail_call (fun r ->
  begin
    assert (Platform.enable_vext ());
    (zmstatus := ({!zmstatus with ZMstatus.zbits = update_subrange ((!zmstatus.zbits), (Big_int.of_int (10)), (Big_int.of_int (9)), (zextStatus_to_bits ZDirty))}));
    (zmstatus := ({!zmstatus with ZMstatus.zbits = update_subrange ((!zmstatus.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), [B1])}))
  end)

and zdirty_v_context_if_present (() : (unit)) : unit = sail_call (fun r ->
  (if (Platform.enable_vext ()) then (zdirty_v_context ()) else ()))

and zrV (zr : (Big_int.num)) : (bit) list = sail_call (fun r ->
  let zzzero_vreg = (zzzeros_implicit (Big_int.of_int (65536))) in
  let zv = (begin
    match zr with
    | zl__64 when (eq_int (zl__64, Big_int.zero)) -> !zvr0
    | zl__65 when (eq_int (zl__65, (Big_int.of_int (1)))) -> !zvr1
    | zl__66 when (eq_int (zl__66, (Big_int.of_int (2)))) -> !zvr2
    | zl__67 when (eq_int (zl__67, (Big_int.of_int (3)))) -> !zvr3
    | zl__68 when (eq_int (zl__68, (Big_int.of_int (4)))) -> !zvr4
    | zl__69 when (eq_int (zl__69, (Big_int.of_int (5)))) -> !zvr5
    | zl__70 when (eq_int (zl__70, (Big_int.of_int (6)))) -> !zvr6
    | zl__71 when (eq_int (zl__71, (Big_int.of_int (7)))) -> !zvr7
    | zl__72 when (eq_int (zl__72, (Big_int.of_int (8)))) -> !zvr8
    | zl__73 when (eq_int (zl__73, (Big_int.of_int (9)))) -> !zvr9
    | zl__74 when (eq_int (zl__74, (Big_int.of_int (10)))) -> !zvr10
    | zl__75 when (eq_int (zl__75, (Big_int.of_int (11)))) -> !zvr11
    | zl__76 when (eq_int (zl__76, (Big_int.of_int (12)))) -> !zvr12
    | zl__77 when (eq_int (zl__77, (Big_int.of_int (13)))) -> !zvr13
    | zl__78 when (eq_int (zl__78, (Big_int.of_int (14)))) -> !zvr14
    | zl__79 when (eq_int (zl__79, (Big_int.of_int (15)))) -> !zvr15
    | zl__80 when (eq_int (zl__80, (Big_int.of_int (16)))) -> !zvr16
    | zl__81 when (eq_int (zl__81, (Big_int.of_int (17)))) -> !zvr17
    | zl__82 when (eq_int (zl__82, (Big_int.of_int (18)))) -> !zvr18
    | zl__83 when (eq_int (zl__83, (Big_int.of_int (19)))) -> !zvr19
    | zl__84 when (eq_int (zl__84, (Big_int.of_int (20)))) -> !zvr20
    | zl__85 when (eq_int (zl__85, (Big_int.of_int (21)))) -> !zvr21
    | zl__86 when (eq_int (zl__86, (Big_int.of_int (22)))) -> !zvr22
    | zl__87 when (eq_int (zl__87, (Big_int.of_int (23)))) -> !zvr23
    | zl__88 when (eq_int (zl__88, (Big_int.of_int (24)))) -> !zvr24
    | zl__89 when (eq_int (zl__89, (Big_int.of_int (25)))) -> !zvr25
    | zl__90 when (eq_int (zl__90, (Big_int.of_int (26)))) -> !zvr26
    | zl__91 when (eq_int (zl__91, (Big_int.of_int (27)))) -> !zvr27
    | zl__92 when (eq_int (zl__92, (Big_int.of_int (28)))) -> !zvr28
    | zl__93 when (eq_int (zl__93, (Big_int.of_int (29)))) -> !zvr29
    | zl__94 when (eq_int (zl__94, (Big_int.of_int (30)))) -> !zvr30
    | zl__95 when (eq_int (zl__95, (Big_int.of_int (31)))) -> !zvr31
    | _ -> begin assert false; exit 0 end
  end) in
  zv)

and zwV ((zr, zin_v) : (Big_int.num * (bit) list)) : unit = sail_call (fun r ->
  let zv = zin_v in
  begin
    begin
      match zr with
      | zl__32 when (eq_int (zl__32, Big_int.zero)) -> (zvr0 := zv)
      | zl__33 when (eq_int (zl__33, (Big_int.of_int (1)))) -> (zvr1 := zv)
      | zl__34 when (eq_int (zl__34, (Big_int.of_int (2)))) -> (zvr2 := zv)
      | zl__35 when (eq_int (zl__35, (Big_int.of_int (3)))) -> (zvr3 := zv)
      | zl__36 when (eq_int (zl__36, (Big_int.of_int (4)))) -> (zvr4 := zv)
      | zl__37 when (eq_int (zl__37, (Big_int.of_int (5)))) -> (zvr5 := zv)
      | zl__38 when (eq_int (zl__38, (Big_int.of_int (6)))) -> (zvr6 := zv)
      | zl__39 when (eq_int (zl__39, (Big_int.of_int (7)))) -> (zvr7 := zv)
      | zl__40 when (eq_int (zl__40, (Big_int.of_int (8)))) -> (zvr8 := zv)
      | zl__41 when (eq_int (zl__41, (Big_int.of_int (9)))) -> (zvr9 := zv)
      | zl__42 when (eq_int (zl__42, (Big_int.of_int (10)))) -> (zvr10 := zv)
      | zl__43 when (eq_int (zl__43, (Big_int.of_int (11)))) -> (zvr11 := zv)
      | zl__44 when (eq_int (zl__44, (Big_int.of_int (12)))) -> (zvr12 := zv)
      | zl__45 when (eq_int (zl__45, (Big_int.of_int (13)))) -> (zvr13 := zv)
      | zl__46 when (eq_int (zl__46, (Big_int.of_int (14)))) -> (zvr14 := zv)
      | zl__47 when (eq_int (zl__47, (Big_int.of_int (15)))) -> (zvr15 := zv)
      | zl__48 when (eq_int (zl__48, (Big_int.of_int (16)))) -> (zvr16 := zv)
      | zl__49 when (eq_int (zl__49, (Big_int.of_int (17)))) -> (zvr17 := zv)
      | zl__50 when (eq_int (zl__50, (Big_int.of_int (18)))) -> (zvr18 := zv)
      | zl__51 when (eq_int (zl__51, (Big_int.of_int (19)))) -> (zvr19 := zv)
      | zl__52 when (eq_int (zl__52, (Big_int.of_int (20)))) -> (zvr20 := zv)
      | zl__53 when (eq_int (zl__53, (Big_int.of_int (21)))) -> (zvr21 := zv)
      | zl__54 when (eq_int (zl__54, (Big_int.of_int (22)))) -> (zvr22 := zv)
      | zl__55 when (eq_int (zl__55, (Big_int.of_int (23)))) -> (zvr23 := zv)
      | zl__56 when (eq_int (zl__56, (Big_int.of_int (24)))) -> (zvr24 := zv)
      | zl__57 when (eq_int (zl__57, (Big_int.of_int (25)))) -> (zvr25 := zv)
      | zl__58 when (eq_int (zl__58, (Big_int.of_int (26)))) -> (zvr26 := zv)
      | zl__59 when (eq_int (zl__59, (Big_int.of_int (27)))) -> (zvr27 := zv)
      | zl__60 when (eq_int (zl__60, (Big_int.of_int (28)))) -> (zvr28 := zv)
      | zl__61 when (eq_int (zl__61, (Big_int.of_int (29)))) -> (zvr29 := zv)
      | zl__62 when (eq_int (zl__62, (Big_int.of_int (30)))) -> (zvr30 := zv)
      | zl__63 when (eq_int (zl__63, (Big_int.of_int (31)))) -> (zvr31 := zv)
      | _ -> assert false
    end;
    zdirty_v_context ();
    let zVLEN = (mult ((uint !zvlenb), (Big_int.of_int (8)))) in
    begin
      assert ((lt (Big_int.zero, zVLEN)) && (lteq (zVLEN, (Big_int.of_int (65536)))));
      (if (Platform.get_config_print_reg ()) then (Platform.print_reg (concat_str ("v", (concat_str ((dec_str zr), (concat_str (" <- ", (string_of_bits (subrange (zv, (sub_int (zVLEN, (Big_int.of_int (1)))), Big_int.zero)))))))))) else ())
    end
  end)

and zrV_bits (zi : ((bit) list)) : (bit) list = sail_call (fun r ->
  zrV (uint zi))

and zwV_bits ((zi, zdata) : ((bit) list * (bit) list)) : unit = sail_call (fun r ->
  zwV ((uint zi), zdata))

and zinit_vregs (() : (unit)) : unit = sail_call (fun r ->
  let zzzero_vreg = (zzzeros_implicit (Big_int.of_int (65536))) in
  begin
    (zvr0 := zzzero_vreg);
    (zvr1 := zzzero_vreg);
    (zvr2 := zzzero_vreg);
    (zvr3 := zzzero_vreg);
    (zvr4 := zzzero_vreg);
    (zvr5 := zzzero_vreg);
    (zvr6 := zzzero_vreg);
    (zvr7 := zzzero_vreg);
    (zvr8 := zzzero_vreg);
    (zvr9 := zzzero_vreg);
    (zvr10 := zzzero_vreg);
    (zvr11 := zzzero_vreg);
    (zvr12 := zzzero_vreg);
    (zvr13 := zzzero_vreg);
    (zvr14 := zzzero_vreg);
    (zvr15 := zzzero_vreg);
    (zvr16 := zzzero_vreg);
    (zvr17 := zzzero_vreg);
    (zvr18 := zzzero_vreg);
    (zvr19 := zzzero_vreg);
    (zvr20 := zzzero_vreg);
    (zvr21 := zzzero_vreg);
    (zvr22 := zzzero_vreg);
    (zvr23 := zzzero_vreg);
    (zvr24 := zzzero_vreg);
    (zvr25 := zzzero_vreg);
    (zvr26 := zzzero_vreg);
    (zvr27 := zzzero_vreg);
    (zvr28 := zzzero_vreg);
    (zvr29 := zzzero_vreg);
    (zvr30 := zzzero_vreg);
    (zvr31 := zzzero_vreg)
  end)

and zundefined_Vcsr (() : (unit)) : ZVcsr.zVcsr = sail_call (fun r ->
  {ZVcsr.zbits = undefined_bitvector (Big_int.of_int (3))})

and zMk_Vcsr (zv : ((bit) list)) : ZVcsr.zVcsr = sail_call (fun r ->
  {ZVcsr.zbits = zv})

and z_get_Vcsr_vxrm (zv : (ZVcsr.zVcsr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (2)), (Big_int.of_int (1))))

and z_update_Vcsr_vxrm ((zv, zx) : (ZVcsr.zVcsr * (bit) list)) : ZVcsr.zVcsr = sail_call (fun r ->
  {zv with ZVcsr.zbits = update_subrange ((zv.zbits), (Big_int.of_int (2)), (Big_int.of_int (1)), zx)})

and z_set_Vcsr_vxrm ((zr_ref, zv) : ((ZVcsr.zVcsr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Vcsr_vxrm (zr, zv))))

and z_get_Vcsr_vxsat (zv : (ZVcsr.zVcsr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), Big_int.zero, Big_int.zero))

and z_update_Vcsr_vxsat ((zv, zx) : (ZVcsr.zVcsr * (bit) list)) : ZVcsr.zVcsr = sail_call (fun r ->
  {zv with ZVcsr.zbits = update_subrange ((zv.zbits), Big_int.zero, Big_int.zero, zx)})

and z_set_Vcsr_vxsat ((zr_ref, zv) : ((ZVcsr.zVcsr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Vcsr_vxsat (zr, zv))))

let zvcsr : (ZVcsr.zVcsr) ref = ref (zundefined_Vcsr ());;

let rec zext_write_vcsr ((zvxrm_val, zvxsat_val) : ((bit) list * (bit) list)) : unit = sail_call (fun r ->
  begin
    (zvcsr := ({!zvcsr with ZVcsr.zbits = update_subrange ((!zvcsr.zbits), (Big_int.of_int (2)), (Big_int.of_int (1)), zvxrm_val)}));
    (zvcsr := ({!zvcsr with ZVcsr.zbits = update_subrange ((!zvcsr.zbits), Big_int.zero, Big_int.zero, zvxsat_val)}));
    zdirty_v_context_if_present ()
  end)

and zget_num_elem ((zLMUL_pow, zSEW) : (Big_int.num * Big_int.num)) : Big_int.num = sail_call (fun r ->
  let zVLEN = (mult ((uint !zvlenb), (Big_int.of_int (8)))) in
  let zLMUL_pow_reg = ((if (lt (zLMUL_pow, Big_int.zero)) then Big_int.zero else zLMUL_pow)) in
  let znum_elem = (quot_round_zero ((mult ((int_power ((Big_int.of_int (2)), zLMUL_pow_reg)), zVLEN)), zSEW)) in
  begin assert (gt (znum_elem, Big_int.zero)); znum_elem end)

and zread_single_vreg ((znum_elem, zSEW, zvrid) : (Big_int.num * Big_int.num * (bit) list)) : ((bit) list) list = sail_call (fun r ->
  let zbv = (zrV_bits zvrid) in
  let zresult = ref ((undefined_vector ((z__id znum_elem), (undefined_bitvector (z__id zSEW)))) : ((bit) list) list) in
  begin
    assert ((lteq ((Big_int.of_int (8)), zSEW)) && (lteq (zSEW, (Big_int.of_int (64)))));
    let rec loop zi =
      if Big_int.less_equal zi (sub_int (znum_elem, (Big_int.of_int (1))))
      then ((let zstart_index = (mult (zi, zSEW)) in
      (zresult := (update (!zresult, zi, (slice (zbv, zstart_index, zSEW)))))); loop (Big_int.add zi (Big_int.of_int (1))))
      else ()
    in
    loop Big_int.zero;
    !zresult
  end)

and zwrite_single_vreg ((znum_elem, zSEW, zvrid, zv) : (Big_int.num * Big_int.num * (bit) list * ((bit) list) list)) : unit = sail_call (fun r ->
  let zr = ref ((zzzeros_implicit (Big_int.of_int (65536))) : (bit) list) in
  begin
    assert ((lteq ((Big_int.of_int (8)), zSEW)) && (lteq (zSEW, (Big_int.of_int (64)))));
    let rec loop zi =
      if Big_int.greater_equal zi Big_int.zero
      then ((begin
        (zr := (shiftl (!zr, zSEW)));
        (zr := (or_vec (!zr, (zzzero_extend ((Big_int.of_int (65536)), (access (zv, zi)))))))
      end); loop (Big_int.sub zi (Big_int.of_int (1))))
      else ()
    in
    loop (sub_int (znum_elem, (Big_int.of_int (1))));
    zwV_bits (zvrid, !zr)
  end)

and zread_vreg ((znum_elem, zSEW, zLMUL_pow, zvrid) : (Big_int.num * Big_int.num * Big_int.num * (bit) list)) : ((bit) list) list = sail_call (fun r ->
  let zresult = ref ((undefined_vector ((z__id znum_elem), (undefined_bitvector (z__id zSEW)))) : ((bit) list) list) in
  let zVLEN = (mult ((uint !zvlenb), (Big_int.of_int (8)))) in
  let zLMUL_pow_reg = ((if (lt (zLMUL_pow, Big_int.zero)) then Big_int.zero else zLMUL_pow)) in
  begin
    (if (gt ((add_int ((uint zvrid), (pow2 zLMUL_pow_reg))), (Big_int.of_int (32)))) then (assert false) else ((if (zneq_int ((modulus ((uint zvrid), (pow2 zLMUL_pow_reg))), Big_int.zero)) then (assert false) else ((if (lt (zLMUL_pow, Big_int.zero)) then ((zresult := (zread_single_vreg ((length !zresult), zSEW, zvrid)))) else (let znum_elem_single = (quot_round_zero (zVLEN, zSEW)) in
    begin
      assert (gteq ((z__id znum_elem_single), Big_int.zero));
      let rec loop zi_lmul =
        if Big_int.less_equal zi_lmul (sub_int ((pow2 zLMUL_pow_reg), (Big_int.of_int (1))))
        then ((let zr_start_i = (mult (zi_lmul, (z__id znum_elem_single))) in
        let zr_end_i = (sub_int ((add_int (zr_start_i, (z__id znum_elem_single))), (Big_int.of_int (1)))) in
        let zvrid_lmul = (add_vec (zvrid, (zto_bits ((Big_int.of_int (5)), zi_lmul)))) in
        let zsingle_result = (zread_single_vreg ((z__id znum_elem_single), zSEW, zvrid_lmul)) in
        let rec loop zr_i =
          if Big_int.less_equal zr_i zr_end_i
          then ((let zs_i = (sub_int (zr_i, zr_start_i)) in
          begin
            assert ((lteq (Big_int.zero, zr_i)) && (lt (zr_i, znum_elem)));
            assert ((lteq (Big_int.zero, zs_i)) && (lt (zs_i, (z__id znum_elem_single))));
            (zresult := (update (!zresult, zr_i, (access (zsingle_result, zs_i)))))
          end); loop (Big_int.add zr_i (Big_int.of_int (1))))
          else ()
        in
        loop zr_start_i); loop (Big_int.add zi_lmul (Big_int.of_int (1))))
        else ()
      in
      loop Big_int.zero
    end))))));
    !zresult
  end)

and zread_single_element ((zEEW, zindex, zvrid) : (Big_int.num * Big_int.num * (bit) list)) : (bit) list = sail_call (fun r ->
  let zVLEN = (mult ((uint !zvlenb), (Big_int.of_int (8)))) in
  begin
    assert (gteq (zVLEN, zEEW));
    let zelem_per_reg = (quot_round_zero (zVLEN, zEEW)) in
    begin
      assert (gteq ((z__id zelem_per_reg), Big_int.zero));
      let zreal_vrid = (add_vec (zvrid, (zto_bits ((Big_int.of_int (5)), (quot_round_zero (zindex, (z__id zelem_per_reg))))))) in
      let zreal_index = (modulus (zindex, (z__id zelem_per_reg))) in
      let zvrid_val = (zread_single_vreg ((z__id zelem_per_reg), zEEW, zreal_vrid)) in
      begin
        assert ((lteq (Big_int.zero, zreal_index)) && (lt (zreal_index, (z__id zelem_per_reg))));
        access (zvrid_val, zreal_index)
      end
    end
  end)

and zwrite_vreg ((znum_elem, zSEW, zLMUL_pow, zvrid, zvec) : (Big_int.num * Big_int.num * Big_int.num * (bit) list * ((bit) list) list)) : unit = sail_call (fun r ->
  let zVLEN = (mult ((uint !zvlenb), (Big_int.of_int (8)))) in
  let zLMUL_pow_reg = ((if (lt (zLMUL_pow, Big_int.zero)) then Big_int.zero else zLMUL_pow)) in
  let znum_elem_single = (quot_round_zero (zVLEN, zSEW)) in
  begin
    assert (gteq ((z__id znum_elem_single), Big_int.zero));
    let rec loop zi_lmul =
      if Big_int.less_equal zi_lmul (sub_int ((pow2 zLMUL_pow_reg), (Big_int.of_int (1))))
      then ((let zsingle_vec = ref ((undefined_vector ((z__id znum_elem_single), (undefined_bitvector (z__id zSEW)))) : ((bit) list) list) in
      let zvrid_lmul = (add_vec (zvrid, (zto_bits ((Big_int.of_int (5)), zi_lmul)))) in
      let zr_start_i = (mult (zi_lmul, (z__id znum_elem_single))) in
      let zr_end_i = (sub_int ((add_int (zr_start_i, (z__id znum_elem_single))), (Big_int.of_int (1)))) in
      begin
        let rec loop zr_i =
          if Big_int.less_equal zr_i zr_end_i
          then ((let zs_i = (sub_int (zr_i, zr_start_i)) in
          begin
            assert ((lteq (Big_int.zero, zr_i)) && (lt (zr_i, znum_elem)));
            assert ((lteq (Big_int.zero, zs_i)) && (lt (zs_i, (z__id znum_elem_single))));
            (zsingle_vec := (update (!zsingle_vec, zs_i, (access (zvec, zr_i)))))
          end); loop (Big_int.add zr_i (Big_int.of_int (1))))
          else ()
        in
        loop zr_start_i;
        zwrite_single_vreg ((z__id znum_elem_single), zSEW, zvrid_lmul, !zsingle_vec)
      end); loop (Big_int.add zi_lmul (Big_int.of_int (1))))
      else ()
    in
    loop Big_int.zero
  end)

and zwrite_single_element ((zEEW, zindex, zvrid, zvalue) : (Big_int.num * Big_int.num * (bit) list * (bit) list)) : unit = sail_call (fun r ->
  let zVLEN = (mult ((uint !zvlenb), (Big_int.of_int (8)))) in
  let zelem_per_reg = (quot_round_zero (zVLEN, zEEW)) in
  begin
    assert (gteq ((z__id zelem_per_reg), Big_int.zero));
    let zreal_vrid = (add_vec (zvrid, (zto_bits ((Big_int.of_int (5)), (quot_round_zero (zindex, (z__id zelem_per_reg))))))) in
    let zreal_index = (modulus (zindex, (z__id zelem_per_reg))) in
    let zvrid_val = (zread_single_vreg ((z__id zelem_per_reg), zEEW, zreal_vrid)) in
    let zr = ref ((zzzeros_implicit (Big_int.of_int (65536))) : (bit) list) in
    begin
      let rec loop zi =
        if Big_int.greater_equal zi Big_int.zero
        then ((begin
          (zr := (shiftl (!zr, zEEW)));
          (if (eq_int (zi, zreal_index)) then ((zr := (or_vec (!zr, (zzzero_extend ((Big_int.of_int (65536)), zvalue)))))) else ((zr := (or_vec (!zr, (zzzero_extend ((Big_int.of_int (65536)), (access (zvrid_val, zi)))))))))
        end); loop (Big_int.sub zi (Big_int.of_int (1))))
        else ()
      in
      loop (sub_int ((z__id zelem_per_reg), (Big_int.of_int (1))));
      zwV_bits (zreal_vrid, !zr)
    end
  end)

and zread_vmask ((znum_elem, zvm, zvrid) : (Big_int.num * (bit) list * (bit) list)) : (bool) list = sail_call (fun r ->
  let zVLEN = (mult ((uint !zvlenb), (Big_int.of_int (8)))) in
  begin
    assert (lteq (znum_elem, (Big_int.of_int (65536))));
    let zvreg_val = (zrV_bits zvrid) in
    let zresult = ref ((undefined_vector ((z__id znum_elem), (undefined_bool ()))) : (bool) list) in
    begin
      let rec loop zi =
        if Big_int.less_equal zi (sub_int (znum_elem, (Big_int.of_int (1))))
        then (((if (eq_list (zvm, [B1])) then ((zresult := (update (!zresult, zi, true)))) else ((zresult := (update (!zresult, zi, (zbit_to_bool (access (zvreg_val, zi))))))))); loop (Big_int.add zi (Big_int.of_int (1))))
        else ()
      in
      loop Big_int.zero;
      !zresult
    end
  end)

and zread_vmask_carry ((znum_elem, zvm, zvrid) : (Big_int.num * (bit) list * (bit) list)) : (bool) list = sail_call (fun r ->
  let zVLEN = (mult ((uint !zvlenb), (Big_int.of_int (8)))) in
  begin
    assert ((lt (Big_int.zero, znum_elem)) && (lteq (znum_elem, (Big_int.of_int (65536)))));
    let zvreg_val = (zrV_bits zvrid) in
    let zresult = ref ((undefined_vector ((z__id znum_elem), (undefined_bool ()))) : (bool) list) in
    begin
      let rec loop zi =
        if Big_int.less_equal zi (sub_int (znum_elem, (Big_int.of_int (1))))
        then (((if (eq_list (zvm, [B1])) then ((zresult := (update (!zresult, zi, false)))) else ((zresult := (update (!zresult, zi, (zbit_to_bool (access (zvreg_val, zi))))))))); loop (Big_int.add zi (Big_int.of_int (1))))
        else ()
      in
      loop Big_int.zero;
      !zresult
    end
  end)

and zwrite_vmask ((znum_elem, zvrid, zv) : (Big_int.num * (bit) list * (bool) list)) : unit = sail_call (fun r ->
  let zVLEN = (mult ((uint !zvlenb), (Big_int.of_int (8)))) in
  begin
    assert ((lt (Big_int.zero, zVLEN)) && (lteq (zVLEN, (Big_int.of_int (65536)))));
    assert ((lt (Big_int.zero, znum_elem)) && (lteq (znum_elem, zVLEN)));
    let zvreg_val = (zrV_bits zvrid) in
    let zresult = ref ((undefined_bitvector (Big_int.of_int (65536))) : (bit) list) in
    begin
      let rec loop zi =
        if Big_int.less_equal zi (sub_int (znum_elem, (Big_int.of_int (1))))
        then (((zresult := (update (!zresult, zi, (zbool_to_bit (access (zv, zi))))))); loop (Big_int.add zi (Big_int.of_int (1))))
        else ()
      in
      loop Big_int.zero;
      let rec loop zi =
        if Big_int.less_equal zi (sub_int (zVLEN, (Big_int.of_int (1))))
        then (((zresult := (update (!zresult, zi, (access (zvreg_val, zi)))))); loop (Big_int.add zi (Big_int.of_int (1))))
        else ()
      in
      loop znum_elem;
      zwV_bits (zvrid, !zresult)
    end
  end)

and zundefined_Ustatus (() : (unit)) : ZUstatus.zUstatus = sail_call (fun r ->
  {ZUstatus.zbits = undefined_bitvector (Big_int.of_int (32))})

and zMk_Ustatus (zv : ((bit) list)) : ZUstatus.zUstatus = sail_call (fun r ->
  {ZUstatus.zbits = zv})

and zlower_sstatus (zs : (ZSstatus.zSstatus)) : ZUstatus.zUstatus = sail_call (fun r ->
  let zu = (zMk_Ustatus (zzzero_extend ((Big_int.of_int (32)), [B0]))) in
  let zu = (z_update_Ustatus_UPIE (zu, (z_get_Sstatus_UPIE zs))) in
  let zu = (z_update_Ustatus_UIE (zu, (z_get_Sstatus_UIE zs))) in
  zu)

and zlift_ustatus ((zs, zu) : (ZSstatus.zSstatus * ZUstatus.zUstatus)) : ZSstatus.zSstatus = sail_call (fun r ->
  let zs = (z_update_Sstatus_UPIE (zs, (z_get_Ustatus_UPIE zu))) in
  let zs = (z_update_Sstatus_UIE (zs, (z_get_Ustatus_UIE zu))) in
  zs)

and zlegalizze_ustatus ((zm, zv) : (ZMstatus.zMstatus * (bit) list)) : ZMstatus.zMstatus = sail_call (fun r ->
  let zu = (zMk_Ustatus zv) in
  let zs = (zlower_mstatus zm) in
  let zs = (zlift_ustatus (zs, zu)) in
  let zm = (zlift_sstatus (zm, zs)) in
  zm)

and zundefined_Uinterrupts (() : (unit)) : ZUinterrupts.zUinterrupts = sail_call (fun r ->
  {ZUinterrupts.zbits = undefined_bitvector (Big_int.of_int (32))})

and zMk_Uinterrupts (zv : ((bit) list)) : ZUinterrupts.zUinterrupts = sail_call (fun r ->
  {ZUinterrupts.zbits = zv})

and zlower_sip ((zs, zd) : (ZSinterrupts.zSinterrupts * ZSinterrupts.zSinterrupts)) : ZUinterrupts.zUinterrupts = sail_call (fun r ->
  let zu = (zMk_Uinterrupts (zzzero_extend ((Big_int.of_int (32)), [B0]))) in
  let zu = (z_update_Uinterrupts_UEI (zu, (and_vec ((z_get_Sinterrupts_UEI zs), (z_get_Sinterrupts_UEI zd))))) in
  let zu = (z_update_Uinterrupts_UTI (zu, (and_vec ((z_get_Sinterrupts_UTI zs), (z_get_Sinterrupts_UTI zd))))) in
  let zu = (z_update_Uinterrupts_USI (zu, (and_vec ((z_get_Sinterrupts_USI zs), (z_get_Sinterrupts_USI zd))))) in
  zu)

and zlower_sie ((zs, zd) : (ZSinterrupts.zSinterrupts * ZSinterrupts.zSinterrupts)) : ZUinterrupts.zUinterrupts = sail_call (fun r ->
  let zu = (zMk_Uinterrupts (zzzero_extend ((Big_int.of_int (32)), [B0]))) in
  let zu = (z_update_Uinterrupts_UEI (zu, (and_vec ((z_get_Sinterrupts_UEI zs), (z_get_Sinterrupts_UEI zd))))) in
  let zu = (z_update_Uinterrupts_UTI (zu, (and_vec ((z_get_Sinterrupts_UTI zs), (z_get_Sinterrupts_UTI zd))))) in
  let zu = (z_update_Uinterrupts_USI (zu, (and_vec ((z_get_Sinterrupts_USI zs), (z_get_Sinterrupts_USI zd))))) in
  zu)

and zlift_uip ((zo, zd, zu) : (ZSinterrupts.zSinterrupts * ZSinterrupts.zSinterrupts * ZUinterrupts.zUinterrupts)) : ZSinterrupts.zSinterrupts = sail_call (fun r ->
  let zs = zo in
  let zs = ((if (eq_list ((z_get_Sinterrupts_USI zd), [B1])) then (z_update_Sinterrupts_USI (zs, (z_get_Uinterrupts_USI zu))) else zs)) in
  zs)

and zlegalizze_uip ((zs, zd, zv) : (ZSinterrupts.zSinterrupts * ZSinterrupts.zSinterrupts * (bit) list)) : ZSinterrupts.zSinterrupts = sail_call (fun r ->
  zlift_uip (zs, zd, (zMk_Uinterrupts zv)))

and zlift_uie ((zo, zd, zu) : (ZSinterrupts.zSinterrupts * ZSinterrupts.zSinterrupts * ZUinterrupts.zUinterrupts)) : ZSinterrupts.zSinterrupts = sail_call (fun r ->
  let zs = zo in
  let zs = ((if (eq_list ((z_get_Sinterrupts_UEI zd), [B1])) then (z_update_Sinterrupts_UEI (zs, (z_get_Uinterrupts_UEI zu))) else zs)) in
  let zs = ((if (eq_list ((z_get_Sinterrupts_UTI zd), [B1])) then (z_update_Sinterrupts_UTI (zs, (z_get_Uinterrupts_UTI zu))) else zs)) in
  let zs = ((if (eq_list ((z_get_Sinterrupts_USI zd), [B1])) then (z_update_Sinterrupts_USI (zs, (z_get_Uinterrupts_USI zu))) else zs)) in
  zs)

and zlegalizze_uie ((zs, zd, zv) : (ZSinterrupts.zSinterrupts * ZSinterrupts.zSinterrupts * (bit) list)) : ZSinterrupts.zSinterrupts = sail_call (fun r ->
  zlift_uie (zs, zd, (zMk_Uinterrupts zv)))

let zutvec : (ZMtvec.zMtvec) ref = ref (zundefined_Mtvec ());;

let zuscratch : (zxlenbits) ref = ref (undefined_bitvector (Big_int.of_int (32)));;

let zuepc : (zxlenbits) ref = ref (undefined_bitvector (Big_int.of_int (32)));;

let zucause : (ZMcause.zMcause) ref = ref (zundefined_Mcause ());;

let zutval : (zxlenbits) ref = ref (undefined_bitvector (Big_int.of_int (32)));;

type  zext_exception = unit;;

let string_of_zext_exception (gs6525 :  zext_exception) = string_of_zunit gs6525;;

let rec zhandle_trap_extension ((zp, zpc, zu) : (zPrivilege * (bit) list * (unit) zoption)) : unit = sail_call (fun r ->
  begin
    match zp with
    | ZMachine ->
      let (zrepresentable, zmepcc) = (zsetCapAddr (!zPCC, zpc)) in
      begin
        assert (zrepresentable || (znot (zmepcc.ztag)));
        (zMEPCC := zmepcc)
      end
    | _ ->
      zinternal_error ("src/cheri_sys_exceptions.sail", (Big_int.of_int (80)), "unsupported")
  end)

and zprepare_trap_vector ((zp, zc) : (zPrivilege * ZMcause.zMcause)) : (bit) list = sail_call (fun r ->
  begin
    (if (zneq_anything (zp, ZMachine)) then (zinternal_error ("src/cheri_sys_exceptions.sail", (Big_int.of_int (86)), "unsupported")) else ());
    let ztcc = !zMTCC in
    let zv = (zMk_Mtvec (ztcc.zaddress)) in
    begin
      begin
        match (ztrapVectorMode_of_bits (z_get_Mtvec_Mode zv)) with
        | ZTV_Direct -> ()
        | _ ->
          zinternal_error ("src/cheri_sys_exceptions.sail", (Big_int.of_int (93)), "unsupported trap mode")
      end;
      (znextPCC := ztcc);
      ztcc.zaddress
    end
  end)

and zget_xret_target (zp : (zPrivilege)) : (bit) list = sail_call (fun r ->
  begin
    (if (zneq_anything (zp, ZMachine)) then (zinternal_error ("src/cheri_sys_exceptions.sail", (Big_int.of_int (106)), "unsupported")) else ());
    let zcap = !zMEPCC in
    zcap.zaddress
  end)

and zset_xret_target ((zp, zvalue) : (zPrivilege * (bit) list)) : (bit) list = sail_call (fun r ->
  zinternal_error ("src/cheri_sys_exceptions.sail", (Big_int.of_int (117)), "unsupported"))

and zprepare_xret_target (zp : (zPrivilege)) : (bit) list = sail_call (fun r ->
  begin
    (if (zneq_anything (zp, ZMachine)) then (zinternal_error ("src/cheri_sys_exceptions.sail", (Big_int.of_int (126)), "unsupported")) else ());
    let zepcc = !zMEPCC in
    begin (znextPCC := zepcc); zepcc.zaddress end
  end)

and zget_mtvec (() : (unit)) : (bit) list = sail_call (fun r -> !zMTCC.zaddress)

and zget_stvec (() : (unit)) : (bit) list = sail_call (fun r ->
  zzzeros_implicit (Big_int.of_int (32)))

and zget_utvec (() : (unit)) : (bit) list = sail_call (fun r ->
  zzzeros_implicit (Big_int.of_int (32)))

and zset_mtvec (zvalue : ((bit) list)) : (bit) list = sail_call (fun r ->
  begin
    zinternal_error ("src/cheri_sys_exceptions.sail", (Big_int.of_int (144)), "unsupported");
    zzzeros_implicit (Big_int.of_int (32))
  end)

and zset_stvec (zvalue : ((bit) list)) : (bit) list = sail_call (fun r ->
  begin
    zinternal_error ("src/cheri_sys_exceptions.sail", (Big_int.of_int (149)), "unsupported");
    zzzeros_implicit (Big_int.of_int (32))
  end)

and zset_utvec (zvalue : ((bit) list)) : (bit) list = sail_call (fun r ->
  begin
    zinternal_error ("src/cheri_sys_exceptions.sail", (Big_int.of_int (154)), "unsupported");
    zzzeros_implicit (Big_int.of_int (32))
  end)

module Zsync_exception = struct
  type  zsync_exception = {
    ztrap : zExceptionType;
    zexcinfo : (zxlenbits) zoption;
    zext : (zext_exception) zoption
  }
  end;;

let string_of_zsync_exception (gs6577 :  Zsync_exception.zsync_exception) =
  "{trap = " ^ string_of_zExceptionType gs6577.Zsync_exception.ztrap
  ^ ", excinfo = " ^ "APP"
  ^ ", ext = " ^ "APP" ^ "}";;

let rec zcsr_name_map_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | "ustatus" -> ZSome [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0]
      | "uie" -> ZSome [B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B0]
      | "utvec" -> ZSome [B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B1]
      | "uscratch" -> ZSome [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0; B0]
      | "uepc" -> ZSome [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0; B1]
      | "ucause" -> ZSome [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B1; B0]
      | "utval" -> ZSome [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B1; B1]
      | "uip" -> ZSome [B0; B0; B0; B0; B0; B1; B0; B0; B0; B1; B0; B0]
      | "fflags" -> ZSome [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1]
      | "frm" -> ZSome [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0]
      | "fcsr" -> ZSome [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B1]
      | "seed" -> ZSome [B0; B0; B0; B0; B0; B0; B0; B1; B0; B1; B0; B1]
      | "cycle" -> ZSome [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0]
      | "time" -> ZSome [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1]
      | "instret" -> ZSome [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0]
      | "cycleh" -> ZSome [B1; B1; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0]
      | "timeh" -> ZSome [B1; B1; B0; B0; B1; B0; B0; B0; B0; B0; B0; B1]
      | "instreth" -> ZSome [B1; B1; B0; B0; B1; B0; B0; B0; B0; B0; B1; B0]
      | "sstatus" -> ZSome [B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0; B0]
      | "sedeleg" -> ZSome [B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B1; B0]
      | "sideleg" -> ZSome [B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B1; B1]
      | "sie" -> ZSome [B0; B0; B0; B1; B0; B0; B0; B0; B0; B1; B0; B0]
      | "stvec" -> ZSome [B0; B0; B0; B1; B0; B0; B0; B0; B0; B1; B0; B1]
      | "scounteren" -> ZSome [B0; B0; B0; B1; B0; B0; B0; B0; B0; B1; B1; B0]
      | "sscratch" -> ZSome [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B0; B0]
      | "sepc" -> ZSome [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B0; B1]
      | "scause" -> ZSome [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B1; B0]
      | "stval" -> ZSome [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B1; B1]
      | "sip" -> ZSome [B0; B0; B0; B1; B0; B1; B0; B0; B0; B1; B0; B0]
      | "satp" -> ZSome [B0; B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0]
      | "senvcfg" -> ZSome [B0; B0; B0; B1; B0; B0; B0; B0; B1; B0; B1; B0]
      | "mvendorid" -> ZSome [B1; B1; B1; B1; B0; B0; B0; B1; B0; B0; B0; B1]
      | "marchid" -> ZSome [B1; B1; B1; B1; B0; B0; B0; B1; B0; B0; B1; B0]
      | "mimpid" -> ZSome [B1; B1; B1; B1; B0; B0; B0; B1; B0; B0; B1; B1]
      | "mhartid" -> ZSome [B1; B1; B1; B1; B0; B0; B0; B1; B0; B1; B0; B0]
      | "mstatus" -> ZSome [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0; B0]
      | "misa" -> ZSome [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0; B1]
      | "medeleg" -> ZSome [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B1; B0]
      | "mideleg" -> ZSome [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B1; B1]
      | "mie" -> ZSome [B0; B0; B1; B1; B0; B0; B0; B0; B0; B1; B0; B0]
      | "mtvec" -> ZSome [B0; B0; B1; B1; B0; B0; B0; B0; B0; B1; B0; B1]
      | "mcounteren" -> ZSome [B0; B0; B1; B1; B0; B0; B0; B0; B0; B1; B1; B0]
      | "mcountinhibit" ->
        ZSome [B0; B0; B1; B1; B0; B0; B1; B0; B0; B0; B0; B0]
      | "menvcfg" -> ZSome [B0; B0; B1; B1; B0; B0; B0; B0; B1; B0; B1; B0]
      | "mscratch" -> ZSome [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B0; B0]
      | "mepc" -> ZSome [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B0; B1]
      | "mcause" -> ZSome [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B1; B0]
      | "mtval" -> ZSome [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B1; B1]
      | "mip" -> ZSome [B0; B0; B1; B1; B0; B1; B0; B0; B0; B1; B0; B0]
      | "pmpcfg0" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B0; B0; B0; B0; B0]
      | "pmpcfg1" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B0; B0; B0; B0; B1]
      | "pmpcfg2" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B0; B0; B0; B1; B0]
      | "pmpcfg3" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B0; B0; B0; B1; B1]
      | "pmpcfg4" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B0; B0; B1; B0; B0]
      | "pmpcfg5" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B0; B0; B1; B0; B1]
      | "pmpcfg6" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B0; B0; B1; B1; B0]
      | "pmpcfg7" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B0; B0; B1; B1; B1]
      | "pmpcfg8" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B0; B1; B0; B0; B0]
      | "pmpcfg9" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B0; B1; B0; B0; B1]
      | "pmpcfg10" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B0; B1; B0; B1; B0]
      | "pmpcfg11" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B0; B1; B0; B1; B1]
      | "pmpcfg12" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B0; B1; B1; B0; B0]
      | "pmpcfg13" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B0; B1; B1; B0; B1]
      | "pmpcfg14" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B0; B1; B1; B1; B0]
      | "pmpcfg15" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B0; B1; B1; B1; B1]
      | "pmpaddr0" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B1; B0; B0; B0; B0]
      | "pmpaddr1" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B1; B0; B0; B0; B1]
      | "pmpaddr2" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B1; B0; B0; B1; B0]
      | "pmpaddr3" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B1; B0; B0; B1; B1]
      | "pmpaddr4" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B1; B0; B1; B0; B0]
      | "pmpaddr5" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B1; B0; B1; B0; B1]
      | "pmpaddr6" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B1; B0; B1; B1; B0]
      | "pmpaddr7" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B1; B0; B1; B1; B1]
      | "pmpaddr8" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B1; B1; B0; B0; B0]
      | "pmpaddr9" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B1; B1; B0; B0; B1]
      | "pmpaddr10" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B1; B1; B0; B1; B0]
      | "pmpaddr11" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B1; B1; B0; B1; B1]
      | "pmpaddr12" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B1; B1; B1; B0; B0]
      | "pmpaddr13" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B1; B1; B1; B0; B1]
      | "pmpaddr14" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B1; B1; B1; B1; B0]
      | "pmpaddr15" -> ZSome [B0; B0; B1; B1; B1; B0; B1; B1; B1; B1; B1; B1]
      | "pmpaddr16" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B0; B0; B0; B0; B0]
      | "pmpaddr17" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B0; B0; B0; B0; B1]
      | "pmpaddr18" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B0; B0; B0; B1; B0]
      | "pmpaddr19" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B0; B0; B0; B1; B1]
      | "pmpaddr20" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B0; B0; B1; B0; B0]
      | "pmpaddr21" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B0; B0; B1; B0; B1]
      | "pmpaddr22" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B0; B0; B1; B1; B0]
      | "pmpaddr23" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B0; B0; B1; B1; B1]
      | "pmpaddr24" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B0; B1; B0; B0; B0]
      | "pmpaddr25" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B0; B1; B0; B0; B1]
      | "pmpaddr26" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B0; B1; B0; B1; B0]
      | "pmpaddr27" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B0; B1; B0; B1; B1]
      | "pmpaddr28" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B0; B1; B1; B0; B0]
      | "pmpaddr29" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B0; B1; B1; B0; B1]
      | "pmpaddr30" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B0; B1; B1; B1; B0]
      | "pmpaddr31" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B0; B1; B1; B1; B1]
      | "pmpaddr32" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B1; B0; B0; B0; B0]
      | "pmpaddr33" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B1; B0; B0; B0; B1]
      | "pmpaddr34" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B1; B0; B0; B1; B0]
      | "pmpaddr35" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B1; B0; B0; B1; B1]
      | "pmpaddr36" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B1; B0; B1; B0; B0]
      | "pmpaddr37" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B1; B0; B1; B0; B1]
      | "pmpaddr38" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B1; B0; B1; B1; B0]
      | "pmpaddr39" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B1; B0; B1; B1; B1]
      | "pmpaddr40" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B1; B1; B0; B0; B0]
      | "pmpaddr41" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B1; B1; B0; B0; B1]
      | "pmpaddr42" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B1; B1; B0; B1; B0]
      | "pmpaddr43" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B1; B1; B0; B1; B1]
      | "pmpaddr44" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B1; B1; B1; B0; B0]
      | "pmpaddr45" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B1; B1; B1; B0; B1]
      | "pmpaddr46" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B1; B1; B1; B1; B0]
      | "pmpaddr47" -> ZSome [B0; B0; B1; B1; B1; B1; B0; B1; B1; B1; B1; B1]
      | "pmpaddr48" -> ZSome [B0; B0; B1; B1; B1; B1; B1; B0; B0; B0; B0; B0]
      | "pmpaddr49" -> ZSome [B0; B0; B1; B1; B1; B1; B1; B0; B0; B0; B0; B1]
      | "pmpaddr50" -> ZSome [B0; B0; B1; B1; B1; B1; B1; B0; B0; B0; B1; B0]
      | "pmpaddr51" -> ZSome [B0; B0; B1; B1; B1; B1; B1; B0; B0; B0; B1; B1]
      | "pmpaddr52" -> ZSome [B0; B0; B1; B1; B1; B1; B1; B0; B0; B1; B0; B0]
      | "pmpaddr53" -> ZSome [B0; B0; B1; B1; B1; B1; B1; B0; B0; B1; B0; B1]
      | "pmpaddr54" -> ZSome [B0; B0; B1; B1; B1; B1; B1; B0; B0; B1; B1; B0]
      | "pmpaddr55" -> ZSome [B0; B0; B1; B1; B1; B1; B1; B0; B0; B1; B1; B1]
      | "pmpaddr56" -> ZSome [B0; B0; B1; B1; B1; B1; B1; B0; B1; B0; B0; B0]
      | "pmpaddr57" -> ZSome [B0; B0; B1; B1; B1; B1; B1; B0; B1; B0; B0; B1]
      | "pmpaddr58" -> ZSome [B0; B0; B1; B1; B1; B1; B1; B0; B1; B0; B1; B0]
      | "pmpaddr59" -> ZSome [B0; B0; B1; B1; B1; B1; B1; B0; B1; B0; B1; B1]
      | "pmpaddr60" -> ZSome [B0; B0; B1; B1; B1; B1; B1; B0; B1; B1; B0; B0]
      | "pmpaddr61" -> ZSome [B0; B0; B1; B1; B1; B1; B1; B0; B1; B1; B0; B1]
      | "pmpaddr62" -> ZSome [B0; B0; B1; B1; B1; B1; B1; B0; B1; B1; B1; B0]
      | "pmpaddr63" -> ZSome [B0; B0; B1; B1; B1; B1; B1; B0; B1; B1; B1; B1]
      | "mcycle" -> ZSome [B1; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0; B0]
      | "minstret" -> ZSome [B1; B0; B1; B1; B0; B0; B0; B0; B0; B0; B1; B0]
      | "mcycleh" -> ZSome [B1; B0; B1; B1; B1; B0; B0; B0; B0; B0; B0; B0]
      | "minstreth" -> ZSome [B1; B0; B1; B1; B1; B0; B0; B0; B0; B0; B1; B0]
      | "tselect" -> ZSome [B0; B1; B1; B1; B1; B0; B1; B0; B0; B0; B0; B0]
      | "tdata1" -> ZSome [B0; B1; B1; B1; B1; B0; B1; B0; B0; B0; B0; B1]
      | "tdata2" -> ZSome [B0; B1; B1; B1; B1; B0; B1; B0; B0; B0; B1; B0]
      | "tdata3" -> ZSome [B0; B1; B1; B1; B1; B0; B1; B0; B0; B0; B1; B1]
      | "vstart" -> ZSome [B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B0; B0]
      | "vxsat" -> ZSome [B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B0; B1]
      | "vxrm" -> ZSome [B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B1; B0]
      | "vcsr" -> ZSome [B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B1; B1]
      | "vl" -> ZSome [B1; B1; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0]
      | "vtype" -> ZSome [B1; B1; B0; B0; B0; B0; B1; B0; B0; B0; B0; B1]
      | "vlenb" -> ZSome [B1; B1; B0; B0; B0; B0; B1; B0; B0; B0; B1; B0]
      | zmapping0z3 when (zhex_bits_12_backwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_12_backwards zmapping0z3) with
          | zreg -> ZSome zreg
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
  end)

and zcsr_name_map_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      true
    | zb__1 when (eq_list (zb__1, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B0])) ->
      true
    | zb__2 when (eq_list (zb__2, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B1])) ->
      true
    | zb__3 when (eq_list (zb__3, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0; B0])) ->
      true
    | zb__4 when (eq_list (zb__4, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0; B1])) ->
      true
    | zb__5 when (eq_list (zb__5, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B1; B0])) ->
      true
    | zb__6 when (eq_list (zb__6, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B1; B1])) ->
      true
    | zb__7 when (eq_list (zb__7, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B1; B0; B0])) ->
      true
    | zb__8 when (eq_list (zb__8, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1])) ->
      true
    | zb__9 when (eq_list (zb__9, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      true
    | zb__10 when (eq_list (zb__10, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B1])) ->
      true
    | zb__11 when (eq_list (zb__11, [B0; B0; B0; B0; B0; B0; B0; B1; B0; B1; B0; B1])) ->
      true
    | zb__12 when (eq_list (zb__12, [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      true
    | zb__13 when (eq_list (zb__13, [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1])) ->
      true
    | zb__14 when (eq_list (zb__14, [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      true
    | zb__15 when (eq_list (zb__15, [B1; B1; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0])) ->
      true
    | zb__16 when (eq_list (zb__16, [B1; B1; B0; B0; B1; B0; B0; B0; B0; B0; B0; B1])) ->
      true
    | zb__17 when (eq_list (zb__17, [B1; B1; B0; B0; B1; B0; B0; B0; B0; B0; B1; B0])) ->
      true
    | zb__18 when (eq_list (zb__18, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      true
    | zb__19 when (eq_list (zb__19, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      true
    | zb__20 when (eq_list (zb__20, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B1; B1])) ->
      true
    | zb__21 when (eq_list (zb__21, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B1; B0; B0])) ->
      true
    | zb__22 when (eq_list (zb__22, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B1; B0; B1])) ->
      true
    | zb__23 when (eq_list (zb__23, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B1; B1; B0])) ->
      true
    | zb__24 when (eq_list (zb__24, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B0; B0])) ->
      true
    | zb__25 when (eq_list (zb__25, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B0; B1])) ->
      true
    | zb__26 when (eq_list (zb__26, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B1; B0])) ->
      true
    | zb__27 when (eq_list (zb__27, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B1; B1])) ->
      true
    | zb__28 when (eq_list (zb__28, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B1; B0; B0])) ->
      true
    | zb__29 when (eq_list (zb__29, [B0; B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0])) ->
      true
    | zb__30 when (eq_list (zb__30, [B0; B0; B0; B1; B0; B0; B0; B0; B1; B0; B1; B0])) ->
      true
    | zb__31 when (eq_list (zb__31, [B1; B1; B1; B1; B0; B0; B0; B1; B0; B0; B0; B1])) ->
      true
    | zb__32 when (eq_list (zb__32, [B1; B1; B1; B1; B0; B0; B0; B1; B0; B0; B1; B0])) ->
      true
    | zb__33 when (eq_list (zb__33, [B1; B1; B1; B1; B0; B0; B0; B1; B0; B0; B1; B1])) ->
      true
    | zb__34 when (eq_list (zb__34, [B1; B1; B1; B1; B0; B0; B0; B1; B0; B1; B0; B0])) ->
      true
    | zb__35 when (eq_list (zb__35, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      true
    | zb__36 when (eq_list (zb__36, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0; B1])) ->
      true
    | zb__37 when (eq_list (zb__37, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      true
    | zb__38 when (eq_list (zb__38, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B1; B1])) ->
      true
    | zb__39 when (eq_list (zb__39, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B1; B0; B0])) ->
      true
    | zb__40 when (eq_list (zb__40, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B1; B0; B1])) ->
      true
    | zb__41 when (eq_list (zb__41, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B1; B1; B0])) ->
      true
    | zb__42 when (eq_list (zb__42, [B0; B0; B1; B1; B0; B0; B1; B0; B0; B0; B0; B0])) ->
      true
    | zb__43 when (eq_list (zb__43, [B0; B0; B1; B1; B0; B0; B0; B0; B1; B0; B1; B0])) ->
      true
    | zb__44 when (eq_list (zb__44, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B0; B0])) ->
      true
    | zb__45 when (eq_list (zb__45, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B0; B1])) ->
      true
    | zb__46 when (eq_list (zb__46, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B1; B0])) ->
      true
    | zb__47 when (eq_list (zb__47, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B1; B1])) ->
      true
    | zb__48 when (eq_list (zb__48, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B1; B0; B0])) ->
      true
    | zb__49 when (eq_list (zb__49, [B0; B0; B1; B1; B1; B0; B1; B0; B0; B0; B0; B0])) ->
      true
    | zb__50 when (eq_list (zb__50, [B0; B0; B1; B1; B1; B0; B1; B0; B0; B0; B0; B1])) ->
      true
    | zb__51 when (eq_list (zb__51, [B0; B0; B1; B1; B1; B0; B1; B0; B0; B0; B1; B0])) ->
      true
    | zb__52 when (eq_list (zb__52, [B0; B0; B1; B1; B1; B0; B1; B0; B0; B0; B1; B1])) ->
      true
    | zb__53 when (eq_list (zb__53, [B0; B0; B1; B1; B1; B0; B1; B0; B0; B1; B0; B0])) ->
      true
    | zb__54 when (eq_list (zb__54, [B0; B0; B1; B1; B1; B0; B1; B0; B0; B1; B0; B1])) ->
      true
    | zb__55 when (eq_list (zb__55, [B0; B0; B1; B1; B1; B0; B1; B0; B0; B1; B1; B0])) ->
      true
    | zb__56 when (eq_list (zb__56, [B0; B0; B1; B1; B1; B0; B1; B0; B0; B1; B1; B1])) ->
      true
    | zb__57 when (eq_list (zb__57, [B0; B0; B1; B1; B1; B0; B1; B0; B1; B0; B0; B0])) ->
      true
    | zb__58 when (eq_list (zb__58, [B0; B0; B1; B1; B1; B0; B1; B0; B1; B0; B0; B1])) ->
      true
    | zb__59 when (eq_list (zb__59, [B0; B0; B1; B1; B1; B0; B1; B0; B1; B0; B1; B0])) ->
      true
    | zb__60 when (eq_list (zb__60, [B0; B0; B1; B1; B1; B0; B1; B0; B1; B0; B1; B1])) ->
      true
    | zb__61 when (eq_list (zb__61, [B0; B0; B1; B1; B1; B0; B1; B0; B1; B1; B0; B0])) ->
      true
    | zb__62 when (eq_list (zb__62, [B0; B0; B1; B1; B1; B0; B1; B0; B1; B1; B0; B1])) ->
      true
    | zb__63 when (eq_list (zb__63, [B0; B0; B1; B1; B1; B0; B1; B0; B1; B1; B1; B0])) ->
      true
    | zb__64 when (eq_list (zb__64, [B0; B0; B1; B1; B1; B0; B1; B0; B1; B1; B1; B1])) ->
      true
    | zb__65 when (eq_list (zb__65, [B0; B0; B1; B1; B1; B0; B1; B1; B0; B0; B0; B0])) ->
      true
    | zb__66 when (eq_list (zb__66, [B0; B0; B1; B1; B1; B0; B1; B1; B0; B0; B0; B1])) ->
      true
    | zb__67 when (eq_list (zb__67, [B0; B0; B1; B1; B1; B0; B1; B1; B0; B0; B1; B0])) ->
      true
    | zb__68 when (eq_list (zb__68, [B0; B0; B1; B1; B1; B0; B1; B1; B0; B0; B1; B1])) ->
      true
    | zb__69 when (eq_list (zb__69, [B0; B0; B1; B1; B1; B0; B1; B1; B0; B1; B0; B0])) ->
      true
    | zb__70 when (eq_list (zb__70, [B0; B0; B1; B1; B1; B0; B1; B1; B0; B1; B0; B1])) ->
      true
    | zb__71 when (eq_list (zb__71, [B0; B0; B1; B1; B1; B0; B1; B1; B0; B1; B1; B0])) ->
      true
    | zb__72 when (eq_list (zb__72, [B0; B0; B1; B1; B1; B0; B1; B1; B0; B1; B1; B1])) ->
      true
    | zb__73 when (eq_list (zb__73, [B0; B0; B1; B1; B1; B0; B1; B1; B1; B0; B0; B0])) ->
      true
    | zb__74 when (eq_list (zb__74, [B0; B0; B1; B1; B1; B0; B1; B1; B1; B0; B0; B1])) ->
      true
    | zb__75 when (eq_list (zb__75, [B0; B0; B1; B1; B1; B0; B1; B1; B1; B0; B1; B0])) ->
      true
    | zb__76 when (eq_list (zb__76, [B0; B0; B1; B1; B1; B0; B1; B1; B1; B0; B1; B1])) ->
      true
    | zb__77 when (eq_list (zb__77, [B0; B0; B1; B1; B1; B0; B1; B1; B1; B1; B0; B0])) ->
      true
    | zb__78 when (eq_list (zb__78, [B0; B0; B1; B1; B1; B0; B1; B1; B1; B1; B0; B1])) ->
      true
    | zb__79 when (eq_list (zb__79, [B0; B0; B1; B1; B1; B0; B1; B1; B1; B1; B1; B0])) ->
      true
    | zb__80 when (eq_list (zb__80, [B0; B0; B1; B1; B1; B0; B1; B1; B1; B1; B1; B1])) ->
      true
    | zb__81 when (eq_list (zb__81, [B0; B0; B1; B1; B1; B1; B0; B0; B0; B0; B0; B0])) ->
      true
    | zb__82 when (eq_list (zb__82, [B0; B0; B1; B1; B1; B1; B0; B0; B0; B0; B0; B1])) ->
      true
    | zb__83 when (eq_list (zb__83, [B0; B0; B1; B1; B1; B1; B0; B0; B0; B0; B1; B0])) ->
      true
    | zb__84 when (eq_list (zb__84, [B0; B0; B1; B1; B1; B1; B0; B0; B0; B0; B1; B1])) ->
      true
    | zb__85 when (eq_list (zb__85, [B0; B0; B1; B1; B1; B1; B0; B0; B0; B1; B0; B0])) ->
      true
    | zb__86 when (eq_list (zb__86, [B0; B0; B1; B1; B1; B1; B0; B0; B0; B1; B0; B1])) ->
      true
    | zb__87 when (eq_list (zb__87, [B0; B0; B1; B1; B1; B1; B0; B0; B0; B1; B1; B0])) ->
      true
    | zb__88 when (eq_list (zb__88, [B0; B0; B1; B1; B1; B1; B0; B0; B0; B1; B1; B1])) ->
      true
    | zb__89 when (eq_list (zb__89, [B0; B0; B1; B1; B1; B1; B0; B0; B1; B0; B0; B0])) ->
      true
    | zb__90 when (eq_list (zb__90, [B0; B0; B1; B1; B1; B1; B0; B0; B1; B0; B0; B1])) ->
      true
    | zb__91 when (eq_list (zb__91, [B0; B0; B1; B1; B1; B1; B0; B0; B1; B0; B1; B0])) ->
      true
    | zb__92 when (eq_list (zb__92, [B0; B0; B1; B1; B1; B1; B0; B0; B1; B0; B1; B1])) ->
      true
    | zb__93 when (eq_list (zb__93, [B0; B0; B1; B1; B1; B1; B0; B0; B1; B1; B0; B0])) ->
      true
    | zb__94 when (eq_list (zb__94, [B0; B0; B1; B1; B1; B1; B0; B0; B1; B1; B0; B1])) ->
      true
    | zb__95 when (eq_list (zb__95, [B0; B0; B1; B1; B1; B1; B0; B0; B1; B1; B1; B0])) ->
      true
    | zb__96 when (eq_list (zb__96, [B0; B0; B1; B1; B1; B1; B0; B0; B1; B1; B1; B1])) ->
      true
    | zb__97 when (eq_list (zb__97, [B0; B0; B1; B1; B1; B1; B0; B1; B0; B0; B0; B0])) ->
      true
    | zb__98 when (eq_list (zb__98, [B0; B0; B1; B1; B1; B1; B0; B1; B0; B0; B0; B1])) ->
      true
    | zb__99 when (eq_list (zb__99, [B0; B0; B1; B1; B1; B1; B0; B1; B0; B0; B1; B0])) ->
      true
    | zb__100 when (eq_list (zb__100, [B0; B0; B1; B1; B1; B1; B0; B1; B0; B0; B1; B1])) ->
      true
    | zb__101 when (eq_list (zb__101, [B0; B0; B1; B1; B1; B1; B0; B1; B0; B1; B0; B0])) ->
      true
    | zb__102 when (eq_list (zb__102, [B0; B0; B1; B1; B1; B1; B0; B1; B0; B1; B0; B1])) ->
      true
    | zb__103 when (eq_list (zb__103, [B0; B0; B1; B1; B1; B1; B0; B1; B0; B1; B1; B0])) ->
      true
    | zb__104 when (eq_list (zb__104, [B0; B0; B1; B1; B1; B1; B0; B1; B0; B1; B1; B1])) ->
      true
    | zb__105 when (eq_list (zb__105, [B0; B0; B1; B1; B1; B1; B0; B1; B1; B0; B0; B0])) ->
      true
    | zb__106 when (eq_list (zb__106, [B0; B0; B1; B1; B1; B1; B0; B1; B1; B0; B0; B1])) ->
      true
    | zb__107 when (eq_list (zb__107, [B0; B0; B1; B1; B1; B1; B0; B1; B1; B0; B1; B0])) ->
      true
    | zb__108 when (eq_list (zb__108, [B0; B0; B1; B1; B1; B1; B0; B1; B1; B0; B1; B1])) ->
      true
    | zb__109 when (eq_list (zb__109, [B0; B0; B1; B1; B1; B1; B0; B1; B1; B1; B0; B0])) ->
      true
    | zb__110 when (eq_list (zb__110, [B0; B0; B1; B1; B1; B1; B0; B1; B1; B1; B0; B1])) ->
      true
    | zb__111 when (eq_list (zb__111, [B0; B0; B1; B1; B1; B1; B0; B1; B1; B1; B1; B0])) ->
      true
    | zb__112 when (eq_list (zb__112, [B0; B0; B1; B1; B1; B1; B0; B1; B1; B1; B1; B1])) ->
      true
    | zb__113 when (eq_list (zb__113, [B0; B0; B1; B1; B1; B1; B1; B0; B0; B0; B0; B0])) ->
      true
    | zb__114 when (eq_list (zb__114, [B0; B0; B1; B1; B1; B1; B1; B0; B0; B0; B0; B1])) ->
      true
    | zb__115 when (eq_list (zb__115, [B0; B0; B1; B1; B1; B1; B1; B0; B0; B0; B1; B0])) ->
      true
    | zb__116 when (eq_list (zb__116, [B0; B0; B1; B1; B1; B1; B1; B0; B0; B0; B1; B1])) ->
      true
    | zb__117 when (eq_list (zb__117, [B0; B0; B1; B1; B1; B1; B1; B0; B0; B1; B0; B0])) ->
      true
    | zb__118 when (eq_list (zb__118, [B0; B0; B1; B1; B1; B1; B1; B0; B0; B1; B0; B1])) ->
      true
    | zb__119 when (eq_list (zb__119, [B0; B0; B1; B1; B1; B1; B1; B0; B0; B1; B1; B0])) ->
      true
    | zb__120 when (eq_list (zb__120, [B0; B0; B1; B1; B1; B1; B1; B0; B0; B1; B1; B1])) ->
      true
    | zb__121 when (eq_list (zb__121, [B0; B0; B1; B1; B1; B1; B1; B0; B1; B0; B0; B0])) ->
      true
    | zb__122 when (eq_list (zb__122, [B0; B0; B1; B1; B1; B1; B1; B0; B1; B0; B0; B1])) ->
      true
    | zb__123 when (eq_list (zb__123, [B0; B0; B1; B1; B1; B1; B1; B0; B1; B0; B1; B0])) ->
      true
    | zb__124 when (eq_list (zb__124, [B0; B0; B1; B1; B1; B1; B1; B0; B1; B0; B1; B1])) ->
      true
    | zb__125 when (eq_list (zb__125, [B0; B0; B1; B1; B1; B1; B1; B0; B1; B1; B0; B0])) ->
      true
    | zb__126 when (eq_list (zb__126, [B0; B0; B1; B1; B1; B1; B1; B0; B1; B1; B0; B1])) ->
      true
    | zb__127 when (eq_list (zb__127, [B0; B0; B1; B1; B1; B1; B1; B0; B1; B1; B1; B0])) ->
      true
    | zb__128 when (eq_list (zb__128, [B0; B0; B1; B1; B1; B1; B1; B0; B1; B1; B1; B1])) ->
      true
    | zb__129 when (eq_list (zb__129, [B1; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      true
    | zb__130 when (eq_list (zb__130, [B1; B0; B1; B1; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      true
    | zb__131 when (eq_list (zb__131, [B1; B0; B1; B1; B1; B0; B0; B0; B0; B0; B0; B0])) ->
      true
    | zb__132 when (eq_list (zb__132, [B1; B0; B1; B1; B1; B0; B0; B0; B0; B0; B1; B0])) ->
      true
    | zb__133 when (eq_list (zb__133, [B0; B1; B1; B1; B1; B0; B1; B0; B0; B0; B0; B0])) ->
      true
    | zb__134 when (eq_list (zb__134, [B0; B1; B1; B1; B1; B0; B1; B0; B0; B0; B0; B1])) ->
      true
    | zb__135 when (eq_list (zb__135, [B0; B1; B1; B1; B1; B0; B1; B0; B0; B0; B1; B0])) ->
      true
    | zb__136 when (eq_list (zb__136, [B0; B1; B1; B1; B1; B0; B1; B0; B0; B0; B1; B1])) ->
      true
    | zb__137 when (eq_list (zb__137, [B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B0; B0])) ->
      true
    | zb__138 when (eq_list (zb__138, [B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B0; B1])) ->
      true
    | zb__139 when (eq_list (zb__139, [B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B1; B0])) ->
      true
    | zb__140 when (eq_list (zb__140, [B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B1; B1])) ->
      true
    | zb__141 when (eq_list (zb__141, [B1; B1; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0])) ->
      true
    | zb__142 when (eq_list (zb__142, [B1; B1; B0; B0; B0; B0; B1; B0; B0; B0; B0; B1])) ->
      true
    | zb__143 when (eq_list (zb__143, [B1; B1; B0; B0; B0; B0; B1; B0; B0; B0; B1; B0])) ->
      true
    | zreg -> true
    | _ -> false
  end)

and zcsr_name_map_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | "ustatus" -> ZSome true
      | "uie" -> ZSome true
      | "utvec" -> ZSome true
      | "uscratch" -> ZSome true
      | "uepc" -> ZSome true
      | "ucause" -> ZSome true
      | "utval" -> ZSome true
      | "uip" -> ZSome true
      | "fflags" -> ZSome true
      | "frm" -> ZSome true
      | "fcsr" -> ZSome true
      | "seed" -> ZSome true
      | "cycle" -> ZSome true
      | "time" -> ZSome true
      | "instret" -> ZSome true
      | "cycleh" -> ZSome true
      | "timeh" -> ZSome true
      | "instreth" -> ZSome true
      | "sstatus" -> ZSome true
      | "sedeleg" -> ZSome true
      | "sideleg" -> ZSome true
      | "sie" -> ZSome true
      | "stvec" -> ZSome true
      | "scounteren" -> ZSome true
      | "sscratch" -> ZSome true
      | "sepc" -> ZSome true
      | "scause" -> ZSome true
      | "stval" -> ZSome true
      | "sip" -> ZSome true
      | "satp" -> ZSome true
      | "senvcfg" -> ZSome true
      | "mvendorid" -> ZSome true
      | "marchid" -> ZSome true
      | "mimpid" -> ZSome true
      | "mhartid" -> ZSome true
      | "mstatus" -> ZSome true
      | "misa" -> ZSome true
      | "medeleg" -> ZSome true
      | "mideleg" -> ZSome true
      | "mie" -> ZSome true
      | "mtvec" -> ZSome true
      | "mcounteren" -> ZSome true
      | "mcountinhibit" -> ZSome true
      | "menvcfg" -> ZSome true
      | "mscratch" -> ZSome true
      | "mepc" -> ZSome true
      | "mcause" -> ZSome true
      | "mtval" -> ZSome true
      | "mip" -> ZSome true
      | "pmpcfg0" -> ZSome true
      | "pmpcfg1" -> ZSome true
      | "pmpcfg2" -> ZSome true
      | "pmpcfg3" -> ZSome true
      | "pmpcfg4" -> ZSome true
      | "pmpcfg5" -> ZSome true
      | "pmpcfg6" -> ZSome true
      | "pmpcfg7" -> ZSome true
      | "pmpcfg8" -> ZSome true
      | "pmpcfg9" -> ZSome true
      | "pmpcfg10" -> ZSome true
      | "pmpcfg11" -> ZSome true
      | "pmpcfg12" -> ZSome true
      | "pmpcfg13" -> ZSome true
      | "pmpcfg14" -> ZSome true
      | "pmpcfg15" -> ZSome true
      | "pmpaddr0" -> ZSome true
      | "pmpaddr1" -> ZSome true
      | "pmpaddr2" -> ZSome true
      | "pmpaddr3" -> ZSome true
      | "pmpaddr4" -> ZSome true
      | "pmpaddr5" -> ZSome true
      | "pmpaddr6" -> ZSome true
      | "pmpaddr7" -> ZSome true
      | "pmpaddr8" -> ZSome true
      | "pmpaddr9" -> ZSome true
      | "pmpaddr10" -> ZSome true
      | "pmpaddr11" -> ZSome true
      | "pmpaddr12" -> ZSome true
      | "pmpaddr13" -> ZSome true
      | "pmpaddr14" -> ZSome true
      | "pmpaddr15" -> ZSome true
      | "pmpaddr16" -> ZSome true
      | "pmpaddr17" -> ZSome true
      | "pmpaddr18" -> ZSome true
      | "pmpaddr19" -> ZSome true
      | "pmpaddr20" -> ZSome true
      | "pmpaddr21" -> ZSome true
      | "pmpaddr22" -> ZSome true
      | "pmpaddr23" -> ZSome true
      | "pmpaddr24" -> ZSome true
      | "pmpaddr25" -> ZSome true
      | "pmpaddr26" -> ZSome true
      | "pmpaddr27" -> ZSome true
      | "pmpaddr28" -> ZSome true
      | "pmpaddr29" -> ZSome true
      | "pmpaddr30" -> ZSome true
      | "pmpaddr31" -> ZSome true
      | "pmpaddr32" -> ZSome true
      | "pmpaddr33" -> ZSome true
      | "pmpaddr34" -> ZSome true
      | "pmpaddr35" -> ZSome true
      | "pmpaddr36" -> ZSome true
      | "pmpaddr37" -> ZSome true
      | "pmpaddr38" -> ZSome true
      | "pmpaddr39" -> ZSome true
      | "pmpaddr40" -> ZSome true
      | "pmpaddr41" -> ZSome true
      | "pmpaddr42" -> ZSome true
      | "pmpaddr43" -> ZSome true
      | "pmpaddr44" -> ZSome true
      | "pmpaddr45" -> ZSome true
      | "pmpaddr46" -> ZSome true
      | "pmpaddr47" -> ZSome true
      | "pmpaddr48" -> ZSome true
      | "pmpaddr49" -> ZSome true
      | "pmpaddr50" -> ZSome true
      | "pmpaddr51" -> ZSome true
      | "pmpaddr52" -> ZSome true
      | "pmpaddr53" -> ZSome true
      | "pmpaddr54" -> ZSome true
      | "pmpaddr55" -> ZSome true
      | "pmpaddr56" -> ZSome true
      | "pmpaddr57" -> ZSome true
      | "pmpaddr58" -> ZSome true
      | "pmpaddr59" -> ZSome true
      | "pmpaddr60" -> ZSome true
      | "pmpaddr61" -> ZSome true
      | "pmpaddr62" -> ZSome true
      | "pmpaddr63" -> ZSome true
      | "mcycle" -> ZSome true
      | "minstret" -> ZSome true
      | "mcycleh" -> ZSome true
      | "minstreth" -> ZSome true
      | "tselect" -> ZSome true
      | "tdata1" -> ZSome true
      | "tdata2" -> ZSome true
      | "tdata3" -> ZSome true
      | "vstart" -> ZSome true
      | "vxsat" -> ZSome true
      | "vxrm" -> ZSome true
      | "vcsr" -> ZSome true
      | "vl" -> ZSome true
      | "vtype" -> ZSome true
      | "vlenb" -> ZSome true
      | zmapping0z3 when (zhex_bits_12_backwards_matches zmapping0z3) ->
        begin
          match (zhex_bits_12_backwards zmapping0z3) with
          | zreg -> ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) -> begin match zhead_expz3 with | _ -> false end
  end)

and zext_is_CSR_defined (gs6590 : ((bit) list * zPrivilege)) = sail_call (fun r ->
  match gs6590 with
  | (zb__0, zp) when (eq_list (zb__0, [B1; B0; B0; B0; B1; B1; B0; B0; B0; B0; B0; B0])) ->
    zhaveUsrMode ()
  | (zb__1, zp) when (eq_list (zb__1, [B1; B0; B0; B1; B1; B1; B0; B0; B0; B0; B0; B0])) ->
    (zhaveSupMode ()) && (((fun (x, y) -> x = y) (zp, ZMachine)) || ((fun (x, y) -> x = y) (zp, ZSupervisor)))
  | (zb__2, zp) when (eq_list (zb__2, [B1; B0; B1; B1; B1; B1; B0; B0; B0; B0; B0; B0])) ->
    ((fun (x, y) -> x = y) (zp, ZMachine)) || ((fun (x, y) -> x = y) (zp, ZSupervisor))
  | (zb__3, ZMachine) when (eq_list (zb__3, [B1; B0; B1; B1; B1; B1; B0; B0; B0; B0; B0; B1])) ->
    true
  | (zb__4, ZMachine) when (eq_list (zb__4, [B1; B0; B1; B1; B1; B1; B0; B0; B0; B0; B1; B0])) ->
    true
  | (zb__5, _) when (eq_list (zb__5, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0])) ->
    (zhaveUsrMode ()) && (zhaveNExt ())
  | (zb__6, _) when (eq_list (zb__6, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B0])) ->
    (zhaveUsrMode ()) && (zhaveNExt ())
  | (zb__7, _) when (eq_list (zb__7, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B1])) ->
    (zhaveUsrMode ()) && (zhaveNExt ())
  | (zb__8, _) when (eq_list (zb__8, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0; B0])) ->
    (zhaveUsrMode ()) && (zhaveNExt ())
  | (zb__9, _) when (eq_list (zb__9, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0; B1])) ->
    (zhaveUsrMode ()) && (zhaveNExt ())
  | (zb__10, _) when (eq_list (zb__10, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B1; B0])) ->
    (zhaveUsrMode ()) && (zhaveNExt ())
  | (zb__11, _) when (eq_list (zb__11, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B1; B1])) ->
    (zhaveUsrMode ()) && (zhaveNExt ())
  | (zb__12, _) when (eq_list (zb__12, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B1; B0; B0])) ->
    (zhaveUsrMode ()) && (zhaveNExt ())
  | (_, _) -> false)

and zext_read_CSR (gs6595 : ((bit) list)) = sail_call (fun r ->
  match gs6595 with
  | zb__0 when (eq_list (zb__0, [B1; B0; B0; B0; B1; B1; B0; B0; B0; B0; B0; B0])) ->
    ZSome (z_get_ccsr_bits !zuccsr)
  | zb__1 when (eq_list (zb__1, [B1; B0; B0; B1; B1; B1; B0; B0; B0; B0; B0; B0])) ->
    ZSome (z_get_ccsr_bits !zsccsr)
  | zb__2 when (eq_list (zb__2, [B1; B0; B1; B1; B1; B1; B0; B0; B0; B0; B0; B0])) ->
    ZSome (z_get_ccsr_bits !zmccsr)
  | zb__3 when (eq_list (zb__3, [B1; B0; B1; B1; B1; B1; B0; B0; B0; B0; B0; B1])) ->
    ZSome !zMSHWM
  | zb__4 when (eq_list (zb__4, [B1; B0; B1; B1; B1; B1; B0; B0; B0; B0; B1; B0])) ->
    ZSome !zMSHWMB
  | zb__5 when (eq_list (zb__5, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0])) ->
    ZSome ((zlower_sstatus (zlower_mstatus !zmstatus)).zbits)
  | zb__6 when (eq_list (zb__6, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B0])) ->
    ZSome ((zlower_sie ((zlower_mie (!zmie, !zmideleg)), !zsideleg)).zbits)
  | zb__7 when (eq_list (zb__7, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B1])) ->
    ZSome (zget_utvec ())
  | zb__8 when (eq_list (zb__8, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0; B0])) ->
    ZSome !zuscratch
  | zb__9 when (eq_list (zb__9, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0; B1])) ->
    ZSome (and_vec ((zget_xret_target ZUser), (zpc_alignment_mask ())))
  | zb__10 when (eq_list (zb__10, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B1; B0])) ->
    ZSome (!zucause.zbits)
  | zb__11 when (eq_list (zb__11, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B1; B1])) ->
    ZSome !zutval
  | zb__12 when (eq_list (zb__12, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B1; B0; B0])) ->
    ZSome ((zlower_sip ((zlower_mip (!zmip, !zmideleg)), !zsideleg)).zbits)
  | _ -> ZNone ())

and zext_write_CSR (gs6599 : ((bit) list * (bit) list)) = sail_call (fun r ->
  match gs6599 with
  | (zb__0, zvalue) when (eq_list (zb__0, [B1; B0; B0; B0; B1; B1; B0; B0; B0; B0; B0; B0])) ->
    begin
      (zuccsr := (zlegalizze_ccsr (!zuccsr, zvalue)));
      ZSome (z_get_ccsr_bits !zuccsr)
    end
  | (zb__1, zvalue) when (eq_list (zb__1, [B1; B0; B0; B1; B1; B1; B0; B0; B0; B0; B0; B0])) ->
    begin
      (zsccsr := (zlegalizze_ccsr (!zsccsr, zvalue)));
      ZSome (z_get_ccsr_bits !zsccsr)
    end
  | (zb__2, zvalue) when (eq_list (zb__2, [B1; B0; B1; B1; B1; B1; B0; B0; B0; B0; B0; B0])) ->
    begin
      (zmccsr := (zlegalizze_ccsr (!zmccsr, zvalue)));
      ZSome (z_get_ccsr_bits !zmccsr)
    end
  | (zb__3, zvalue) when (eq_list (zb__3, [B1; B0; B1; B1; B1; B1; B0; B0; B0; B0; B0; B1])) ->
    begin (zMSHWM := (zlegalizze_mshwm zvalue)); ZSome !zMSHWM end
  | (zb__4, zvalue) when (eq_list (zb__4, [B1; B0; B1; B1; B1; B1; B0; B0; B0; B0; B1; B0])) ->
    begin (zMSHWMB := (zlegalizze_mshwm zvalue)); ZSome !zMSHWMB end
  | (zb__5, zvalue) when (eq_list (zb__5, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0])) ->
    begin
      (zmstatus := (zlegalizze_ustatus (!zmstatus, zvalue)));
      ZSome (!zmstatus.zbits)
    end
  | (zb__6, zvalue) when (eq_list (zb__6, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B0])) ->
    let zsie = (zlegalizze_uie ((zlower_mie (!zmie, !zmideleg)), !zsideleg, zvalue)) in
    begin
      (zmie := (zlift_sie (!zmie, !zmideleg, zsie)));
      ZSome (!zmie.zbits)
    end
  | (zb__7, zvalue) when (eq_list (zb__7, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B1])) ->
    ZSome (zset_utvec zvalue)
  | (zb__8, zvalue) when (eq_list (zb__8, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0; B0])) ->
    begin (zuscratch := zvalue); ZSome !zuscratch end
  | (zb__9, zvalue) when (eq_list (zb__9, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0; B1])) ->
    ZSome (zset_xret_target (ZUser, zvalue))
  | (zb__10, zvalue) when (eq_list (zb__10, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B1; B0])) ->
    begin
      (zucause := ({!zucause with ZMcause.zbits = zvalue}));
      ZSome (!zucause.zbits)
    end
  | (zb__11, zvalue) when (eq_list (zb__11, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B1; B1])) ->
    begin (zutval := zvalue); ZSome !zutval end
  | (zb__12, zvalue) when (eq_list (zb__12, [B0; B0; B0; B0; B0; B1; B0; B0; B0; B1; B0; B0])) ->
    let zsip = (zlegalizze_uip ((zlower_mip (!zmip, !zmideleg)), !zsideleg, zvalue)) in
    begin
      (zmip := (zlift_sip (!zmip, !zmideleg, zsip)));
      ZSome (!zmip.zbits)
    end
  | (_, _) -> ZNone ())

and zcsrAccess (zcsr : ((bit) list)) : (bit) list = sail_call (fun r ->
  subrange (zcsr, (Big_int.of_int (11)), (Big_int.of_int (10))))

and zcsrPriv (zcsr : ((bit) list)) : (bit) list = sail_call (fun r ->
  subrange (zcsr, (Big_int.of_int (9)), (Big_int.of_int (8))))

and zis_CSR_defined ((zcsr, zp) : ((bit) list * zPrivilege)) : bool = sail_call (fun r ->
  begin
    match zcsr with
    | zb__0 when (eq_list (zb__0, [B1; B1; B1; B1; B0; B0; B0; B1; B0; B0; B0; B1])) ->
      (fun (x, y) -> x = y) (zp, ZMachine)
    | zb__1 when (eq_list (zb__1, [B1; B1; B1; B1; B0; B0; B0; B1; B0; B0; B1; B0])) ->
      (fun (x, y) -> x = y) (zp, ZMachine)
    | zb__2 when (eq_list (zb__2, [B1; B1; B1; B1; B0; B0; B0; B1; B0; B0; B1; B1])) ->
      (fun (x, y) -> x = y) (zp, ZMachine)
    | zb__3 when (eq_list (zb__3, [B1; B1; B1; B1; B0; B0; B0; B1; B0; B1; B0; B0])) ->
      (fun (x, y) -> x = y) (zp, ZMachine)
    | zb__4 when (eq_list (zb__4, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      (fun (x, y) -> x = y) (zp, ZMachine)
    | zb__5 when (eq_list (zb__5, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0; B1])) ->
      (fun (x, y) -> x = y) (zp, ZMachine)
    | zb__6 when (eq_list (zb__6, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      ((fun (x, y) -> x = y) (zp, ZMachine)) && ((zhaveSupMode ()) || (zhaveNExt ()))
    | zb__7 when (eq_list (zb__7, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B1; B1])) ->
      ((fun (x, y) -> x = y) (zp, ZMachine)) && ((zhaveSupMode ()) || (zhaveNExt ()))
    | zb__8 when (eq_list (zb__8, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B1; B0; B0])) ->
      (fun (x, y) -> x = y) (zp, ZMachine)
    | zb__9 when (eq_list (zb__9, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B1; B0; B1])) ->
      (fun (x, y) -> x = y) (zp, ZMachine)
    | zb__10 when (eq_list (zb__10, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B1; B1; B0])) ->
      ((fun (x, y) -> x = y) (zp, ZMachine)) && (zhaveUsrMode ())
    | zb__11 when (eq_list (zb__11, [B0; B0; B1; B1; B0; B0; B0; B0; B1; B0; B1; B0])) ->
      ((fun (x, y) -> x = y) (zp, ZMachine)) && (zhaveUsrMode ())
    | zb__12 when (eq_list (zb__12, [B0; B0; B1; B1; B0; B0; B0; B1; B0; B0; B0; B0])) ->
      ((fun (x, y) -> x = y) (zp, ZMachine)) && (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32))))
    | zb__13 when (eq_list (zb__13, [B0; B0; B1; B1; B0; B0; B0; B1; B1; B0; B1; B0])) ->
      ((fun (x, y) -> x = y) (zp, ZMachine)) && ((zhaveUsrMode ()) && (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))))
    | zb__14 when (eq_list (zb__14, [B0; B0; B1; B1; B0; B0; B1; B0; B0; B0; B0; B0])) ->
      (fun (x, y) -> x = y) (zp, ZMachine)
    | zb__15 when (eq_list (zb__15, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B0; B0])) ->
      (fun (x, y) -> x = y) (zp, ZMachine)
    | zb__16 when (eq_list (zb__16, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B0; B1])) ->
      (fun (x, y) -> x = y) (zp, ZMachine)
    | zb__17 when (eq_list (zb__17, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B1; B0])) ->
      (fun (x, y) -> x = y) (zp, ZMachine)
    | zb__18 when (eq_list (zb__18, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B1; B1])) ->
      (fun (x, y) -> x = y) (zp, ZMachine)
    | zb__19 when (eq_list (zb__19, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B1; B0; B0])) ->
      (fun (x, y) -> x = y) (zp, ZMachine)
    | zv__16 when (eq_list ((subrange (zv__16, (Big_int.of_int (11)), (Big_int.of_int (4)))), [B0; B0; B1; B1; B1; B0; B1; B0])) ->
      let zidx = (subrange (zv__16, (Big_int.of_int (3)), Big_int.zero)) in
      ((fun (x, y) -> x = y) (zp, ZMachine)) && ((gt ((Platform.pmp_count ()), (uint zidx))) && ((eq_bit ((access (zidx, Big_int.zero)), B0)) || (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32))))))
    | zv__18 when (eq_list ((subrange (zv__18, (Big_int.of_int (11)), (Big_int.of_int (4)))), [B0; B0; B1; B1; B1; B0; B1; B1])) ->
      let zidx = (subrange (zv__18, (Big_int.of_int (3)), Big_int.zero)) in
      ((fun (x, y) -> x = y) (zp, ZMachine)) && (gt ((Platform.pmp_count ()), (uint (append ([B0; B0], zidx)))))
    | zv__20 when (eq_list ((subrange (zv__20, (Big_int.of_int (11)), (Big_int.of_int (4)))), [B0; B0; B1; B1; B1; B1; B0; B0])) ->
      let zidx = (subrange (zv__20, (Big_int.of_int (3)), Big_int.zero)) in
      ((fun (x, y) -> x = y) (zp, ZMachine)) && (gt ((Platform.pmp_count ()), (uint (append ([B0; B1], zidx)))))
    | zv__22 when (eq_list ((subrange (zv__22, (Big_int.of_int (11)), (Big_int.of_int (4)))), [B0; B0; B1; B1; B1; B1; B0; B1])) ->
      let zidx = (subrange (zv__22, (Big_int.of_int (3)), Big_int.zero)) in
      ((fun (x, y) -> x = y) (zp, ZMachine)) && (gt ((Platform.pmp_count ()), (uint (append ([B1; B0], zidx)))))
    | zv__24 when (eq_list ((subrange (zv__24, (Big_int.of_int (11)), (Big_int.of_int (4)))), [B0; B0; B1; B1; B1; B1; B1; B0])) ->
      let zidx = (subrange (zv__24, (Big_int.of_int (3)), Big_int.zero)) in
      ((fun (x, y) -> x = y) (zp, ZMachine)) && (gt ((Platform.pmp_count ()), (uint (append ([B1; B1], zidx)))))
    | zb__20 when (eq_list (zb__20, [B1; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      (fun (x, y) -> x = y) (zp, ZMachine)
    | zb__21 when (eq_list (zb__21, [B1; B0; B1; B1; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      (fun (x, y) -> x = y) (zp, ZMachine)
    | zb__22 when (eq_list (zb__22, [B1; B0; B1; B1; B1; B0; B0; B0; B0; B0; B0; B0])) ->
      ((fun (x, y) -> x = y) (zp, ZMachine)) && (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32))))
    | zb__23 when (eq_list (zb__23, [B1; B0; B1; B1; B1; B0; B0; B0; B0; B0; B1; B0])) ->
      ((fun (x, y) -> x = y) (zp, ZMachine)) && (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32))))
    | zb__24 when (eq_list (zb__24, [B0; B1; B1; B1; B1; B0; B1; B0; B0; B0; B0; B0])) ->
      (fun (x, y) -> x = y) (zp, ZMachine)
    | zb__25 when (eq_list (zb__25, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      (zhaveSupMode ()) && (((fun (x, y) -> x = y) (zp, ZMachine)) || ((fun (x, y) -> x = y) (zp, ZSupervisor)))
    | zb__26 when (eq_list (zb__26, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      (zhaveSupMode ()) && ((zhaveNExt ()) && (((fun (x, y) -> x = y) (zp, ZMachine)) || ((fun (x, y) -> x = y) (zp, ZSupervisor))))
    | zb__27 when (eq_list (zb__27, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B1; B1])) ->
      (zhaveSupMode ()) && ((zhaveNExt ()) && (((fun (x, y) -> x = y) (zp, ZMachine)) || ((fun (x, y) -> x = y) (zp, ZSupervisor))))
    | zb__28 when (eq_list (zb__28, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B1; B0; B0])) ->
      (zhaveSupMode ()) && (((fun (x, y) -> x = y) (zp, ZMachine)) || ((fun (x, y) -> x = y) (zp, ZSupervisor)))
    | zb__29 when (eq_list (zb__29, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B1; B0; B1])) ->
      (zhaveSupMode ()) && (((fun (x, y) -> x = y) (zp, ZMachine)) || ((fun (x, y) -> x = y) (zp, ZSupervisor)))
    | zb__30 when (eq_list (zb__30, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B1; B1; B0])) ->
      (zhaveSupMode ()) && (((fun (x, y) -> x = y) (zp, ZMachine)) || ((fun (x, y) -> x = y) (zp, ZSupervisor)))
    | zb__31 when (eq_list (zb__31, [B0; B0; B0; B1; B0; B0; B0; B0; B1; B0; B1; B0])) ->
      (zhaveSupMode ()) && (((fun (x, y) -> x = y) (zp, ZMachine)) || ((fun (x, y) -> x = y) (zp, ZSupervisor)))
    | zb__32 when (eq_list (zb__32, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B0; B0])) ->
      (zhaveSupMode ()) && (((fun (x, y) -> x = y) (zp, ZMachine)) || ((fun (x, y) -> x = y) (zp, ZSupervisor)))
    | zb__33 when (eq_list (zb__33, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B0; B1])) ->
      (zhaveSupMode ()) && (((fun (x, y) -> x = y) (zp, ZMachine)) || ((fun (x, y) -> x = y) (zp, ZSupervisor)))
    | zb__34 when (eq_list (zb__34, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B1; B0])) ->
      (zhaveSupMode ()) && (((fun (x, y) -> x = y) (zp, ZMachine)) || ((fun (x, y) -> x = y) (zp, ZSupervisor)))
    | zb__35 when (eq_list (zb__35, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B1; B1])) ->
      (zhaveSupMode ()) && (((fun (x, y) -> x = y) (zp, ZMachine)) || ((fun (x, y) -> x = y) (zp, ZSupervisor)))
    | zb__36 when (eq_list (zb__36, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B1; B0; B0])) ->
      (zhaveSupMode ()) && (((fun (x, y) -> x = y) (zp, ZMachine)) || ((fun (x, y) -> x = y) (zp, ZSupervisor)))
    | zb__37 when (eq_list (zb__37, [B0; B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0])) ->
      (zhaveSupMode ()) && (((fun (x, y) -> x = y) (zp, ZMachine)) || ((fun (x, y) -> x = y) (zp, ZSupervisor)))
    | zb__38 when (eq_list (zb__38, [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      zhaveUsrMode ()
    | zb__39 when (eq_list (zb__39, [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1])) ->
      zhaveUsrMode ()
    | zb__40 when (eq_list (zb__40, [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      zhaveUsrMode ()
    | zb__41 when (eq_list (zb__41, [B1; B1; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0])) ->
      (zhaveUsrMode ()) && (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32))))
    | zb__42 when (eq_list (zb__42, [B1; B1; B0; B0; B1; B0; B0; B0; B0; B0; B0; B1])) ->
      (zhaveUsrMode ()) && (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32))))
    | zb__43 when (eq_list (zb__43, [B1; B1; B0; B0; B1; B0; B0; B0; B0; B0; B1; B0])) ->
      (zhaveUsrMode ()) && (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32))))
    | zb__44 when (eq_list (zb__44, [B0; B0; B0; B0; B0; B0; B0; B1; B0; B1; B0; B1])) ->
      zhaveZkr ()
    | _ -> zext_is_CSR_defined (zcsr, zp)
  end)

and zcheck_CSR_access ((zcsrrw, zcsrpr, zp, zisWrite) : ((bit) list * (bit) list * zPrivilege * bool)) : bool = sail_call (fun r ->
  (znot ((eq_bool (zisWrite, true)) && (eq_list (zcsrrw, [B1; B1])))) && (zz8operatorz0zKzJ_uz9 ((zprivLevel_to_bits zp), zcsrpr)))

and zcheck_TVM_SATP ((zcsr, zp) : ((bit) list * zPrivilege)) : bool = sail_call (fun r ->
  znot ((eq_list (zcsr, [B0; B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0])) && (((fun (x, y) -> x = y) (zp, ZSupervisor)) && (eq_list ((z_get_Mstatus_TVM !zmstatus), [B1])))))

and zcheck_Counteren ((zcsr, zp) : ((bit) list * zPrivilege)) : bool = sail_call (fun r ->
  begin
    match ((fun (v0, v1) -> (v1, v0)) (zp, zcsr)) with
    | (zb__0, ZSupervisor) when (eq_list (zb__0, [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      eq_list ((z_get_Counteren_CY !zmcounteren), [B1])
    | (zb__1, ZSupervisor) when (eq_list (zb__1, [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1])) ->
      eq_list ((z_get_Counteren_TM !zmcounteren), [B1])
    | (zb__2, ZSupervisor) when (eq_list (zb__2, [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      eq_list ((z_get_Counteren_IR !zmcounteren), [B1])
    | (zb__3, ZUser) when (eq_list (zb__3, [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      (eq_list ((z_get_Counteren_CY !zmcounteren), [B1])) && ((znot (zhaveSupMode ())) || (eq_list ((z_get_Counteren_CY !zscounteren), [B1])))
    | (zb__4, ZUser) when (eq_list (zb__4, [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1])) ->
      (eq_list ((z_get_Counteren_TM !zmcounteren), [B1])) && ((znot (zhaveSupMode ())) || (eq_list ((z_get_Counteren_TM !zscounteren), [B1])))
    | (zb__5, ZUser) when (eq_list (zb__5, [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      (eq_list ((z_get_Counteren_IR !zmcounteren), [B1])) && ((znot (zhaveSupMode ())) || (eq_list ((z_get_Counteren_IR !zscounteren), [B1])))
    | (_, _) ->
      (if ((zz8operatorz0zIzJ_uz9 ([B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B1; B1], zcsr)) && (zz8operatorz0zIzJ_uz9 (zcsr, [B1; B1; B0; B0; B0; B0; B0; B1; B1; B1; B1; B1]))) then false else true)
  end)

and zcheck_seed_CSR ((zcsr, zp, zisWrite) : ((bit) list * zPrivilege * bool)) : bool = sail_call (fun r ->
  (if (znot (eq_list (zcsr, [B0; B0; B0; B0; B0; B0; B0; B1; B0; B1; B0; B1]))) then (true) else ((if (znot zisWrite) then (false) else (begin
    match zp with
    | ZMachine -> true
    | ZSupervisor -> false
    | ZUser -> false
  end)))))

and zcheck_CSR ((zcsr, zp, zisWrite) : ((bit) list * zPrivilege * bool)) : bool = sail_call (fun r ->
  (zis_CSR_defined (zcsr, zp)) && ((zcheck_CSR_access ((zcsrAccess zcsr), (zcsrPriv zcsr), zp, zisWrite)) && ((zcheck_TVM_SATP (zcsr, zp)) && ((zcheck_Counteren (zcsr, zp)) && (zcheck_seed_CSR (zcsr, zp, zisWrite))))))

and zexception_delegatee ((ze, zp) : (zExceptionType * zPrivilege)) : zPrivilege = sail_call (fun r ->
  let zidx = (znum_of_ExceptionType ze) in
  let zsuper = (zbit_to_bool (access ((!zmedeleg.zbits), zidx))) in
  let zuser = ((if (zhaveSupMode ()) then (zsuper && ((zhaveNExt ()) && (zbit_to_bool (access ((!zsedeleg.zbits), zidx))))) else (zsuper && (zhaveNExt ())))) in
  let zdeleg = ((if ((zhaveUsrMode ()) && zuser) then ZUser else ((if ((zhaveSupMode ()) && zsuper) then ZSupervisor else ZMachine)))) in
  (if (zz8operatorz0zI_uz9 ((zprivLevel_to_bits zdeleg), (zprivLevel_to_bits zp))) then zp else zdeleg))

and zfindPendingInterrupt (zip : ((bit) list)) : (zInterruptType) zoption = sail_call (fun r ->
  let zip = (zMk_Minterrupts zip) in
  (if (eq_list ((z_get_Minterrupts_MEI zip), [B1])) then (ZSome ZI_M_External) else ((if (eq_list ((z_get_Minterrupts_MSI zip), [B1])) then (ZSome ZI_M_Software) else ((if (eq_list ((z_get_Minterrupts_MTI zip), [B1])) then (ZSome ZI_M_Timer) else ((if (eq_list ((z_get_Minterrupts_SEI zip), [B1])) then (ZSome ZI_S_External) else ((if (eq_list ((z_get_Minterrupts_SSI zip), [B1])) then (ZSome ZI_S_Software) else ((if (eq_list ((z_get_Minterrupts_STI zip), [B1])) then (ZSome ZI_S_Timer) else ((if (eq_list ((z_get_Minterrupts_UEI zip), [B1])) then (ZSome ZI_U_External) else ((if (eq_list ((z_get_Minterrupts_USI zip), [B1])) then (ZSome ZI_U_Software) else ((if (eq_list ((z_get_Minterrupts_UTI zip), [B1])) then (ZSome ZI_U_Timer) else (ZNone ())))))))))))))))))))

type  zinterrupt_set =
  | ZInts_Pending of zxlenbits
  | ZInts_Delegated of zxlenbits
  | ZInts_Empty of unit;;

let string_of_zinterrupt_set _ = "VARIANT";;

let rec zprocessPending ((zxip, zxie, zxideleg, zpriv_enabled) : (ZMinterrupts.zMinterrupts * ZMinterrupts.zMinterrupts * (bit) list * bool)) : zinterrupt_set = sail_call (fun r ->
  let zeffective_pend = (and_vec ((zxip.zbits), (and_vec ((zxie.zbits), (not_vec zxideleg))))) in
  let zeffective_delg = (and_vec ((zxip.zbits), zxideleg)) in
  (if (zpriv_enabled && (zneq_bits (zeffective_pend, (zzzero_extend ((Big_int.of_int (32)), [B0]))))) then (ZInts_Pending zeffective_pend) else ((if (zneq_bits (zeffective_delg, (zzzero_extend ((Big_int.of_int (32)), [B0])))) then (ZInts_Delegated zeffective_delg) else (ZInts_Empty ())))))

and zgetPendingSet (zpriv : (zPrivilege)) : (((bit) list * zPrivilege)) zoption = sail_call (fun r ->
  begin
    assert (zhaveUsrMode ());
    let zeffective_pending = (and_vec ((!zmip.zbits), (!zmie.zbits))) in
    (if (eq_list (zeffective_pending, (zzzero_extend ((Big_int.of_int (32)), [B0])))) then (ZNone ()) else (let zmIE = ((zneq_anything (zpriv, ZMachine)) || (((fun (x, y) -> x = y) (zpriv, ZMachine)) && (eq_list ((z_get_Mstatus_MIE !zmstatus), [B1])))) in
    let zsIE = ((zhaveSupMode ()) && (((fun (x, y) -> x = y) (zpriv, ZUser)) || (((fun (x, y) -> x = y) (zpriv, ZSupervisor)) && (eq_list ((z_get_Mstatus_SIE !zmstatus), [B1]))))) in
    let zuIE = ((zhaveNExt ()) && (((fun (x, y) -> x = y) (zpriv, ZUser)) && (eq_list ((z_get_Mstatus_UIE !zmstatus), [B1])))) in
    begin
      match (zprocessPending (!zmip, !zmie, (!zmideleg.zbits), zmIE)) with
      | ZInts_Empty (()) -> ZNone ()
      | ZInts_Pending (zp) ->
        let zr = ((fun (v0, v1) -> (v1, v0)) (ZMachine, zp)) in ZSome zr
      | ZInts_Delegated (zd) ->
        (if (znot (zhaveSupMode ())) then ((if zuIE then (let zr = ((fun (v0, v1) -> (v1, v0)) (ZUser, zd)) in
        ZSome zr) else (ZNone ()))) else (begin
          match (zprocessPending ((zMk_Minterrupts zd), !zmie, (!zsideleg.zbits), zsIE)) with
          | ZInts_Empty (()) -> ZNone ()
          | ZInts_Pending (zp) ->
            let zr = ((fun (v0, v1) -> (v1, v0)) (ZSupervisor, zp)) in ZSome zr
          | ZInts_Delegated (zd) ->
            (if zuIE then (let zr = ((fun (v0, v1) -> (v1, v0)) (ZUser, zd)) in
            ZSome zr) else (ZNone ()))
        end))
    end))
  end)

and zdispatchInterrupt (zpriv : (zPrivilege)) : ((zInterruptType * zPrivilege)) zoption = sail_call (fun r ->
  (if ((znot (zhaveUsrMode ())) || ((znot (zhaveSupMode ())) && (znot (zhaveNExt ())))) then (begin
    assert ((fun (x, y) -> x = y) (zpriv, ZMachine));
    (if (eq_list ((z_get_Mstatus_MIE !zmstatus), [B1])) then (let zenabled_pending = (and_vec ((!zmip.zbits), (!zmie.zbits))) in
    begin
      match (zfindPendingInterrupt zenabled_pending) with
      | ZSome (zi) ->
        let zr = ((fun (v0, v1) -> (v1, v0)) (ZMachine, zi)) in ZSome zr
      | ZNone (()) -> ZNone ()
    end) else (ZNone ()))
  end) else (begin
    match (zgetPendingSet zpriv) with
    | ZNone (()) -> ZNone ()
    | ZSome ((zip, zp)) ->
      begin
        match (zfindPendingInterrupt zip) with
        | ZNone (()) -> ZNone ()
        | ZSome (zi) ->
          let zr = ((fun (v0, v1) -> (v1, v0)) (zp, zi)) in ZSome zr
      end
  end)))

type  zctl_result =
  | ZCTL_TRAP of Zsync_exception.zsync_exception
  | ZCTL_SRET of unit
  | ZCTL_MRET of unit
  | ZCTL_URET of unit;;

let string_of_zctl_result _ = "VARIANT";;

let rec ztval (zexcinfo : (((bit) list) zoption)) : (bit) list = sail_call (fun r ->
  begin
    match zexcinfo with
    | ZSome (ze) -> ze
    | ZNone (()) -> zzzero_extend ((Big_int.of_int (32)), [B0])
  end)

and zrvfi_trap (() : (unit)) : unit = sail_call (fun r -> ())

and ztrap_handler ((zdel_priv, zintr, zc, zpc, zinfo, zext) : (zPrivilege * bool * (bit) list * (bit) list * ((bit) list) zoption * (unit) zoption)) : (bit) list = sail_call (fun r ->
  begin
    zrvfi_trap ();
    (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("handling ", (concat_str (((if zintr then "int#" else "exc#")), (concat_str ((string_of_bits zc), (concat_str (" at priv ", (concat_str ((zprivLevel_to_str zdel_priv), (concat_str (" with tval ", (string_of_bits (ztval zinfo))))))))))))))) else ());
    Platform.cancel_reservation ();
    begin
      match zdel_priv with
      | ZMachine ->
        begin
          (zmcause := ({!zmcause with ZMcause.zbits = update_subrange ((!zmcause.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (zbool_to_bits zintr))}));
          (zmcause := ({!zmcause with ZMcause.zbits = update_subrange ((!zmcause.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (2)))), Big_int.zero, (zzzero_extend ((Big_int.of_int (31)), zc)))}));
          (zmstatus := ({!zmstatus with ZMstatus.zbits = update_subrange ((!zmstatus.zbits), (Big_int.of_int (7)), (Big_int.of_int (7)), (z_get_Mstatus_MIE !zmstatus))}));
          (zmstatus := ({!zmstatus with ZMstatus.zbits = update_subrange ((!zmstatus.zbits), (Big_int.of_int (3)), (Big_int.of_int (3)), [B0])}));
          (zmstatus := ({!zmstatus with ZMstatus.zbits = update_subrange ((!zmstatus.zbits), (Big_int.of_int (12)), (Big_int.of_int (11)), (zprivLevel_to_bits !zcur_privilege))}));
          (zmtval := (ztval zinfo));
          (zmepc := zpc);
          (zcur_privilege := zdel_priv);
          zhandle_trap_extension (zdel_priv, zpc, zext);
          (if (Platform.get_config_print_reg ()) then (Platform.print_reg (concat_str ("CSR mstatus <- ", (string_of_bits (!zmstatus.zbits))))) else ());
          zprepare_trap_vector (zdel_priv, !zmcause)
        end
      | ZSupervisor ->
        begin
          assert (zhaveSupMode ());
          (zscause := ({!zscause with ZMcause.zbits = update_subrange ((!zscause.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (zbool_to_bits zintr))}));
          (zscause := ({!zscause with ZMcause.zbits = update_subrange ((!zscause.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (2)))), Big_int.zero, (zzzero_extend ((Big_int.of_int (31)), zc)))}));
          (zmstatus := ({!zmstatus with ZMstatus.zbits = update_subrange ((!zmstatus.zbits), (Big_int.of_int (5)), (Big_int.of_int (5)), (z_get_Mstatus_SIE !zmstatus))}));
          (zmstatus := ({!zmstatus with ZMstatus.zbits = update_subrange ((!zmstatus.zbits), (Big_int.of_int (1)), (Big_int.of_int (1)), [B0])}));
          (zmstatus := ({!zmstatus with ZMstatus.zbits = update_subrange ((!zmstatus.zbits), (Big_int.of_int (8)), (Big_int.of_int (8)), (begin
            match !zcur_privilege with
            | ZUser -> [B0]
            | ZSupervisor -> [B1]
            | ZMachine ->
              zinternal_error ("sail-riscv/model/riscv_sys_control.sail", (Big_int.of_int (362)), "invalid privilege for s-mode trap")
          end))}));
          (zstval := (ztval zinfo));
          (zsepc := zpc);
          (zcur_privilege := zdel_priv);
          zhandle_trap_extension (zdel_priv, zpc, zext);
          (if (Platform.get_config_print_reg ()) then (Platform.print_reg (concat_str ("CSR mstatus <- ", (string_of_bits (!zmstatus.zbits))))) else ());
          zprepare_trap_vector (zdel_priv, !zscause)
        end
      | ZUser ->
        begin
          assert (zhaveUsrMode ());
          (zucause := ({!zucause with ZMcause.zbits = update_subrange ((!zucause.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (zbool_to_bits zintr))}));
          (zucause := ({!zucause with ZMcause.zbits = update_subrange ((!zucause.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (2)))), Big_int.zero, (zzzero_extend ((Big_int.of_int (31)), zc)))}));
          (zmstatus := ({!zmstatus with ZMstatus.zbits = update_subrange ((!zmstatus.zbits), (Big_int.of_int (4)), (Big_int.of_int (4)), (z_get_Mstatus_UIE !zmstatus))}));
          (zmstatus := ({!zmstatus with ZMstatus.zbits = update_subrange ((!zmstatus.zbits), Big_int.zero, Big_int.zero, [B0])}));
          (zutval := (ztval zinfo));
          (zuepc := zpc);
          (zcur_privilege := zdel_priv);
          zhandle_trap_extension (zdel_priv, zpc, zext);
          (if (Platform.get_config_print_reg ()) then (Platform.print_reg (concat_str ("CSR mstatus <- ", (string_of_bits (!zmstatus.zbits))))) else ());
          zprepare_trap_vector (zdel_priv, !zucause)
        end
    end
  end)

and zexception_handler ((zcur_priv, zctl, zpc) : (zPrivilege * zctl_result * (bit) list)) : (bit) list = sail_call (fun r ->
  begin
    match ((fun (v0, v1) -> (v1, v0)) (zctl, zcur_priv)) with
    | (_, ZCTL_TRAP (ze)) ->
      let zdel_priv = (zexception_delegatee ((ze.ztrap), zcur_priv)) in
      begin
        (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("trapping from ", (concat_str ((zprivLevel_to_str zcur_priv), (concat_str (" to ", (concat_str ((zprivLevel_to_str zdel_priv), (concat_str (" to handle ", (zexceptionType_to_str (ze.ztrap))))))))))))) else ());
        ztrap_handler (zdel_priv, false, (zexceptionType_to_bits (ze.ztrap)), zpc, (ze.zexcinfo), (ze.zext))
      end
    | (_, ZCTL_MRET (())) ->
      let zprev_priv = !zcur_privilege in
      begin
        (zmstatus := ({!zmstatus with ZMstatus.zbits = update_subrange ((!zmstatus.zbits), (Big_int.of_int (3)), (Big_int.of_int (3)), (z_get_Mstatus_MPIE !zmstatus))}));
        (zmstatus := ({!zmstatus with ZMstatus.zbits = update_subrange ((!zmstatus.zbits), (Big_int.of_int (7)), (Big_int.of_int (7)), [B1])}));
        (zcur_privilege := (zprivLevel_of_bits (z_get_Mstatus_MPP !zmstatus)));
        (zmstatus := ({!zmstatus with ZMstatus.zbits = update_subrange ((!zmstatus.zbits), (Big_int.of_int (12)), (Big_int.of_int (11)), (zprivLevel_to_bits ((if (zhaveUsrMode ()) then ZUser else ZMachine))))}));
        (if (zneq_anything (!zcur_privilege, ZMachine)) then ((zmstatus := ({!zmstatus with ZMstatus.zbits = update_subrange ((!zmstatus.zbits), (Big_int.of_int (17)), (Big_int.of_int (17)), [B0])}))) else ());
        (if (Platform.get_config_print_reg ()) then (Platform.print_reg (concat_str ("CSR mstatus <- ", (string_of_bits (!zmstatus.zbits))))) else ());
        (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("ret-ing from ", (concat_str ((zprivLevel_to_str zprev_priv), (concat_str (" to ", (zprivLevel_to_str !zcur_privilege)))))))) else ());
        Platform.cancel_reservation ();
        and_vec ((zprepare_xret_target ZMachine), (zpc_alignment_mask ()))
      end
    | (_, ZCTL_SRET (())) ->
      let zprev_priv = !zcur_privilege in
      begin
        (zmstatus := ({!zmstatus with ZMstatus.zbits = update_subrange ((!zmstatus.zbits), (Big_int.of_int (1)), (Big_int.of_int (1)), (z_get_Mstatus_SPIE !zmstatus))}));
        (zmstatus := ({!zmstatus with ZMstatus.zbits = update_subrange ((!zmstatus.zbits), (Big_int.of_int (5)), (Big_int.of_int (5)), [B1])}));
        (zcur_privilege := ((if (eq_list ((z_get_Mstatus_SPP !zmstatus), [B1])) then ZSupervisor else ZUser)));
        (zmstatus := ({!zmstatus with ZMstatus.zbits = update_subrange ((!zmstatus.zbits), (Big_int.of_int (8)), (Big_int.of_int (8)), [B0])}));
        (if (zneq_anything (!zcur_privilege, ZMachine)) then ((zmstatus := ({!zmstatus with ZMstatus.zbits = update_subrange ((!zmstatus.zbits), (Big_int.of_int (17)), (Big_int.of_int (17)), [B0])}))) else ());
        (if (Platform.get_config_print_reg ()) then (Platform.print_reg (concat_str ("CSR mstatus <- ", (string_of_bits (!zmstatus.zbits))))) else ());
        (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("ret-ing from ", (concat_str ((zprivLevel_to_str zprev_priv), (concat_str (" to ", (zprivLevel_to_str !zcur_privilege)))))))) else ());
        Platform.cancel_reservation ();
        and_vec ((zprepare_xret_target ZSupervisor), (zpc_alignment_mask ()))
      end
    | (_, ZCTL_URET (())) ->
      let zprev_priv = !zcur_privilege in
      begin
        (zmstatus := ({!zmstatus with ZMstatus.zbits = update_subrange ((!zmstatus.zbits), Big_int.zero, Big_int.zero, (z_get_Mstatus_UPIE !zmstatus))}));
        (zmstatus := ({!zmstatus with ZMstatus.zbits = update_subrange ((!zmstatus.zbits), (Big_int.of_int (4)), (Big_int.of_int (4)), [B1])}));
        (zcur_privilege := ZUser);
        (if (Platform.get_config_print_reg ()) then (Platform.print_reg (concat_str ("CSR mstatus <- ", (string_of_bits (!zmstatus.zbits))))) else ());
        (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("ret-ing from ", (concat_str ((zprivLevel_to_str zprev_priv), (concat_str (" to ", (zprivLevel_to_str !zcur_privilege)))))))) else ());
        Platform.cancel_reservation ();
        and_vec ((zprepare_xret_target ZUser), (zpc_alignment_mask ()))
      end
  end)

and zhandle_mem_exception ((zaddr, ze) : ((bit) list * zExceptionType)) : unit = sail_call (fun r ->
  let zt = ({Zsync_exception.ztrap = ze;
  Zsync_exception.zexcinfo = ZSome zaddr;
  Zsync_exception.zext = ZNone ()}) in
  zset_next_pc (zexception_handler (!zcur_privilege, (ZCTL_TRAP zt), !zPC)))

and zhandle_exception (ze : (zExceptionType)) : unit = sail_call (fun r ->
  let zt = ({Zsync_exception.ztrap = ze;
  Zsync_exception.zexcinfo = ZNone ();
  Zsync_exception.zext = ZNone ()}) in
  zset_next_pc (zexception_handler (!zcur_privilege, (ZCTL_TRAP zt), !zPC)))

and zhandle_interrupt ((zi, zdel_priv) : (zInterruptType * zPrivilege)) : unit = sail_call (fun r ->
  zset_next_pc (ztrap_handler (zdel_priv, true, (zinterruptType_to_bits zi), !zPC, (ZNone ()), (ZNone ()))))

and zinit_sys (() : (unit)) : unit = sail_call (fun r ->
  begin
    (zcur_privilege := ZMachine);
    (zmhartid := (zzzero_extend ((Big_int.of_int (32)), [B0])));
    (zmisa := ({!zmisa with ZMisa.zbits = update_subrange ((!zmisa.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (2)))), (zarch_to_bits ((if (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) then ZRV32 else ZRV64))))}));
    (zmisa := ({!zmisa with ZMisa.zbits = update_subrange ((!zmisa.zbits), Big_int.zero, Big_int.zero, [B0])}));
    (zmisa := ({!zmisa with ZMisa.zbits = update_subrange ((!zmisa.zbits), (Big_int.of_int (2)), (Big_int.of_int (2)), (zbool_to_bits (Platform.enable_rvc ())))}));
    (zmisa := ({!zmisa with ZMisa.zbits = update_subrange ((!zmisa.zbits), (Big_int.of_int (8)), (Big_int.of_int (8)), [B0])}));
    (zmisa := ({!zmisa with ZMisa.zbits = update_subrange ((!zmisa.zbits), (Big_int.of_int (4)), (Big_int.of_int (4)), [B1])}));
    (zmisa := ({!zmisa with ZMisa.zbits = update_subrange ((!zmisa.zbits), (Big_int.of_int (12)), (Big_int.of_int (12)), [B1])}));
    (zmisa := ({!zmisa with ZMisa.zbits = update_subrange ((!zmisa.zbits), (Big_int.of_int (20)), (Big_int.of_int (20)), [B0])}));
    (zmisa := ({!zmisa with ZMisa.zbits = update_subrange ((!zmisa.zbits), (Big_int.of_int (18)), (Big_int.of_int (18)), [B0])}));
    (zmisa := ({!zmisa with ZMisa.zbits = update_subrange ((!zmisa.zbits), (Big_int.of_int (21)), (Big_int.of_int (21)), (zbool_to_bits (Platform.enable_vext ())))}));
    (if ((Platform.enable_fdext ()) && (Platform.enable_zfinx ())) then (zinternal_error ("sail-riscv/model/riscv_sys_control.sail", (Big_int.of_int (496)), "F and Zfinx cannot both be enabled!")) else ());
    (zmisa := ({!zmisa with ZMisa.zbits = update_subrange ((!zmisa.zbits), (Big_int.of_int (5)), (Big_int.of_int (5)), (zbool_to_bits (Platform.enable_fdext ())))}));
    (zmisa := ({!zmisa with ZMisa.zbits = update_subrange ((!zmisa.zbits), (Big_int.of_int (3)), (Big_int.of_int (3)), ((if (gteq ((Big_int.of_int (64)), (Big_int.of_int (64)))) then (zbool_to_bits (Platform.enable_fdext ())) else [B0])))}));
    (zmstatus := (zset_mstatus_SXL (!zmstatus, (z_get_Misa_MXL !zmisa))));
    (zmstatus := (zset_mstatus_UXL (!zmstatus, (z_get_Misa_MXL !zmisa))));
    (zmstatus := ({!zmstatus with ZMstatus.zbits = update_subrange ((!zmstatus.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), [B0])}));
    (zmstatus := ({!zmstatus with ZMstatus.zbits = update_subrange ((!zmstatus.zbits), (Big_int.of_int (12)), (Big_int.of_int (11)), [B1; B1])}));
    (if (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) then ((zmstatus := (zMk_Mstatus (update_subrange ((!zmstatus.zbits), (Big_int.of_int (37)), (Big_int.of_int (36)), [B0; B0]))))) else ());
    (zmstatush := ({!zmstatush with ZMstatush.zbits = zzzero_extend ((Big_int.of_int (32)), [B0])}));
    (zmip := ({!zmip with ZMinterrupts.zbits = zzzero_extend ((Big_int.of_int (32)), [B0])}));
    (zmie := ({!zmie with ZMinterrupts.zbits = zzzero_extend ((Big_int.of_int (32)), [B0])}));
    (zmideleg := ({!zmideleg with ZMinterrupts.zbits = zzzero_extend ((Big_int.of_int (32)), [B0])}));
    (zmedeleg := ({!zmedeleg with ZMedeleg.zbits = zzzero_extend ((Big_int.of_int (32)), [B0])}));
    (zmtvec := ({!zmtvec with ZMtvec.zbits = zzzero_extend ((Big_int.of_int (32)), [B0])}));
    (zmcause := ({!zmcause with ZMcause.zbits = zzzero_extend ((Big_int.of_int (32)), [B0])}));
    (zmepc := (zzzero_extend ((Big_int.of_int (32)), [B0])));
    (zmtval := (zzzero_extend ((Big_int.of_int (32)), [B0])));
    (zmscratch := (zzzero_extend ((Big_int.of_int (32)), [B0])));
    (zmcycle := (zzzero_extend ((Big_int.of_int (64)), [B0])));
    (zmtime := (zzzero_extend ((Big_int.of_int (64)), [B0])));
    (zmcounteren := ({!zmcounteren with ZCounteren.zbits = zzzero_extend ((Big_int.of_int (32)), [B0])}));
    (zminstret := (zzzero_extend ((Big_int.of_int (64)), [B0])));
    (zminstret_increment := true);
    (zmenvcfg := ({!zmenvcfg with ZEnvcfg.zbits = zzzero_extend ((Big_int.of_int (64)), [B0])}));
    (zsenvcfg := ({!zsenvcfg with ZEnvcfg.zbits = zzzero_extend ((Big_int.of_int (64)), [B0])}));
    (zelen := [B1]);
    (zvlen := [B0; B1; B0; B0]);
    (zvlenb := (zto_bits ((Big_int.of_int (32)), (pow2 (sub_int ((zget_vlen_pow ()), (Big_int.of_int (3))))))));
    (zvstart := (zzzero_extend ((Big_int.of_int (16)), [B0])));
    (zvxsat := [B0]);
    (zvxrm := [B0; B0]);
    (zvcsr := ({!zvcsr with ZVcsr.zbits = update_subrange ((!zvcsr.zbits), (Big_int.of_int (2)), (Big_int.of_int (1)), !zvxrm)}));
    (zvcsr := ({!zvcsr with ZVcsr.zbits = update_subrange ((!zvcsr.zbits), Big_int.zero, Big_int.zero, !zvxsat)}));
    (zvl := (zzzero_extend ((Big_int.of_int (32)), [B0])));
    (zvtype := ({!zvtype with ZVtype.zbits = update_subrange ((!zvtype.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), [B1])}));
    (zvtype := ({!zvtype with ZVtype.zbits = update_subrange ((!zvtype.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (2)))), (Big_int.of_int (8)), (zzzero_extend ((Big_int.of_int (23)), [B0])))}));
    (zvtype := ({!zvtype with ZVtype.zbits = update_subrange ((!zvtype.zbits), (Big_int.of_int (7)), (Big_int.of_int (7)), [B0])}));
    (zvtype := ({!zvtype with ZVtype.zbits = update_subrange ((!zvtype.zbits), (Big_int.of_int (6)), (Big_int.of_int (6)), [B0])}));
    (zvtype := ({!zvtype with ZVtype.zbits = update_subrange ((!zvtype.zbits), (Big_int.of_int (5)), (Big_int.of_int (3)), [B0; B0; B0])}));
    (zvtype := ({!zvtype with ZVtype.zbits = update_subrange ((!zvtype.zbits), (Big_int.of_int (2)), Big_int.zero, [B0; B0; B0])}));
    zinit_pmp ();
    (if (Platform.get_config_print_reg ()) then (Platform.print_reg (concat_str ("CSR mstatus <- ", (concat_str ((string_of_bits (!zmstatus.zbits)), (concat_str (" (input: ", (concat_str ((string_of_bits (zzzero_extend ((Big_int.of_int (32)), [B0]))), ")"))))))))) else ())
  end)

type 'za zMemoryOpResult = | ZMemValue of 'za | ZMemException of zExceptionType;;

let string_of_zMemoryOpResult _ = "VARIANT";;

let rec zMemoryOpResult_add_meta : 'zt. (('zt) zMemoryOpResult * bool) -> (('zt * bool)) zMemoryOpResult = fun (zr, zm) -> sail_call (fun r ->
  begin
    match zr with
    | ZMemValue (zv) -> ZMemValue ((fun (v0, v1) -> (v1, v0)) (zm, zv))
    | ZMemException (ze) -> ZMemException ze
  end)

and zMemoryOpResult_drop_meta : 'zt. ((('zt * bool)) zMemoryOpResult) -> ('zt) zMemoryOpResult = fun zr -> sail_call (fun r ->
  begin
    match zr with
    | ZMemValue ((zv, zm)) -> ZMemValue zv
    | ZMemException (ze) -> ZMemException ze
  end)

type 'za zExt_FetchAddr_Check =
  | ZExt_FetchAddr_OK of zxlenbits
  | ZExt_FetchAddr_Error of 'za;;

let string_of_zExt_FetchAddr_Check _ = "VARIANT";;

type 'za zExt_ControlAddr_Check =
  | ZExt_ControlAddr_OK of zxlenbits
  | ZExt_ControlAddr_Error of 'za;;

let string_of_zExt_ControlAddr_Check _ = "VARIANT";;

type 'za zExt_DataAddr_Check =
  | ZExt_DataAddr_OK of zxlenbits
  | ZExt_DataAddr_Error of 'za;;

let string_of_zExt_DataAddr_Check _ = "VARIANT";;

type  zExt_PhysAddr_Check =
  | ZExt_PhysAddr_OK of unit
  | ZExt_PhysAddr_Error of zExceptionType;;

let string_of_zExt_PhysAddr_Check _ = "VARIANT";;

let rec zhandle_cheri_cap_exception ((zcapEx, zregnum) : (zCapEx * (bit) list)) : unit = sail_call (fun r ->
  begin
    (if ((Platform.get_config_print_instr ()) || (Platform.get_config_print_exception ())) then (print_string ("CHERI ", (concat_str ((zstring_of_capex zcapEx), (concat_str (" Reg=", (concat_str ((zstring_of_capreg_idx zregnum), (concat_str (" PC=", (string_of_bits !zPC))))))))))) else ());
    let zt = ({Zsync_exception.ztrap = ZE_Extension ZEXC_CHERI;
    Zsync_exception.zexcinfo = ZSome (zzzero_extend ((Big_int.of_int (32)), (append (zregnum, (zCapExCode zcapEx)))));
    Zsync_exception.zext = ZNone ()}) in
    zset_next_pc (zexception_handler (!zcur_privilege, (ZCTL_TRAP zt), !zPC))
  end)

and zhandle_cheri_reg_exception ((zcapEx, zregnum) : (zCapEx * (bit) list)) : unit = sail_call (fun r ->
  let zreg6 = (append ([B0], zregnum)) in
  zhandle_cheri_cap_exception (zcapEx, zreg6))

and zhandle_cheri_pcc_exception (zcapEx : (zCapEx)) : unit = sail_call (fun r ->
  zhandle_cheri_cap_exception (zcapEx, [B1; B0; B0; B0; B0; B0]))

and zpcc_access_system_regs (() : (unit)) : bool = sail_call (fun r ->
  !zPCC.zaccess_system_regs)

type  zext_fetch_addr_error = zCapEx;;

let string_of_zext_fetch_addr_error (gs6835 :  zext_fetch_addr_error) =
  string_of_zCapEx gs6835;;

let rec zext_fetch_check_pc ((zstart_pc, zpc) : ((bit) list * (bit) list)) : (zCapEx) zExt_FetchAddr_Check = sail_call (fun r ->
  (if (eq_list (zstart_pc, zpc)) then ((if (znot (!zPCC.ztag)) then ((if (!zMTCC.ztag) then (ZExt_FetchAddr_Error ZCapEx_TagViolation) else (znot_implemented "Untagged PCC and MTCC infinite loops; stopping now"))) else ((if (zisCapSealed !zPCC) then (zinternal_error ("src/cheri_addr_checks.sail", (Big_int.of_int (134)), "PCC should never be sealed")) else ((if (znot (!zPCC.zpermit_execute)) then (zinternal_error ("src/cheri_addr_checks.sail", (Big_int.of_int (136)), "PCC should always be executable")) else ((if (znot (zinCapBounds (!zPCC, zpc, (Big_int.of_int (2))))) then (ZExt_FetchAddr_Error ZCapEx_BoundsViolation) else (ZExt_FetchAddr_OK zpc))))))))) else ((if (znot (zinCapBounds (!zPCC, zpc, (Big_int.of_int (2))))) then (ZExt_FetchAddr_Error ZCapEx_BoundsViolation) else (ZExt_FetchAddr_OK zpc)))))

and zext_handle_fetch_check_error (ze : (zCapEx)) : unit = sail_call (fun r ->
  begin
    (if ((fun (x, y) -> x = y) (ze, ZCapEx_BoundsViolation)) then ((zPCC := (zclearTag !zPCC))) else ());
    zhandle_cheri_pcc_exception ze
  end)

type  zext_control_addr_error = (zCapEx * zcapreg_idx);;

let string_of_zext_control_addr_error (gs6846 :  zext_control_addr_error) =
  (fun (gs6847, gs6848) -> "(" ^ string_of_zCapEx gs6847 ^ ", " ^ string_of_zcapreg_idx gs6848 ^ ")") gs6846;;

let rec zext_control_check_addr (zpc : ((bit) list)) : ((zCapEx * (bit) list)) zExt_ControlAddr_Check = sail_call (fun r ->
  ZExt_ControlAddr_OK zpc)

and zext_control_check_pc (zpc : ((bit) list)) : ((zCapEx * (bit) list)) zExt_ControlAddr_Check = sail_call (fun r ->
  ZExt_ControlAddr_OK zpc)

and zext_handle_control_check_error (zerr : ((zCapEx * (bit) list))) : unit = sail_call (fun r ->
  zinternal_error ("src/cheri_addr_checks.sail", (Big_int.of_int (175)), "ext_handle_control_check_error should be unreachable"))

type  zext_data_addr_error = (zCapEx * zcapreg_idx);;

let string_of_zext_data_addr_error (gs6863 :  zext_data_addr_error) =
  (fun (gs6864, gs6865) -> "(" ^ string_of_zCapEx gs6864 ^ ", " ^ string_of_zcapreg_idx gs6865 ^ ")") gs6863;;

let rec zext_data_get_addr ((zbase_reg, zoffset, zacc, zwidth) : ((bit) list * (bit) list * (zext_access_type) zAccessType * zword_width)) : ((zCapEx * (bit) list)) zExt_DataAddr_Check = sail_call (fun r ->
  let zauth_val = (zrC_bits zbase_reg) in
  let znewAddr = (add_vec ((zauth_val.zaddress), zoffset)) in
  let zauth_idx = (append ([B0], zbase_reg)) in
  let (zhave_rqd_load_perm, zhave_rqd_store_perm) = (begin
    match zacc with
    | ZRead (ZData) ->
      ((fun (v0, v1) -> (v1, v0)) (true, zauth_val.zpermit_load))
    | ZWrite (ZData) ->
      ((fun (v0, v1) -> (v1, v0)) (zauth_val.zpermit_store, true))
    | ZReadWrite ((ZData, ZData)) ->
      ((fun (v0, v1) -> (v1, v0)) (zauth_val.zpermit_store, zauth_val.zpermit_load))
    | ZExecute (()) ->
      zinternal_error ("src/cheri_addr_checks.sail", (Big_int.of_int (193)), "ext_data_get_addr for Execute")
    | ZRead (_) ->
      zinternal_error ("src/cheri_addr_checks.sail", (Big_int.of_int (194)), "ext_data_get_addr for Read(_)")
    | ZWrite (_) ->
      zinternal_error ("src/cheri_addr_checks.sail", (Big_int.of_int (195)), "ext_data_get_addr for Write(_)")
    | ZReadWrite ((_, _)) ->
      zinternal_error ("src/cheri_addr_checks.sail", (Big_int.of_int (196)), "ext_data_get_addr for ReadWrite(_, _)")
  end) in
  (if (znot (zauth_val.ztag)) then (ZExt_DataAddr_Error ((fun (v0, v1) -> (v1, v0)) (zauth_idx, ZCapEx_TagViolation))) else ((if (zisCapSealed zauth_val) then (ZExt_DataAddr_Error ((fun (v0, v1) -> (v1, v0)) (zauth_idx, ZCapEx_SealViolation))) else ((if (znot zhave_rqd_load_perm) then (ZExt_DataAddr_Error ((fun (v0, v1) -> (v1, v0)) (zauth_idx, ZCapEx_PermitLoadViolation))) else ((if (znot zhave_rqd_store_perm) then (ZExt_DataAddr_Error ((fun (v0, v1) -> (v1, v0)) (zauth_idx, ZCapEx_PermitStoreViolation))) else ((if (znot (zinCapBounds (zauth_val, znewAddr, (zword_width_bytes zwidth)))) then (ZExt_DataAddr_Error ((fun (v0, v1) -> (v1, v0)) (zauth_idx, ZCapEx_BoundsViolation))) else (ZExt_DataAddr_OK znewAddr)))))))))))

and zext_handle_data_check_error (zerr : ((zCapEx * (bit) list))) : unit = sail_call (fun r ->
  let (zcapEx, zregnum) = zerr in
  zhandle_cheri_cap_exception (zcapEx, zregnum))

and zext_check_phys_mem_read ((zaccess_type, zpaddr, zsizze, zaquire, zrelease, zreserved, zread_meta) : ((zext_access_type) zAccessType * (bit) list * Big_int.num * bool * bool * bool * bool)) : zExt_PhysAddr_Check = sail_call (fun r ->
  ZExt_PhysAddr_OK ())

and zext_check_phys_mem_write ((zwrite_kind, zpaddr, zsizze, zdata, zmetadata) : (zwrite_kind * (bit) list * Big_int.num * (bit) list * bool)) : zExt_PhysAddr_Check = sail_call (fun r ->
  begin
    (if ((zz8operatorz0zKzJ_uz9 (zpaddr, !zMSHWMB)) && (zz8operatorz0zI_uz9 (zpaddr, !zMSHWM))) then (let zpaddr16 = ref ((zlegalizze_mshwm zpaddr) : (bit) list) in
    begin
      (if (Platform.get_config_print_reg ()) then (Platform.print_reg (concat_str ("MSHWM <- ", (string_of_bits !zpaddr16)))) else ());
      (zMSHWM := !zpaddr16)
    end) else ());
    ZExt_PhysAddr_OK ()
  end)

and zext_check_xret_priv (zp : (zPrivilege)) : bool = sail_call (fun r ->
  zpcc_access_system_regs ())

and zext_fail_xret_priv (() : (unit)) : unit = sail_call (fun r ->
  zhandle_cheri_pcc_exception ZCapEx_AccessSystemRegsViolation)

and zext_check_CSR ((zcsrno, zp, zisWrite) : ((bit) list * zPrivilege * bool)) : bool = sail_call (fun r ->
  (if (znot (zpcc_access_system_regs ())) then (begin
    match zcsrno with
    | zb__0 when (eq_list (zb__0, [B1; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      znot zisWrite
    | zb__1 when (eq_list (zb__1, [B1; B0; B1; B1; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      znot zisWrite
    | zb__2 when (eq_list (zb__2, [B1; B0; B1; B1; B1; B0; B0; B0; B0; B0; B0; B0])) ->
      znot zisWrite
    | zb__3 when (eq_list (zb__3, [B1; B0; B1; B1; B1; B0; B0; B0; B0; B0; B1; B0])) ->
      znot zisWrite
    | zb__4 when (eq_list (zb__4, [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      znot zisWrite
    | zb__5 when (eq_list (zb__5, [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1])) ->
      znot zisWrite
    | zb__6 when (eq_list (zb__6, [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      znot zisWrite
    | zb__7 when (eq_list (zb__7, [B1; B1; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0])) ->
      znot zisWrite
    | zb__8 when (eq_list (zb__8, [B1; B1; B0; B0; B1; B0; B0; B0; B0; B0; B0; B1])) ->
      znot zisWrite
    | zb__9 when (eq_list (zb__9, [B1; B1; B0; B0; B1; B0; B0; B0; B0; B0; B1; B0])) ->
      znot zisWrite
    | _ -> false
  end) else (true)))

and zext_check_CSR_fail (() : (unit)) : unit = sail_call (fun r ->
  zhandle_cheri_pcc_exception ZCapEx_AccessSystemRegsViolation)

(* Omitting externed function plat_htif_tohost *)


and zphys_mem_segments (() : (unit)) : (((bit) list * (bit) list)) list = sail_call (fun r ->
  ((fun (v0, v1) -> (v1, v0)) (Platform.rom_size (), Platform.rom_base ())) :: ((fun (v0, v1) -> (v1, v0)) (Platform.dram_size (), Platform.dram_base ())) :: [])

and zwithin_phys_mem ((zaddr, zwidth) : ((bit) list * Big_int.num)) : bool = sail_call (fun r ->
  let zaddr_int = (uint zaddr) in
  let zram_base_int = (uint (Platform.dram_base ())) in
  let zrom_base_int = (uint (Platform.rom_base ())) in
  let zram_sizze_int = (uint (Platform.dram_size ())) in
  let zrom_sizze_int = (uint (Platform.rom_size ())) in
  (if ((lteq (zram_base_int, zaddr_int)) && (lteq ((add_int (zaddr_int, (z__id zwidth))), (add_int (zram_base_int, zram_sizze_int))))) then true else ((if ((lteq (zrom_base_int, zaddr_int)) && (lteq ((add_int (zaddr_int, (z__id zwidth))), (add_int (zrom_base_int, zrom_sizze_int))))) then true else (begin
    Platform.print_platform (concat_str ("within_phys_mem: ", (concat_str ((string_of_bits zaddr), " not within phys-mem:"))));
    Platform.print_platform (concat_str ("  plat_rom_base: ", (string_of_bits (Platform.rom_base ()))));
    Platform.print_platform (concat_str ("  plat_rom_size: ", (string_of_bits (Platform.rom_size ()))));
    Platform.print_platform (concat_str ("  plat_ram_base: ", (string_of_bits (Platform.dram_base ()))));
    Platform.print_platform (concat_str ("  plat_ram_size: ", (string_of_bits (Platform.dram_size ()))));
    false
  end)))))

and zwithin_clint ((zaddr, zwidth) : ((bit) list * Big_int.num)) : bool = sail_call (fun r ->
  let zaddr_int = (uint zaddr) in
  let zclint_base_int = (uint (Platform.clint_base ())) in
  let zclint_sizze_int = (uint (Platform.clint_size ())) in
  (lteq (zclint_base_int, zaddr_int)) && (lteq ((add_int (zaddr_int, (z__id zwidth))), (add_int (zclint_base_int, zclint_sizze_int)))))

and zwithin_htif_writable ((zaddr, zwidth) : ((bit) list * Big_int.num)) : bool = sail_call (fun r ->
  (eq_list ((Platform.htif_tohost ()), zaddr)) || ((eq_list ((add_vec_int ((Platform.htif_tohost ()), (Big_int.of_int (4)))), zaddr)) && (eq_int (zwidth, (Big_int.of_int (4))))))

and zwithin_htif_readable ((zaddr, zwidth) : ((bit) list * Big_int.num)) : bool = sail_call (fun r ->
  (eq_list ((Platform.htif_tohost ()), zaddr)) || ((eq_list ((add_vec_int ((Platform.htif_tohost ()), (Big_int.of_int (4)))), zaddr)) && (eq_int (zwidth, (Big_int.of_int (4))))))

and zwithin_uart ((zaddr, zwidth) : ((bit) list * Big_int.num)) : bool = sail_call (fun r ->
  let zaddr_int = (uint zaddr) in
  let zuart_base_int = (uint (Platform.uart_base ())) in
  let zuart_sizze_int = (uint (Platform.uart_size ())) in
  (lteq (zuart_base_int, zaddr_int)) && (lteq ((add_int (zaddr_int, (z__id zwidth))), (add_int (zuart_base_int, zuart_sizze_int)))))

let zmtimecmp : (zbits) ref = ref (undefined_bitvector (Big_int.of_int (64)));;

let zMSIP_BASE = (zzzero_extend ((Big_int.of_int (32)), [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0]));;

let zMTIMECMP_BASE = (zzzero_extend ((Big_int.of_int (32)), [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0]));;

let zMTIMECMP_BASE_HI = (zzzero_extend ((Big_int.of_int (32)), [B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B0]));;

let zMTIME_BASE = (zzzero_extend ((Big_int.of_int (32)), [B0; B0; B0; B0; B1; B0; B1; B1; B1; B1; B1; B1; B1; B1; B1; B1; B1; B0; B0; B0]));;

let zMTIME_BASE_HI = (zzzero_extend ((Big_int.of_int (32)), [B0; B0; B0; B0; B1; B0; B1; B1; B1; B1; B1; B1; B1; B1; B1; B1; B1; B1; B0; B0]));;

let rec zclint_load ((zt, zaddr, zwidth) : ((zext_access_type) zAccessType * (bit) list * Big_int.num)) : ((bit) list) zMemoryOpResult = sail_call (fun r ->
  let zaddr = (sub_vec (zaddr, (Platform.clint_base ()))) in
  (if ((eq_list (zaddr, zMSIP_BASE)) && ((eq_int ((z__id zwidth), (Big_int.of_int (8)))) || (eq_int ((z__id zwidth), (Big_int.of_int (4)))))) then (begin
    (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("clint[", (concat_str ((string_of_bits zaddr), (concat_str ("] -> ", (string_of_bits (z_get_Minterrupts_MSI !zmip))))))))) else ());
    ZMemValue (zero_extend ((z_get_Minterrupts_MSI !zmip), (mult ((Big_int.of_int (8)), (z__id zwidth)))))
  end) else ((if ((eq_list (zaddr, zMTIMECMP_BASE)) && (eq_int ((z__id zwidth), (Big_int.of_int (4))))) then (begin
    (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("clint<4>[", (concat_str ((string_of_bits zaddr), (concat_str ("] -> ", (string_of_bits (subrange (!zmtimecmp, (Big_int.of_int (31)), Big_int.zero)))))))))) else ());
    ZMemValue (zero_extend ((subrange (!zmtimecmp, (Big_int.of_int (31)), Big_int.zero)), (Big_int.of_int (32))))
  end) else ((if ((eq_list (zaddr, zMTIMECMP_BASE)) && (eq_int ((z__id zwidth), (Big_int.of_int (8))))) then (begin
    (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("clint<8>[", (concat_str ((string_of_bits zaddr), (concat_str ("] -> ", (string_of_bits !zmtimecmp)))))))) else ());
    ZMemValue (zero_extend (!zmtimecmp, (Big_int.of_int (64))))
  end) else ((if ((eq_list (zaddr, zMTIMECMP_BASE_HI)) && (eq_int ((z__id zwidth), (Big_int.of_int (4))))) then (begin
    (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("clint-hi<4>[", (concat_str ((string_of_bits zaddr), (concat_str ("] -> ", (string_of_bits (subrange (!zmtimecmp, (Big_int.of_int (63)), (Big_int.of_int (32)))))))))))) else ());
    ZMemValue (zero_extend ((subrange (!zmtimecmp, (Big_int.of_int (63)), (Big_int.of_int (32)))), (Big_int.of_int (32))))
  end) else ((if ((eq_list (zaddr, zMTIME_BASE)) && (eq_int ((z__id zwidth), (Big_int.of_int (4))))) then (begin
    (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("clint[", (concat_str ((string_of_bits zaddr), (concat_str ("] -> ", (string_of_bits !zmtime)))))))) else ());
    ZMemValue (zero_extend ((subrange (!zmtime, (Big_int.of_int (31)), Big_int.zero)), (Big_int.of_int (32))))
  end) else ((if ((eq_list (zaddr, zMTIME_BASE)) && (eq_int ((z__id zwidth), (Big_int.of_int (8))))) then (begin
    (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("clint[", (concat_str ((string_of_bits zaddr), (concat_str ("] -> ", (string_of_bits !zmtime)))))))) else ());
    ZMemValue (zero_extend (!zmtime, (Big_int.of_int (64))))
  end) else ((if ((eq_list (zaddr, zMTIME_BASE_HI)) && (eq_int ((z__id zwidth), (Big_int.of_int (4))))) then (begin
    (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("clint[", (concat_str ((string_of_bits zaddr), (concat_str ("] -> ", (string_of_bits !zmtime)))))))) else ());
    ZMemValue (zero_extend ((subrange (!zmtime, (Big_int.of_int (63)), (Big_int.of_int (32)))), (Big_int.of_int (32))))
  end) else (begin
    (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("clint[", (concat_str ((string_of_bits zaddr), "] -> <not-mapped>"))))) else ());
    begin
      match zt with
      | ZExecute (()) -> ZMemException (ZE_Fetch_Access_Fault ())
      | ZRead (ZData) -> ZMemException (ZE_Load_Access_Fault ())
      | _ -> ZMemException (ZE_SAMO_Access_Fault ())
    end
  end)))))))))))))))

and zclint_dispatch (() : (unit)) : unit = sail_call (fun r ->
  begin
    (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("clint::tick mtime <- ", (string_of_bits !zmtime)))) else ());
    (zmip := ({!zmip with ZMinterrupts.zbits = update_subrange ((!zmip.zbits), (Big_int.of_int (7)), (Big_int.of_int (7)), [B0])}));
    (if (zz8operatorz0zIzJ_uz9 (!zmtimecmp, !zmtime)) then (begin
      (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str (" clint timer pending at mtime ", (string_of_bits !zmtime)))) else ());
      (zmip := ({!zmip with ZMinterrupts.zbits = update_subrange ((!zmip.zbits), (Big_int.of_int (7)), (Big_int.of_int (7)), [B1])}))
    end) else ())
  end)

and zclint_store ((zaddr, zwidth, zdata) : ((bit) list * Big_int.num * (bit) list)) : (bool) zMemoryOpResult = sail_call (fun r ->
  let zaddr = (sub_vec (zaddr, (Platform.clint_base ()))) in
  (if ((eq_list (zaddr, zMSIP_BASE)) && ((eq_int ((z__id zwidth), (Big_int.of_int (8)))) || (eq_int ((z__id zwidth), (Big_int.of_int (4)))))) then (begin
    (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("clint[", (concat_str ((string_of_bits zaddr), (concat_str ("] <- ", (concat_str ((string_of_bits zdata), (concat_str (" (mip.MSI <- ", (concat_str ((zbit_str (access (zdata, Big_int.zero))), ")"))))))))))))) else ());
    (zmip := ({!zmip with ZMinterrupts.zbits = update_subrange ((!zmip.zbits), (Big_int.of_int (3)), (Big_int.of_int (3)), [access (zdata, Big_int.zero)])}));
    zclint_dispatch ();
    ZMemValue true
  end) else ((if ((eq_list (zaddr, zMTIMECMP_BASE)) && (eq_int ((z__id zwidth), (Big_int.of_int (8))))) then (begin
    (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("clint<8>[", (concat_str ((string_of_bits zaddr), (concat_str ("] <- ", (concat_str ((string_of_bits zdata), " (mtimecmp)"))))))))) else ());
    (zmtimecmp := (zero_extend (zdata, (Big_int.of_int (64)))));
    zclint_dispatch ();
    ZMemValue true
  end) else ((if ((eq_list (zaddr, zMTIMECMP_BASE)) && (eq_int ((z__id zwidth), (Big_int.of_int (4))))) then (begin
    (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("clint<4>[", (concat_str ((string_of_bits zaddr), (concat_str ("] <- ", (concat_str ((string_of_bits zdata), " (mtimecmp)"))))))))) else ());
    (zmtimecmp := (update_subrange (!zmtimecmp, (Big_int.of_int (31)), Big_int.zero, (zero_extend (zdata, (Big_int.of_int (32)))))));
    zclint_dispatch ();
    ZMemValue true
  end) else ((if ((eq_list (zaddr, zMTIMECMP_BASE_HI)) && (eq_int ((z__id zwidth), (Big_int.of_int (4))))) then (begin
    (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("clint<4>[", (concat_str ((string_of_bits zaddr), (concat_str ("] <- ", (concat_str ((string_of_bits zdata), " (mtimecmp)"))))))))) else ());
    (zmtimecmp := (update_subrange (!zmtimecmp, (Big_int.of_int (63)), (Big_int.of_int (32)), (zero_extend (zdata, (Big_int.of_int (32)))))));
    zclint_dispatch ();
    ZMemValue true
  end) else (begin
    (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("clint[", (concat_str ((string_of_bits zaddr), (concat_str ("] <- ", (concat_str ((string_of_bits zdata), " (<unmapped>)"))))))))) else ());
    ZMemException (ZE_SAMO_Access_Fault ())
  end)))))))))

and ztick_clock (() : (unit)) : unit = sail_call (fun r ->
  begin
    (if (eq_list ((z_get_Counterin_CY !zmcountinhibit), [B0])) then ((zmcycle := (add_vec_int (!zmcycle, (Big_int.of_int (1)))))) else ());
    (zmtime := (add_vec_int (!zmtime, (Big_int.of_int (1)))));
    zclint_dispatch ()
  end)

and zundefined_htif_cmd (() : (unit)) : Zhtif_cmd.zhtif_cmd = sail_call (fun r ->
  {Zhtif_cmd.zbits = undefined_bitvector (Big_int.of_int (64))})

and zMk_htif_cmd (zv : ((bit) list)) : Zhtif_cmd.zhtif_cmd = sail_call (fun r ->
  {Zhtif_cmd.zbits = zv})

and z_get_htif_cmd_cmd (zv : (Zhtif_cmd.zhtif_cmd)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (55)), (Big_int.of_int (48))))

and z_update_htif_cmd_cmd ((zv, zx) : (Zhtif_cmd.zhtif_cmd * (bit) list)) : Zhtif_cmd.zhtif_cmd = sail_call (fun r ->
  {zv with Zhtif_cmd.zbits = update_subrange ((zv.zbits), (Big_int.of_int (55)), (Big_int.of_int (48)), zx)})

and z_set_htif_cmd_cmd ((zr_ref, zv) : ((Zhtif_cmd.zhtif_cmd) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_htif_cmd_cmd (zr, zv))))

and z_get_htif_cmd_device (zv : (Zhtif_cmd.zhtif_cmd)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (63)), (Big_int.of_int (56))))

and z_update_htif_cmd_device ((zv, zx) : (Zhtif_cmd.zhtif_cmd * (bit) list)) : Zhtif_cmd.zhtif_cmd = sail_call (fun r ->
  {zv with Zhtif_cmd.zbits = update_subrange ((zv.zbits), (Big_int.of_int (63)), (Big_int.of_int (56)), zx)})

and z_set_htif_cmd_device ((zr_ref, zv) : ((Zhtif_cmd.zhtif_cmd) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_htif_cmd_device (zr, zv))))

and z_get_htif_cmd_payload (zv : (Zhtif_cmd.zhtif_cmd)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (47)), Big_int.zero))

and z_update_htif_cmd_payload ((zv, zx) : (Zhtif_cmd.zhtif_cmd * (bit) list)) : Zhtif_cmd.zhtif_cmd = sail_call (fun r ->
  {zv with Zhtif_cmd.zbits = update_subrange ((zv.zbits), (Big_int.of_int (47)), Big_int.zero, zx)})

and z_set_htif_cmd_payload ((zr_ref, zv) : ((Zhtif_cmd.zhtif_cmd) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_htif_cmd_payload (zr, zv))))

let zhtif_tohost : (zbits) ref = ref (undefined_bitvector (Big_int.of_int (64)));;

let zhtif_done : (bool) ref = ref (undefined_bool ());;

let zhtif_exit_code : (zbits) ref = ref (undefined_bitvector (Big_int.of_int (64)));;

let zhtif_cmd_write : (bit) ref = ref (undefined_bit ());;

let zhtif_payload_writes : (zbits) ref = ref (undefined_bitvector (Big_int.of_int (4)));;

let rec zreset_htif (() : (unit)) : unit = sail_call (fun r ->
  begin
    (zhtif_cmd_write := B0);
    (zhtif_payload_writes := [B0; B0; B0; B0]);
    (zhtif_tohost := (zzzero_extend ((Big_int.of_int (64)), [B0])))
  end)

and zhtif_load ((zt, zpaddr, zwidth) : ((zext_access_type) zAccessType * (bit) list * Big_int.num)) : ((bit) list) zMemoryOpResult = sail_call (fun r ->
  begin
    (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("htif[", (concat_str ((string_of_bits zpaddr), (concat_str ("] -> ", (string_of_bits !zhtif_tohost)))))))) else ());
    (if ((eq_int (zwidth, (Big_int.of_int (8)))) && (eq_list (zpaddr, (Platform.htif_tohost ())))) then (ZMemValue (zero_extend (!zhtif_tohost, (Big_int.of_int (64))))) else ((if ((eq_int (zwidth, (Big_int.of_int (4)))) && (eq_list (zpaddr, (Platform.htif_tohost ())))) then (ZMemValue (zero_extend ((subrange (!zhtif_tohost, (Big_int.of_int (31)), Big_int.zero)), (Big_int.of_int (32))))) else ((if ((eq_int (zwidth, (Big_int.of_int (4)))) && (eq_list (zpaddr, (add_vec_int ((Platform.htif_tohost ()), (Big_int.of_int (4))))))) then (ZMemValue (zero_extend ((subrange (!zhtif_tohost, (Big_int.of_int (63)), (Big_int.of_int (32)))), (Big_int.of_int (32))))) else (begin
      match zt with
      | ZExecute (()) -> ZMemException (ZE_Fetch_Access_Fault ())
      | ZRead (ZData) -> ZMemException (ZE_Load_Access_Fault ())
      | _ -> ZMemException (ZE_SAMO_Access_Fault ())
    end))))))
  end)

and zhtif_store ((zpaddr, zwidth, zdata) : ((bit) list * Big_int.num * (bit) list)) : (bool) zMemoryOpResult = sail_call (fun r ->
  begin
    (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("htif[", (concat_str ((string_of_bits zpaddr), (concat_str ("] <- ", (string_of_bits zdata)))))))) else ());
    (if (eq_int (zwidth, (Big_int.of_int (8)))) then (begin
      (zhtif_cmd_write := B1);
      (zhtif_payload_writes := (add_vec_int (!zhtif_payload_writes, (Big_int.of_int (1)))));
      (zhtif_tohost := (zzzero_extend ((Big_int.of_int (64)), zdata)))
    end) else ((if ((eq_int (zwidth, (Big_int.of_int (4)))) && (eq_list (zpaddr, (Platform.htif_tohost ())))) then (begin
      (if (eq_list (zdata, (subrange (!zhtif_tohost, (Big_int.of_int (31)), Big_int.zero)))) then ((zhtif_payload_writes := (add_vec_int (!zhtif_payload_writes, (Big_int.of_int (1)))))) else ((zhtif_payload_writes := [B0; B0; B0; B1])));
      (zhtif_tohost := (update_subrange (!zhtif_tohost, (Big_int.of_int (31)), Big_int.zero, zdata)))
    end) else ((if ((eq_int (zwidth, (Big_int.of_int (4)))) && (eq_list (zpaddr, (add_vec_int ((Platform.htif_tohost ()), (Big_int.of_int (4))))))) then (begin
      (if (eq_list ((subrange (zdata, (Big_int.of_int (15)), Big_int.zero)), (subrange (!zhtif_tohost, (Big_int.of_int (47)), (Big_int.of_int (32)))))) then ((zhtif_payload_writes := (add_vec_int (!zhtif_payload_writes, (Big_int.of_int (1)))))) else ((zhtif_payload_writes := [B0; B0; B0; B1])));
      (zhtif_cmd_write := B1);
      (zhtif_tohost := (update_subrange (!zhtif_tohost, (Big_int.of_int (63)), (Big_int.of_int (32)), zdata)))
    end) else ((zhtif_tohost := (zzzero_extend ((Big_int.of_int (64)), zdata)))))))));
    (if (((eq_bit (!zhtif_cmd_write, B1)) && (gt ((uint !zhtif_payload_writes), Big_int.zero))) || (gt ((uint !zhtif_payload_writes), (Big_int.of_int (2))))) then (let zcmd = (zMk_htif_cmd !zhtif_tohost) in
    begin
      match (z_get_htif_cmd_device zcmd) with
      | zb__0 when (eq_list (zb__0, [B0; B0; B0; B0; B0; B0; B0; B0])) ->
        begin
          (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("htif-syscall-proxy cmd: ", (string_of_bits (z_get_htif_cmd_payload zcmd))))) else ());
          (if (eq_bit ((access ((z_get_htif_cmd_payload zcmd), Big_int.zero)), B1)) then (begin
            (zhtif_done := true);
            (zhtif_exit_code := (shiftr ((zero_extend ((z_get_htif_cmd_payload zcmd), (Big_int.of_int (64)))), (Big_int.of_int (1)))))
          end) else ())
        end
      | zb__1 when (eq_list (zb__1, [B0; B0; B0; B0; B0; B0; B0; B1])) ->
        begin
          (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("htif-term cmd: ", (string_of_bits (z_get_htif_cmd_payload zcmd))))) else ());
          begin
            match (z_get_htif_cmd_cmd zcmd) with
            | zb__2 when (eq_list (zb__2, [B0; B0; B0; B0; B0; B0; B0; B0])) ->
              ()
            | zb__3 when (eq_list (zb__3, [B0; B0; B0; B0; B0; B0; B0; B1])) ->
              Platform.term_write (subrange ((z_get_htif_cmd_payload zcmd), (Big_int.of_int (7)), Big_int.zero))
            | zc ->
              print_endline (concat_str ("Unknown term cmd: ", (string_of_bits zc)))
          end;
          zreset_htif ()
        end
      | zd ->
        print_endline (concat_str ("htif-???? cmd: ", (string_of_bits zdata)))
    end) else ());
    ZMemValue true
  end)

and zhtif_tick (() : (unit)) : unit = sail_call (fun r ->
  begin
    (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("htif::tick ", (string_of_bits !zhtif_tohost)))) else ());
    (zhtif_tohost := !zhtif_tohost)
  end)

and zwithin_mmio_readable ((zaddr, zwidth) : ((bit) list * Big_int.num)) : bool = sail_call (fun r ->
  (zwithin_uart (zaddr, zwidth)) || ((zwithin_clint (zaddr, zwidth)) || ((zwithin_htif_readable (zaddr, zwidth)) && (lteq ((Big_int.of_int (1)), (z__id zwidth))))))

and zwithin_mmio_writable ((zaddr, zwidth) : ((bit) list * Big_int.num)) : bool = sail_call (fun r ->
  (zwithin_uart (zaddr, zwidth)) || ((zwithin_clint (zaddr, zwidth)) || ((zwithin_htif_writable (zaddr, zwidth)) && (lteq ((z__id zwidth), (Big_int.of_int (8)))))))

let zUART_OFFSET_DATA = [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0];;

let zUART_OFFSET_LINE_CTL = [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B0; B0];;

let zUART_OFFSET_LINE_STATUS = [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B1; B0; B0];;

let zUART_DLAB : (bit) ref = ref (B0);;

let rec zuart_load ((zt, zaddr, zwidth) : ((zext_access_type) zAccessType * (bit) list * Big_int.num)) : ((bit) list) zMemoryOpResult = sail_call (fun r ->
  let zoffset = (sub_vec (zaddr, (Platform.uart_base ()))) in
  (if ((eq_list (zoffset, (zzzero_extend ((Big_int.of_int (32)), zUART_OFFSET_LINE_STATUS)))) && (eq_int ((z__id zwidth), (Big_int.of_int (4))))) then (let zresult = [B1; B0; B0; B0; B0; B0] in
  begin
    (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("uart[", (concat_str ((string_of_bits zoffset), (concat_str ("] -> ", (string_of_bits zresult)))))))) else ());
    ZMemValue (zero_extend (zresult, (mult ((Big_int.of_int (8)), (z__id zwidth)))))
  end) else (begin
    (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("uart[", (concat_str ((string_of_bits zoffset), "] -> <not-mapped>"))))) else ());
    begin
      match zt with
      | ZExecute (()) -> ZMemException (ZE_Fetch_Access_Fault ())
      | ZRead (ZData) -> ZMemException (ZE_Load_Access_Fault ())
      | _ -> ZMemException (ZE_SAMO_Access_Fault ())
    end
  end)))

and zuart_store ((zaddr, zwidth, zdata) : ((bit) list * Big_int.num * (bit) list)) : (bool) zMemoryOpResult = sail_call (fun r ->
  let zoffset = (sub_vec (zaddr, (Platform.uart_base ()))) in
  (if ((eq_list (zoffset, (zzzero_extend ((Big_int.of_int (32)), zUART_OFFSET_DATA)))) && ((eq_int ((z__id zwidth), (Big_int.of_int (8)))) || (eq_int ((z__id zwidth), (Big_int.of_int (4)))))) then (begin
    (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("uart[", (concat_str ((string_of_bits zoffset), (concat_str ("] <- ", (string_of_bits zdata)))))))) else ());
    (if (eq_bit (!zUART_DLAB, B0)) then (Platform.term_write (subrange (zdata, (Big_int.of_int (7)), Big_int.zero))) else ());
    ZMemValue true
  end) else ((if ((eq_list (zoffset, (zzzero_extend ((Big_int.of_int (32)), zUART_OFFSET_LINE_CTL)))) && ((eq_int ((z__id zwidth), (Big_int.of_int (8)))) || (eq_int ((z__id zwidth), (Big_int.of_int (4)))))) then (begin
    (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("uart[", (concat_str ((string_of_bits zoffset), (concat_str ("] <- ", (string_of_bits zdata)))))))) else ());
    (zUART_DLAB := (access (zdata, (Big_int.of_int (7)))));
    ZMemValue true
  end) else (begin
    (if (Platform.get_config_print_platform ()) then (Platform.print_platform (concat_str ("uart[", (concat_str ((string_of_bits zoffset), (concat_str ("] <- ", (concat_str ((string_of_bits zdata), " (<ignored>)"))))))))) else ());
    ZMemValue true
  end)))))

and zmmio_read ((zt, zpaddr, zwidth) : ((zext_access_type) zAccessType * (bit) list * Big_int.num)) : ((bit) list) zMemoryOpResult = sail_call (fun r ->
  (if (zwithin_uart (zpaddr, zwidth)) then (zuart_load (zt, zpaddr, zwidth)) else ((if (zwithin_clint (zpaddr, zwidth)) then (zclint_load (zt, zpaddr, zwidth)) else ((if ((zwithin_htif_readable (zpaddr, zwidth)) && (lteq ((Big_int.of_int (1)), (z__id zwidth)))) then (zhtif_load (zt, zpaddr, zwidth)) else (begin
    match zt with
    | ZExecute (()) -> ZMemException (ZE_Fetch_Access_Fault ())
    | ZRead (ZData) -> ZMemException (ZE_Load_Access_Fault ())
    | _ -> ZMemException (ZE_SAMO_Access_Fault ())
  end)))))))

and zmmio_write ((zpaddr, zwidth, zdata) : ((bit) list * Big_int.num * (bit) list)) : (bool) zMemoryOpResult = sail_call (fun r ->
  (if (zwithin_uart (zpaddr, zwidth)) then (zuart_store (zpaddr, zwidth, zdata)) else ((if (zwithin_clint (zpaddr, zwidth)) then (zclint_store (zpaddr, zwidth, zdata)) else ((if ((zwithin_htif_writable (zpaddr, zwidth)) && (lteq ((z__id zwidth), (Big_int.of_int (8))))) then (zhtif_store (zpaddr, zwidth, zdata)) else (ZMemException (ZE_SAMO_Access_Fault ()))))))))

and zinit_platform (() : (unit)) : unit = sail_call (fun r ->
  begin
    (zhtif_tohost := (zzzero_extend ((Big_int.of_int (64)), [B0])));
    (zhtif_done := false);
    (zhtif_exit_code := (zzzero_extend ((Big_int.of_int (64)), [B0])));
    (zhtif_cmd_write := B0);
    (zhtif_payload_writes := (zzzero_extend ((Big_int.of_int (4)), [B0])))
  end)

and ztick_platform (() : (unit)) : unit = sail_call (fun r -> zhtif_tick ())

and zhandle_illegal (() : (unit)) : unit = sail_call (fun r ->
  let zinfo = ((if (Platform.mtval_has_illegal_inst_bits ()) then (ZSome !zinstbits) else (ZNone ()))) in
  let zt = ({Zsync_exception.ztrap = ZE_Illegal_Instr ();
  Zsync_exception.zexcinfo = zinfo;
  Zsync_exception.zext = ZNone ()}) in
  zset_next_pc (zexception_handler (!zcur_privilege, (ZCTL_TRAP zt), !zPC)))

and zplatform_wfi (() : (unit)) : unit = sail_call (fun r ->
  begin
    Platform.cancel_reservation ();
    (if (zz8operatorz0zI_uz9 (!zmtime, !zmtimecmp)) then (begin
      (zmtime := !zmtimecmp);
      (zmcycle := !zmtimecmp)
    end) else ())
  end)

and zis_aligned_addr ((zaddr, zwidth) : ((bit) list * Big_int.num)) : bool = sail_call (fun r ->
  eq_int ((modulus ((uint zaddr), zwidth)), Big_int.zero))

and zread_kind_of_flags ((zaq, zrl, zres) : (bool * bool * bool)) : (zread_kind) zoption = sail_call (fun r ->
  begin
    match ((fun (v0, v1, v2) -> (v2, v1, v0)) (zres, zrl, zaq)) with
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, false)) && (eq_bool (zp1z3, false))) && (eq_bool (zp0z3, false))) ->
      ZSome ZRead_plain
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, false)) && (eq_bool (zp1z3, false))) && (eq_bool (zp0z3, true))) ->
      ZSome ZRead_RISCV_acquire
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, false)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, true))) ->
      ZSome ZRead_RISCV_strong_acquire
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, true)) && (eq_bool (zp1z3, false))) && (eq_bool (zp0z3, false))) ->
      ZSome ZRead_RISCV_reserved
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, true)) && (eq_bool (zp1z3, false))) && (eq_bool (zp0z3, true))) ->
      ZSome ZRead_RISCV_reserved_acquire
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, true)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, true))) ->
      ZSome ZRead_RISCV_reserved_strong_acquire
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, false)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, false))) ->
      ZNone ()
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, true)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, false))) ->
      ZNone ()
  end)

and zphys_mem_read ((zt, zpaddr, zwidth, zaq, zrl, zres, zmeta) : ((zext_access_type) zAccessType * (bit) list * Big_int.num * bool * bool * bool * bool)) : (((bit) list * bool)) zMemoryOpResult = sail_call (fun r ->
  let zresult = (begin
    match (zread_kind_of_flags (zaq, zrl, zres)) with
    | ZSome (zrk) -> ZSome (zread_ram (zrk, zpaddr, zwidth, zmeta))
    | ZNone (()) -> ZNone ()
  end) in
  begin
    match ((fun (v0, v1) -> (v1, v0)) (zresult, zt)) with
    | (ZExecute (()), ZNone (())) -> ZMemException (ZE_Fetch_Access_Fault ())
    | (ZRead (ZData), ZNone (())) -> ZMemException (ZE_Load_Access_Fault ())
    | (_, ZNone (())) -> ZMemException (ZE_SAMO_Access_Fault ())
    | (_, ZSome ((zv, zm))) ->
      begin
        (if (Platform.get_config_print_mem ()) then (Platform.print_mem_access (concat_str ("mem[", (concat_str ((zaccessType_to_str zt), (concat_str (",", (concat_str ((string_of_bits zpaddr), (concat_str ("] -> ", (string_of_bits zv)))))))))))) else ());
        ZMemValue ((fun (v0, v1) -> (v1, v0)) (zm, zv))
      end
  end)

and zchecked_mem_read ((zt, zpaddr, zwidth, zaq, zrl, zres, zmeta) : ((zext_access_type) zAccessType * (bit) list * Big_int.num * bool * bool * bool * bool)) : (((bit) list * bool)) zMemoryOpResult = sail_call (fun r ->
  (if (zwithin_mmio_readable (zpaddr, zwidth)) then (zMemoryOpResult_add_meta ((zmmio_read (zt, zpaddr, zwidth)), zdefault_meta)) else ((if (zwithin_phys_mem (zpaddr, zwidth)) then (begin
    match (zext_check_phys_mem_read (zt, zpaddr, zwidth, zaq, zrl, zres, zmeta)) with
    | ZExt_PhysAddr_OK (()) ->
      zphys_mem_read (zt, zpaddr, zwidth, zaq, zrl, zres, zmeta)
    | ZExt_PhysAddr_Error (ze) -> ZMemException ze
  end) else (begin
    match zt with
    | ZExecute (()) -> ZMemException (ZE_Fetch_Access_Fault ())
    | ZRead (ZData) -> ZMemException (ZE_Load_Access_Fault ())
    | _ -> ZMemException (ZE_SAMO_Access_Fault ())
  end)))))

and zpmp_mem_read ((zt, zp, zpaddr, zwidth, zaq, zrl, zres, zmeta) : ((zext_access_type) zAccessType * zPrivilege * (bit) list * Big_int.num * bool * bool * bool * bool)) : (((bit) list * bool)) zMemoryOpResult = sail_call (fun r ->
  (if (eq_int ((Platform.pmp_count ()), Big_int.zero)) then (zchecked_mem_read (zt, zpaddr, zwidth, zaq, zrl, zres, zmeta)) else (begin
    match (zpmpCheck (zpaddr, zwidth, zt, zp)) with
    | ZNone (()) ->
      zchecked_mem_read (zt, zpaddr, zwidth, zaq, zrl, zres, zmeta)
    | ZSome (ze) -> ZMemException ze
  end)))

and zrvfi_read ((zaddr, zwidth, zresult) : ((bit) list * Big_int.num * (((bit) list * bool)) zMemoryOpResult)) : unit = sail_call (fun r ->
  ())

and zmem_read_priv_meta ((ztyp, zpriv, zpaddr, zwidth, zaq, zrl, zres, zmeta) : ((zext_access_type) zAccessType * zPrivilege * (bit) list * Big_int.num * bool * bool * bool * bool)) : (((bit) list * bool)) zMemoryOpResult = sail_call (fun r ->
  let zresult = ((if ((zaq || zres) && (znot (zis_aligned_addr (zpaddr, zwidth)))) then (ZMemException (ZE_Load_Addr_Align ())) else (begin
    match ((fun (v0, v1, v2) -> (v2, v1, v0)) (zres, zrl, zaq)) with
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, false)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, false))) ->
      raise (ZError_not_implemented "load.rl")
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, true)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, false))) ->
      raise (ZError_not_implemented "lr.rl")
    | (_, _, _) ->
      zpmp_mem_read (ztyp, zpriv, zpaddr, zwidth, zaq, zrl, zres, zmeta)
  end))) in
  begin zrvfi_read (zpaddr, zwidth, zresult); zresult end)

and zmem_read_meta ((ztyp, zpaddr, zwidth, zaq, zrl, zres, zmeta) : ((zext_access_type) zAccessType * (bit) list * Big_int.num * bool * bool * bool * bool)) : (((bit) list * bool)) zMemoryOpResult = sail_call (fun r ->
  zmem_read_priv_meta (ztyp, (zeffectivePrivilege (ztyp, !zmstatus, !zcur_privilege)), zpaddr, zwidth, zaq, zrl, zres, zmeta))

and zmem_read_priv ((ztyp, zpriv, zpaddr, zwidth, zaq, zrl, zres) : ((zext_access_type) zAccessType * zPrivilege * (bit) list * Big_int.num * bool * bool * bool)) : ((bit) list) zMemoryOpResult = sail_call (fun r ->
  zMemoryOpResult_drop_meta (zmem_read_priv_meta (ztyp, zpriv, zpaddr, zwidth, zaq, zrl, zres, false)))

and zmem_read ((ztyp, zpaddr, zwidth, zaq, zrel, zres) : ((zext_access_type) zAccessType * (bit) list * Big_int.num * bool * bool * bool)) : ((bit) list) zMemoryOpResult = sail_call (fun r ->
  zmem_read_priv (ztyp, (zeffectivePrivilege (ztyp, !zmstatus, !zcur_privilege)), zpaddr, zwidth, zaq, zrel, zres))

and zmem_write_ea ((zaddr, zwidth, zaq, zrl, zcon) : ((bit) list * Big_int.num * bool * bool * bool)) : (unit) zMemoryOpResult = sail_call (fun r ->
  (if ((zrl || zcon) && (znot (zis_aligned_addr (zaddr, zwidth)))) then (ZMemException (ZE_SAMO_Addr_Align ())) else (begin
    match ((fun (v0, v1, v2) -> (v2, v1, v0)) (zcon, zrl, zaq)) with
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, false)) && (eq_bool (zp1z3, false))) && (eq_bool (zp0z3, false))) ->
      ZMemValue (zwrite_ram_ea (ZWrite_plain, zaddr, zwidth))
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, false)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, false))) ->
      ZMemValue (zwrite_ram_ea (ZWrite_RISCV_release, zaddr, zwidth))
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, true)) && (eq_bool (zp1z3, false))) && (eq_bool (zp0z3, false))) ->
      ZMemValue (zwrite_ram_ea (ZWrite_RISCV_conditional, zaddr, zwidth))
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, true)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, false))) ->
      ZMemValue (zwrite_ram_ea (ZWrite_RISCV_conditional_release, zaddr, zwidth))
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, false)) && (eq_bool (zp1z3, false))) && (eq_bool (zp0z3, true))) ->
      raise (ZError_not_implemented "store.aq")
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, false)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, true))) ->
      ZMemValue (zwrite_ram_ea (ZWrite_RISCV_strong_release, zaddr, zwidth))
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, true)) && (eq_bool (zp1z3, false))) && (eq_bool (zp0z3, true))) ->
      raise (ZError_not_implemented "sc.aq")
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, true)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, true))) ->
      ZMemValue (zwrite_ram_ea (ZWrite_RISCV_conditional_strong_release, zaddr, zwidth))
  end)))

and zrvfi_write ((zaddr, zwidth, zvalue, zmeta, zresult) : ((bit) list * Big_int.num * (bit) list * bool * (bool) zMemoryOpResult)) : unit = sail_call (fun r ->
  ())

and zphys_mem_write ((zwk, zpaddr, zwidth, zdata, zmeta) : (zwrite_kind * (bit) list * Big_int.num * (bit) list * bool)) : (bool) zMemoryOpResult = sail_call (fun r ->
  let zresult = (ZMemValue (zwrite_ram (zwk, zpaddr, zwidth, zdata, zmeta))) in
  begin
    (if (Platform.get_config_print_mem ()) then (Platform.print_mem_access (concat_str ("mem[", (concat_str ((string_of_bits zpaddr), (concat_str ("] <- ", (string_of_bits zdata)))))))) else ());
    zresult
  end)

and zchecked_mem_write ((zwk, zpaddr, zwidth, zdata, zmeta) : (zwrite_kind * (bit) list * Big_int.num * (bit) list * bool)) : (bool) zMemoryOpResult = sail_call (fun r ->
  (if (zwithin_mmio_writable (zpaddr, zwidth)) then (zmmio_write (zpaddr, zwidth, zdata)) else ((if (zwithin_phys_mem (zpaddr, zwidth)) then (begin
    match (zext_check_phys_mem_write (zwk, zpaddr, zwidth, zdata, zmeta)) with
    | ZExt_PhysAddr_OK (()) ->
      zphys_mem_write (zwk, zpaddr, zwidth, zdata, zmeta)
    | ZExt_PhysAddr_Error (ze) -> ZMemException ze
  end) else (ZMemException (ZE_SAMO_Access_Fault ()))))))

and zpmp_mem_write ((zwk, zpaddr, zwidth, zdata, ztyp, zpriv, zmeta) : (zwrite_kind * (bit) list * Big_int.num * (bit) list * (zext_access_type) zAccessType * zPrivilege * bool)) : (bool) zMemoryOpResult = sail_call (fun r ->
  (if (eq_int ((Platform.pmp_count ()), Big_int.zero)) then (zchecked_mem_write (zwk, zpaddr, zwidth, zdata, zmeta)) else (begin
    match (zpmpCheck (zpaddr, zwidth, ztyp, zpriv)) with
    | ZNone (()) -> zchecked_mem_write (zwk, zpaddr, zwidth, zdata, zmeta)
    | ZSome (ze) -> ZMemException ze
  end)))

and zmem_write_value_priv_meta ((zpaddr, zwidth, zvalue, ztyp, zpriv, zmeta, zaq, zrl, zcon) : ((bit) list * Big_int.num * (bit) list * (zext_access_type) zAccessType * zPrivilege * bool * bool * bool * bool)) : (bool) zMemoryOpResult = sail_call (fun r ->
  (if ((zrl || zcon) && (znot (zis_aligned_addr (zpaddr, zwidth)))) then (ZMemException (ZE_SAMO_Addr_Align ())) else (let zwk = (begin
    match ((fun (v0, v1, v2) -> (v2, v1, v0)) (zcon, zrl, zaq)) with
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, false)) && (eq_bool (zp1z3, false))) && (eq_bool (zp0z3, false))) ->
      ZWrite_plain
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, false)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, false))) ->
      ZWrite_RISCV_release
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, true)) && (eq_bool (zp1z3, false))) && (eq_bool (zp0z3, false))) ->
      ZWrite_RISCV_conditional
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, true)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, false))) ->
      ZWrite_RISCV_conditional_release
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, false)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, true))) ->
      ZWrite_RISCV_strong_release
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, true)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, true))) ->
      ZWrite_RISCV_conditional_strong_release
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, false)) && (eq_bool (zp1z3, false))) && (eq_bool (zp0z3, true))) ->
      raise (ZError_not_implemented "store.aq")
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, true)) && (eq_bool (zp1z3, false))) && (eq_bool (zp0z3, true))) ->
      raise (ZError_not_implemented "sc.aq")
  end) in
  let zresult = (zpmp_mem_write (zwk, zpaddr, zwidth, zvalue, ztyp, zpriv, zmeta)) in
  begin zrvfi_write (zpaddr, zwidth, zvalue, zmeta, zresult); zresult end)))

and zmem_write_value_priv ((zpaddr, zwidth, zvalue, zpriv, zaq, zrl, zcon) : ((bit) list * Big_int.num * (bit) list * zPrivilege * bool * bool * bool)) : (bool) zMemoryOpResult = sail_call (fun r ->
  zmem_write_value_priv_meta (zpaddr, zwidth, zvalue, (ZWrite zdefault_write_acc), zpriv, zdefault_meta, zaq, zrl, zcon))

and zmem_write_value_meta ((zpaddr, zwidth, zvalue, zext_acc, zmeta, zaq, zrl, zcon) : ((bit) list * Big_int.num * (bit) list * zext_access_type * bool * bool * bool * bool)) : (bool) zMemoryOpResult = sail_call (fun r ->
  let ztyp = (ZWrite zext_acc) in
  let zep = (zeffectivePrivilege (ztyp, !zmstatus, !zcur_privilege)) in
  zmem_write_value_priv_meta (zpaddr, zwidth, zvalue, ztyp, zep, zmeta, zaq, zrl, zcon))

and zmem_write_value ((zpaddr, zwidth, zvalue, zaq, zrl, zcon) : ((bit) list * Big_int.num * (bit) list * bool * bool * bool)) : (bool) zMemoryOpResult = sail_call (fun r ->
  zmem_write_value_meta (zpaddr, zwidth, zvalue, zdefault_write_acc, zdefault_meta, zaq, zrl, zcon))

and zmem_read_cap ((zaddr, zaq, zrl, zres) : ((bit) list * bool * bool * bool)) : (ZCapability.zCapability) zMemoryOpResult = sail_call (fun r ->
  let zresult = (zmem_read_meta ((ZRead ZData), zaddr, zcap_sizze, zaq, zrl, zres, true)) in
  begin
    match zresult with
    | ZMemValue ((zv, ztag)) -> ZMemValue (zcapBitsToCapability (ztag, zv))
    | ZMemException (ze) -> ZMemException ze
  end)

and zmem_read_cap_revoked (zaddr : ((bit) list)) : bool = sail_call (fun r ->
  let zram_base = (Platform.dram_base ()) in
  let zrevocation_bits_base = [B1; B0; B0; B0; B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0] in
  (if (zz8operatorz0zI_uz9 (zaddr, zram_base)) then (false) else (let zrevocation_byte_offset = (shiftr ((sub_vec (zaddr, zram_base)), (Big_int.of_int (6)))) in
  let zbyte = (Platform.read_mem (ZRead_plain, (Big_int.of_int (32)), (add_vec (zrevocation_bits_base, zrevocation_byte_offset)), (Big_int.of_int (1)))) in
  r.return (zbit_to_bool (access (zbyte, (uint (subrange (zaddr, (Big_int.of_int (5)), (Big_int.of_int (3)))))))))))

and zmem_write_ea_cap ((zaddr, zaq, zrl, zcon) : ((bit) list * bool * bool * bool)) : (unit) zMemoryOpResult = sail_call (fun r ->
  (if (not (zis_aligned_addr (zaddr, zcap_sizze))) then (ZMemException (ZE_SAMO_Addr_Align ())) else (ZMemValue (Platform.write_mem_ea (ZWrite_plain, (Big_int.of_int (32)), zaddr, zcap_sizze)))))

and zmem_write_cap ((zaddr, zcap, zaq, zrl, zcon) : ((bit) list * ZCapability.zCapability * bool * bool * bool)) : (bool) zMemoryOpResult = sail_call (fun r ->
  let zcap_bits = (zcapToBits zcap) in
  begin
    assert ((fun (x, y) -> x = y) ((zcapBitsToCapability ((zcap.ztag), zcap_bits)), zcap));
    zmem_write_value_meta (zaddr, zcap_sizze, zcap_bits, ZCap, (zcap.ztag), zaq, zrl, zcon)
  end)

type  zpteAttribs = zbits;;

let string_of_zpteAttribs (gs7319 :  zpteAttribs) = string_of_zbits gs7319;;

let rec zundefined_PTE_Bits (() : (unit)) : ZPTE_Bits.zPTE_Bits = sail_call (fun r ->
  {ZPTE_Bits.zbits = undefined_bitvector (Big_int.of_int (8))})

and zMk_PTE_Bits (zv : ((bit) list)) : ZPTE_Bits.zPTE_Bits = sail_call (fun r ->
  {ZPTE_Bits.zbits = zv})

type  zextPte = zbits;;

let string_of_zextPte (gs7328 :  zextPte) = string_of_zbits gs7328;;

let rec zundefined_Ext_PTE_Bits (() : (unit)) : ZExt_PTE_Bits.zExt_PTE_Bits = sail_call (fun r ->
  {ZExt_PTE_Bits.zbits = undefined_bitvector (Big_int.of_int (10))})

and zMk_Ext_PTE_Bits (zv : ((bit) list)) : ZExt_PTE_Bits.zExt_PTE_Bits = sail_call (fun r ->
  {ZExt_PTE_Bits.zbits = zv})

and z_get_Ext_PTE_Bits_CapRead (zv : (ZExt_PTE_Bits.zExt_PTE_Bits)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (8)), (Big_int.of_int (8))))

and z_update_Ext_PTE_Bits_CapRead ((zv, zx) : (ZExt_PTE_Bits.zExt_PTE_Bits * (bit) list)) : ZExt_PTE_Bits.zExt_PTE_Bits = sail_call (fun r ->
  {zv with ZExt_PTE_Bits.zbits = update_subrange ((zv.zbits), (Big_int.of_int (8)), (Big_int.of_int (8)), zx)})

and z_set_Ext_PTE_Bits_CapRead ((zr_ref, zv) : ((ZExt_PTE_Bits.zExt_PTE_Bits) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Ext_PTE_Bits_CapRead (zr, zv))))

and z_get_Ext_PTE_Bits_CapWrite (zv : (ZExt_PTE_Bits.zExt_PTE_Bits)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (9)), (Big_int.of_int (9))))

and z_update_Ext_PTE_Bits_CapWrite ((zv, zx) : (ZExt_PTE_Bits.zExt_PTE_Bits * (bit) list)) : ZExt_PTE_Bits.zExt_PTE_Bits = sail_call (fun r ->
  {zv with ZExt_PTE_Bits.zbits = update_subrange ((zv.zbits), (Big_int.of_int (9)), (Big_int.of_int (9)), zx)})

and z_set_Ext_PTE_Bits_CapWrite ((zr_ref, zv) : ((ZExt_PTE_Bits.zExt_PTE_Bits) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_Ext_PTE_Bits_CapWrite (zr, zv))))

let zdefault_sv32_ext_pte = [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0];;

let rec zisPTEPtr ((zp, zext) : ((bit) list * (bit) list)) : bool = sail_call (fun r ->
  let za = (zMk_PTE_Bits zp) in
  (eq_list ((z_get_PTE_Bits_R za), [B0])) && ((eq_list ((z_get_PTE_Bits_W za), [B0])) && (eq_list ((z_get_PTE_Bits_X za), [B0]))))

and zisInvalidPTE ((zp, zext) : ((bit) list * (bit) list)) : bool = sail_call (fun r ->
  let za = (zMk_PTE_Bits zp) in
  (eq_list ((z_get_PTE_Bits_V za), [B0])) || ((eq_list ((z_get_PTE_Bits_W za), [B1])) && (eq_list ((z_get_PTE_Bits_R za), [B0]))))

type  zPTE_Check =
  | ZPTE_Check_Success of Zext_ptw.zext_ptw
  | ZPTE_Check_Failure of (Zext_ptw.zext_ptw * zext_ptw_fail);;

let string_of_zPTE_Check _ = "VARIANT";;

let rec zcheckPTEPermission ((zac, zpriv, zmxr, zdo_sum, zp, zext, zext_ptw) : ((zext_access_type) zAccessType * zPrivilege * bool * bool * ZPTE_Bits.zPTE_Bits * (bit) list * Zext_ptw.zext_ptw)) : zPTE_Check = sail_call (fun r ->
  let zbase_succ = (begin
    match ((fun (v0, v1) -> (v1, v0)) (zpriv, zac)) with
    | (ZRead (_), ZUser) ->
      (eq_list ((z_get_PTE_Bits_U zp), [B1])) && ((eq_list ((z_get_PTE_Bits_R zp), [B1])) || ((eq_list ((z_get_PTE_Bits_X zp), [B1])) && zmxr))
    | (ZWrite (_), ZUser) ->
      (eq_list ((z_get_PTE_Bits_U zp), [B1])) && (eq_list ((z_get_PTE_Bits_W zp), [B1]))
    | (ZReadWrite (_), ZUser) ->
      (eq_list ((z_get_PTE_Bits_U zp), [B1])) && ((eq_list ((z_get_PTE_Bits_W zp), [B1])) && ((eq_list ((z_get_PTE_Bits_R zp), [B1])) || ((eq_list ((z_get_PTE_Bits_X zp), [B1])) && zmxr)))
    | (ZExecute (()), ZUser) ->
      (eq_list ((z_get_PTE_Bits_U zp), [B1])) && (eq_list ((z_get_PTE_Bits_X zp), [B1]))
    | (ZRead (_), ZSupervisor) ->
      ((eq_list ((z_get_PTE_Bits_U zp), [B0])) || zdo_sum) && ((eq_list ((z_get_PTE_Bits_R zp), [B1])) || ((eq_list ((z_get_PTE_Bits_X zp), [B1])) && zmxr))
    | (ZWrite (_), ZSupervisor) ->
      ((eq_list ((z_get_PTE_Bits_U zp), [B0])) || zdo_sum) && (eq_list ((z_get_PTE_Bits_W zp), [B1]))
    | (ZReadWrite (_), ZSupervisor) ->
      ((eq_list ((z_get_PTE_Bits_U zp), [B0])) || zdo_sum) && ((eq_list ((z_get_PTE_Bits_W zp), [B1])) && ((eq_list ((z_get_PTE_Bits_R zp), [B1])) || ((eq_list ((z_get_PTE_Bits_X zp), [B1])) && zmxr)))
    | (ZExecute (()), ZSupervisor) ->
      (eq_list ((z_get_PTE_Bits_U zp), [B0])) && (eq_list ((z_get_PTE_Bits_X zp), [B1]))
    | (_, ZMachine) ->
      zinternal_error ("src/cheri_pte.sail", (Big_int.of_int (139)), "m-mode mem perm check")
  end) in
  let ze = (zMk_Ext_PTE_Bits zext) in
  let zptw_lc = ((if (eq_list ((z_get_Ext_PTE_Bits_CapRead ze), [B1])) then ZPTW_LC_OK else ZPTW_LC_CLEAR)) in
  let zptw_sc = ((if (eq_list ((z_get_Ext_PTE_Bits_CapWrite ze), [B1])) then ZPTW_SC_OK else ZPTW_SC_TRAP)) in
  let (zsucc, zext_ptwz7) = (begin
    match ((fun (v0, v1) -> (v1, v0)) (zac, zbase_succ)) with
    | (zp0z3, _) when (eq_bool (zp0z3, false)) ->
      ((fun (v0, v1) -> (v1, v0)) (zinit_ext_ptw, false))
    | (zp0z3, ZRead (ZCap)) when (eq_bool (zp0z3, true)) ->
      ((fun (v0, v1) -> (v1, v0)) (zext_ptw_lc_join (zext_ptw, zptw_lc), true))
    | (zp0z3, ZWrite (ZCap)) when (eq_bool (zp0z3, true)) ->
      ((fun (v0, v1) -> (v1, v0)) (zext_ptw_sc_join (zext_ptw, zptw_sc), true))
    | (zp0z3, ZReadWrite ((ZData, ZCap))) when (eq_bool (zp0z3, true)) ->
      ((fun (v0, v1) -> (v1, v0)) (zext_ptw_sc_join (zext_ptw, zptw_sc), true))
    | (zp0z3, ZReadWrite ((ZCap, ZData))) when (eq_bool (zp0z3, true)) ->
      ((fun (v0, v1) -> (v1, v0)) (zext_ptw_lc_join (zext_ptw, zptw_lc), true))
    | (zp0z3, ZReadWrite ((ZCap, ZCap))) when (eq_bool (zp0z3, true)) ->
      ((fun (v0, v1) -> (v1, v0)) (zext_ptw_sc_join ((zext_ptw_lc_join (zext_ptw, zptw_lc)), zptw_sc), true))
    | (zp0z3, ZRead (ZData)) when (eq_bool (zp0z3, true)) ->
      ((fun (v0, v1) -> (v1, v0)) (zext_ptw, true))
    | (zp0z3, ZWrite (ZData)) when (eq_bool (zp0z3, true)) ->
      ((fun (v0, v1) -> (v1, v0)) (zext_ptw, true))
    | (zp0z3, ZReadWrite ((ZData, ZData))) when (eq_bool (zp0z3, true)) ->
      ((fun (v0, v1) -> (v1, v0)) (zext_ptw, true))
    | (zp0z3, ZExecute (())) when (eq_bool (zp0z3, true)) ->
      ((fun (v0, v1) -> (v1, v0)) (zext_ptw, true))
  end) in
  (if zsucc then (ZPTE_Check_Success zext_ptwz7) else (ZPTE_Check_Failure ((fun (v0, v1) -> (v1, v0)) ((if ((fun (x, y) -> x = y) ((zext_ptwz7.zptw_sc), ZPTW_SC_TRAP)) then ZEPTWF_CAP_ERR else ZEPTWF_NO_PERM), zext_ptwz7)))))

and zupdate_PTE_Bits ((zp, za, zext) : (ZPTE_Bits.zPTE_Bits * (zext_access_type) zAccessType * (bit) list)) : ((ZPTE_Bits.zPTE_Bits * (bit) list)) zoption = sail_call (fun r ->
  let zupdate_d = ((eq_list ((z_get_PTE_Bits_D zp), [B0])) && (begin
    match za with
    | ZExecute (()) -> false
    | ZRead (_) -> false
    | ZWrite (_) -> true
    | ZReadWrite ((_, _)) -> true
  end)) in
  let zupdate_a = (eq_list ((z_get_PTE_Bits_A zp), [B0])) in
  (if (zupdate_d || zupdate_a) then (let znp = (z_update_PTE_Bits_A (zp, [B1])) in
  let znp = ((if zupdate_d then (z_update_PTE_Bits_D (znp, [B1])) else znp)) in
  ZSome ((fun (v0, v1) -> (v1, v0)) (zext, znp))) else (ZNone ())))

and zext_get_ptw_error (zeptwf : (zext_ptw_fail)) : zPTW_Error = sail_call (fun r ->
  begin
    match zeptwf with
    | ZEPTWF_NO_PERM -> ZPTW_No_Permission ()
    | ZEPTWF_CAP_ERR -> ZPTW_Ext_Error ZAT_CAP_ERR
  end)

and ztranslationException ((za, zf) : ((zext_access_type) zAccessType * zPTW_Error)) : zExceptionType = sail_call (fun r ->
  let ze = (begin
    match ((fun (v0, v1) -> (v1, v0)) (zf, za)) with
    | (ZWrite (ZCap), ZPTW_Ext_Error (ZAT_CAP_ERR)) ->
      ZE_Extension ZEXC_SAMO_CAP_PAGE_FAULT
    | (ZReadWrite ((ZCap, _)), ZPTW_Ext_Error (ZAT_CAP_ERR)) ->
      ZE_Extension ZEXC_SAMO_CAP_PAGE_FAULT
    | (ZReadWrite ((_, ZCap)), ZPTW_Ext_Error (ZAT_CAP_ERR)) ->
      ZE_Extension ZEXC_SAMO_CAP_PAGE_FAULT
    | (_, ZPTW_Ext_Error (_)) ->
      zinternal_error ("src/cheri_ptw.sail", (Big_int.of_int (105)), "Unexpected PTW Extension Error")
    | (ZReadWrite ((_, _)), ZPTW_Access (())) -> ZE_SAMO_Access_Fault ()
    | (ZReadWrite ((_, _)), _) -> ZE_SAMO_Page_Fault ()
    | (ZRead (_), ZPTW_Access (())) -> ZE_Load_Access_Fault ()
    | (ZRead (_), _) -> ZE_Load_Page_Fault ()
    | (ZWrite (_), ZPTW_Access (())) -> ZE_SAMO_Access_Fault ()
    | (ZWrite (_), _) -> ZE_SAMO_Page_Fault ()
    | (ZExecute (()), ZPTW_Access (())) -> ZE_Fetch_Access_Fault ()
    | (ZExecute (()), _) -> ZE_Fetch_Page_Fault ()
  end) in
  ze)

let zPAGESIZE_BITS = (Big_int.of_int (12));;

type  zvaddr32 = zbits;;

let string_of_zvaddr32 (gs7400 :  zvaddr32) = string_of_zbits gs7400;;

type  zpaddr32 = zbits;;

let string_of_zpaddr32 (gs7401 :  zpaddr32) = string_of_zbits gs7401;;

type  zpte32 = zbits;;

let string_of_zpte32 (gs7402 :  zpte32) = string_of_zbits gs7402;;

type  zasid32 = zbits;;

let string_of_zasid32 (gs7403 :  zasid32) = string_of_zbits gs7403;;

let rec zcurAsid32 (zsatp : ((bit) list)) : (bit) list = sail_call (fun r ->
  let zs = (zMk_Satp32 zsatp) in
  z_get_Satp32_Asid zs)

and zcurPTB32 (zsatp : ((bit) list)) : (bit) list = sail_call (fun r ->
  let zs = (zMk_Satp32 zsatp) in
  shiftl ((zzzero_extend ((Big_int.of_int (34)), (z_get_Satp32_PPN zs))), zPAGESIZE_BITS))

let zSV32_LEVEL_BITS = (Big_int.of_int (10));;

let zSV32_LEVELS = (Big_int.of_int (2));;

let zPTE32_LOG_SIZE = (Big_int.of_int (2));;

let zPTE32_SIZE = (Big_int.of_int (4));;

let rec zundefined_SV32_Vaddr (() : (unit)) : ZSV32_Vaddr.zSV32_Vaddr = sail_call (fun r ->
  {ZSV32_Vaddr.zbits = undefined_bitvector (Big_int.of_int (32))})

and zMk_SV32_Vaddr (zv : ((bit) list)) : ZSV32_Vaddr.zSV32_Vaddr = sail_call (fun r ->
  {ZSV32_Vaddr.zbits = zv})

and z_get_SV32_Vaddr_PgOfs (zv : (ZSV32_Vaddr.zSV32_Vaddr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (11)), Big_int.zero))

and z_update_SV32_Vaddr_PgOfs ((zv, zx) : (ZSV32_Vaddr.zSV32_Vaddr * (bit) list)) : ZSV32_Vaddr.zSV32_Vaddr = sail_call (fun r ->
  {zv with ZSV32_Vaddr.zbits = update_subrange ((zv.zbits), (Big_int.of_int (11)), Big_int.zero, zx)})

and z_update_SV32_Paddr_PgOfs ((zv, zx) : (ZSV32_Paddr.zSV32_Paddr * (bit) list)) : ZSV32_Paddr.zSV32_Paddr = sail_call (fun r ->
  {zv with ZSV32_Paddr.zbits = update_subrange ((zv.zbits), (Big_int.of_int (11)), Big_int.zero, zx)})

and z_update_SV39_Paddr_PgOfs ((zv, zx) : (ZSV39_Paddr.zSV39_Paddr * (bit) list)) : ZSV39_Paddr.zSV39_Paddr = sail_call (fun r ->
  {zv with ZSV39_Paddr.zbits = update_subrange ((zv.zbits), (Big_int.of_int (11)), Big_int.zero, zx)})

and z_update_SV39_Vaddr_PgOfs ((zv, zx) : (ZSV39_Vaddr.zSV39_Vaddr * (bit) list)) : ZSV39_Vaddr.zSV39_Vaddr = sail_call (fun r ->
  {zv with ZSV39_Vaddr.zbits = update_subrange ((zv.zbits), (Big_int.of_int (11)), Big_int.zero, zx)})

and z_update_SV48_Paddr_PgOfs ((zv, zx) : (ZSV48_Paddr.zSV48_Paddr * (bit) list)) : ZSV48_Paddr.zSV48_Paddr = sail_call (fun r ->
  {zv with ZSV48_Paddr.zbits = update_subrange ((zv.zbits), (Big_int.of_int (11)), Big_int.zero, zx)})

and z_update_SV48_Vaddr_PgOfs ((zv, zx) : (ZSV48_Vaddr.zSV48_Vaddr * (bit) list)) : ZSV48_Vaddr.zSV48_Vaddr = sail_call (fun r ->
  {zv with ZSV48_Vaddr.zbits = update_subrange ((zv.zbits), (Big_int.of_int (11)), Big_int.zero, zx)})

and z_set_SV32_Vaddr_PgOfs ((zr_ref, zv) : ((ZSV32_Vaddr.zSV32_Vaddr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV32_Vaddr_PgOfs (zr, zv))))

and z_get_SV32_Paddr_PgOfs (zv : (ZSV32_Paddr.zSV32_Paddr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (11)), Big_int.zero))

and z_get_SV39_Paddr_PgOfs (zv : (ZSV39_Paddr.zSV39_Paddr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (11)), Big_int.zero))

and z_get_SV39_Vaddr_PgOfs (zv : (ZSV39_Vaddr.zSV39_Vaddr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (11)), Big_int.zero))

and z_get_SV48_Paddr_PgOfs (zv : (ZSV48_Paddr.zSV48_Paddr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (11)), Big_int.zero))

and z_get_SV48_Vaddr_PgOfs (zv : (ZSV48_Vaddr.zSV48_Vaddr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (11)), Big_int.zero))

and z_set_SV32_Paddr_PgOfs ((zr_ref, zv) : ((ZSV32_Paddr.zSV32_Paddr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV32_Paddr_PgOfs (zr, zv))))

and z_set_SV39_Paddr_PgOfs ((zr_ref, zv) : ((ZSV39_Paddr.zSV39_Paddr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV39_Paddr_PgOfs (zr, zv))))

and z_set_SV39_Vaddr_PgOfs ((zr_ref, zv) : ((ZSV39_Vaddr.zSV39_Vaddr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV39_Vaddr_PgOfs (zr, zv))))

and z_set_SV48_Paddr_PgOfs ((zr_ref, zv) : ((ZSV48_Paddr.zSV48_Paddr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV48_Paddr_PgOfs (zr, zv))))

and z_set_SV48_Vaddr_PgOfs ((zr_ref, zv) : ((ZSV48_Vaddr.zSV48_Vaddr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV48_Vaddr_PgOfs (zr, zv))))

and z_get_SV32_Vaddr_VPNi (zv : (ZSV32_Vaddr.zSV32_Vaddr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (31)), (Big_int.of_int (12))))

and z_update_SV32_Vaddr_VPNi ((zv, zx) : (ZSV32_Vaddr.zSV32_Vaddr * (bit) list)) : ZSV32_Vaddr.zSV32_Vaddr = sail_call (fun r ->
  {zv with ZSV32_Vaddr.zbits = update_subrange ((zv.zbits), (Big_int.of_int (31)), (Big_int.of_int (12)), zx)})

and z_update_SV39_Vaddr_VPNi ((zv, zx) : (ZSV39_Vaddr.zSV39_Vaddr * (bit) list)) : ZSV39_Vaddr.zSV39_Vaddr = sail_call (fun r ->
  {zv with ZSV39_Vaddr.zbits = update_subrange ((zv.zbits), (Big_int.of_int (38)), (Big_int.of_int (12)), zx)})

and z_update_SV48_Vaddr_VPNi ((zv, zx) : (ZSV48_Vaddr.zSV48_Vaddr * (bit) list)) : ZSV48_Vaddr.zSV48_Vaddr = sail_call (fun r ->
  {zv with ZSV48_Vaddr.zbits = update_subrange ((zv.zbits), (Big_int.of_int (47)), (Big_int.of_int (12)), zx)})

and z_set_SV32_Vaddr_VPNi ((zr_ref, zv) : ((ZSV32_Vaddr.zSV32_Vaddr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV32_Vaddr_VPNi (zr, zv))))

and z_get_SV39_Vaddr_VPNi (zv : (ZSV39_Vaddr.zSV39_Vaddr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (38)), (Big_int.of_int (12))))

and z_get_SV48_Vaddr_VPNi (zv : (ZSV48_Vaddr.zSV48_Vaddr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (47)), (Big_int.of_int (12))))

and z_set_SV39_Vaddr_VPNi ((zr_ref, zv) : ((ZSV39_Vaddr.zSV39_Vaddr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV39_Vaddr_VPNi (zr, zv))))

and z_set_SV48_Vaddr_VPNi ((zr_ref, zv) : ((ZSV48_Vaddr.zSV48_Vaddr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV48_Vaddr_VPNi (zr, zv))))

and zundefined_SV32_Paddr (() : (unit)) : ZSV32_Paddr.zSV32_Paddr = sail_call (fun r ->
  {ZSV32_Paddr.zbits = undefined_bitvector (Big_int.of_int (34))})

and zMk_SV32_Paddr (zv : ((bit) list)) : ZSV32_Paddr.zSV32_Paddr = sail_call (fun r ->
  {ZSV32_Paddr.zbits = zv})

and z_get_SV32_Paddr_PPNi (zv : (ZSV32_Paddr.zSV32_Paddr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (33)), (Big_int.of_int (12))))

and z_update_SV32_Paddr_PPNi ((zv, zx) : (ZSV32_Paddr.zSV32_Paddr * (bit) list)) : ZSV32_Paddr.zSV32_Paddr = sail_call (fun r ->
  {zv with ZSV32_Paddr.zbits = update_subrange ((zv.zbits), (Big_int.of_int (33)), (Big_int.of_int (12)), zx)})

and z_update_SV32_PTE_PPNi ((zv, zx) : (ZSV32_PTE.zSV32_PTE * (bit) list)) : ZSV32_PTE.zSV32_PTE = sail_call (fun r ->
  {zv with ZSV32_PTE.zbits = update_subrange ((zv.zbits), (Big_int.of_int (31)), (Big_int.of_int (10)), zx)})

and z_update_SV39_PTE_PPNi ((zv, zx) : (ZSV39_PTE.zSV39_PTE * (bit) list)) : ZSV39_PTE.zSV39_PTE = sail_call (fun r ->
  {zv with ZSV39_PTE.zbits = update_subrange ((zv.zbits), (Big_int.of_int (53)), (Big_int.of_int (10)), zx)})

and z_update_SV39_Paddr_PPNi ((zv, zx) : (ZSV39_Paddr.zSV39_Paddr * (bit) list)) : ZSV39_Paddr.zSV39_Paddr = sail_call (fun r ->
  {zv with ZSV39_Paddr.zbits = update_subrange ((zv.zbits), (Big_int.of_int (55)), (Big_int.of_int (12)), zx)})

and z_update_SV48_PTE_PPNi ((zv, zx) : (ZSV48_PTE.zSV48_PTE * (bit) list)) : ZSV48_PTE.zSV48_PTE = sail_call (fun r ->
  {zv with ZSV48_PTE.zbits = update_subrange ((zv.zbits), (Big_int.of_int (53)), (Big_int.of_int (10)), zx)})

and z_update_SV48_Paddr_PPNi ((zv, zx) : (ZSV48_Paddr.zSV48_Paddr * (bit) list)) : ZSV48_Paddr.zSV48_Paddr = sail_call (fun r ->
  {zv with ZSV48_Paddr.zbits = update_subrange ((zv.zbits), (Big_int.of_int (55)), (Big_int.of_int (12)), zx)})

and z_set_SV32_Paddr_PPNi ((zr_ref, zv) : ((ZSV32_Paddr.zSV32_Paddr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV32_Paddr_PPNi (zr, zv))))

and z_get_SV32_PTE_PPNi (zv : (ZSV32_PTE.zSV32_PTE)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (31)), (Big_int.of_int (10))))

and z_get_SV39_PTE_PPNi (zv : (ZSV39_PTE.zSV39_PTE)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (53)), (Big_int.of_int (10))))

and z_get_SV39_Paddr_PPNi (zv : (ZSV39_Paddr.zSV39_Paddr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (55)), (Big_int.of_int (12))))

and z_get_SV48_PTE_PPNi (zv : (ZSV48_PTE.zSV48_PTE)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (53)), (Big_int.of_int (10))))

and z_get_SV48_Paddr_PPNi (zv : (ZSV48_Paddr.zSV48_Paddr)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (55)), (Big_int.of_int (12))))

and z_set_SV32_PTE_PPNi ((zr_ref, zv) : ((ZSV32_PTE.zSV32_PTE) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV32_PTE_PPNi (zr, zv))))

and z_set_SV39_PTE_PPNi ((zr_ref, zv) : ((ZSV39_PTE.zSV39_PTE) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV39_PTE_PPNi (zr, zv))))

and z_set_SV39_Paddr_PPNi ((zr_ref, zv) : ((ZSV39_Paddr.zSV39_Paddr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV39_Paddr_PPNi (zr, zv))))

and z_set_SV48_PTE_PPNi ((zr_ref, zv) : ((ZSV48_PTE.zSV48_PTE) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV48_PTE_PPNi (zr, zv))))

and z_set_SV48_Paddr_PPNi ((zr_ref, zv) : ((ZSV48_Paddr.zSV48_Paddr) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV48_Paddr_PPNi (zr, zv))))

and zundefined_SV32_PTE (() : (unit)) : ZSV32_PTE.zSV32_PTE = sail_call (fun r ->
  {ZSV32_PTE.zbits = undefined_bitvector (Big_int.of_int (32))})

and zMk_SV32_PTE (zv : ((bit) list)) : ZSV32_PTE.zSV32_PTE = sail_call (fun r ->
  {ZSV32_PTE.zbits = zv})

and z_get_SV32_PTE_BITS (zv : (ZSV32_PTE.zSV32_PTE)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (7)), Big_int.zero))

and z_update_SV32_PTE_BITS ((zv, zx) : (ZSV32_PTE.zSV32_PTE * (bit) list)) : ZSV32_PTE.zSV32_PTE = sail_call (fun r ->
  {zv with ZSV32_PTE.zbits = update_subrange ((zv.zbits), (Big_int.of_int (7)), Big_int.zero, zx)})

and z_update_SV39_PTE_BITS ((zv, zx) : (ZSV39_PTE.zSV39_PTE * (bit) list)) : ZSV39_PTE.zSV39_PTE = sail_call (fun r ->
  {zv with ZSV39_PTE.zbits = update_subrange ((zv.zbits), (Big_int.of_int (7)), Big_int.zero, zx)})

and z_update_SV48_PTE_BITS ((zv, zx) : (ZSV48_PTE.zSV48_PTE * (bit) list)) : ZSV48_PTE.zSV48_PTE = sail_call (fun r ->
  {zv with ZSV48_PTE.zbits = update_subrange ((zv.zbits), (Big_int.of_int (7)), Big_int.zero, zx)})

and z_set_SV32_PTE_BITS ((zr_ref, zv) : ((ZSV32_PTE.zSV32_PTE) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV32_PTE_BITS (zr, zv))))

and z_get_SV39_PTE_BITS (zv : (ZSV39_PTE.zSV39_PTE)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (7)), Big_int.zero))

and z_get_SV48_PTE_BITS (zv : (ZSV48_PTE.zSV48_PTE)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (7)), Big_int.zero))

and z_set_SV39_PTE_BITS ((zr_ref, zv) : ((ZSV39_PTE.zSV39_PTE) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV39_PTE_BITS (zr, zv))))

and z_set_SV48_PTE_BITS ((zr_ref, zv) : ((ZSV48_PTE.zSV48_PTE) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV48_PTE_BITS (zr, zv))))

and z_get_SV32_PTE_RSW (zv : (ZSV32_PTE.zSV32_PTE)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (9)), (Big_int.of_int (8))))

and z_update_SV32_PTE_RSW ((zv, zx) : (ZSV32_PTE.zSV32_PTE * (bit) list)) : ZSV32_PTE.zSV32_PTE = sail_call (fun r ->
  {zv with ZSV32_PTE.zbits = update_subrange ((zv.zbits), (Big_int.of_int (9)), (Big_int.of_int (8)), zx)})

and z_update_SV39_PTE_RSW ((zv, zx) : (ZSV39_PTE.zSV39_PTE * (bit) list)) : ZSV39_PTE.zSV39_PTE = sail_call (fun r ->
  {zv with ZSV39_PTE.zbits = update_subrange ((zv.zbits), (Big_int.of_int (9)), (Big_int.of_int (8)), zx)})

and z_update_SV48_PTE_RSW ((zv, zx) : (ZSV48_PTE.zSV48_PTE * (bit) list)) : ZSV48_PTE.zSV48_PTE = sail_call (fun r ->
  {zv with ZSV48_PTE.zbits = update_subrange ((zv.zbits), (Big_int.of_int (9)), (Big_int.of_int (8)), zx)})

and z_set_SV32_PTE_RSW ((zr_ref, zv) : ((ZSV32_PTE.zSV32_PTE) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV32_PTE_RSW (zr, zv))))

and z_get_SV39_PTE_RSW (zv : (ZSV39_PTE.zSV39_PTE)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (9)), (Big_int.of_int (8))))

and z_get_SV48_PTE_RSW (zv : (ZSV48_PTE.zSV48_PTE)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (9)), (Big_int.of_int (8))))

and z_set_SV39_PTE_RSW ((zr_ref, zv) : ((ZSV39_PTE.zSV39_PTE) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV39_PTE_RSW (zr, zv))))

and z_set_SV48_PTE_RSW ((zr_ref, zv) : ((ZSV48_PTE.zSV48_PTE) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV48_PTE_RSW (zr, zv))))

type  zpaddr64 = zbits;;

let string_of_zpaddr64 (gs7730 :  zpaddr64) = string_of_zbits gs7730;;

type  zpte64 = zbits;;

let string_of_zpte64 (gs7731 :  zpte64) = string_of_zbits gs7731;;

type  zasid64 = zbits;;

let string_of_zasid64 (gs7732 :  zasid64) = string_of_zbits gs7732;;

let rec zcurAsid64 (zsatp : ((bit) list)) : (bit) list = sail_call (fun r ->
  let zs = (zMk_Satp64 zsatp) in
  z_get_Satp64_Asid zs)

and zcurPTB64 (zsatp : ((bit) list)) : (bit) list = sail_call (fun r ->
  let zs = (zMk_Satp64 zsatp) in
  shiftl ((zzzero_extend ((Big_int.of_int (56)), (z_get_Satp64_PPN zs))), zPAGESIZE_BITS))

let zSV39_LEVEL_BITS = (Big_int.of_int (9));;

let zSV39_LEVELS = (Big_int.of_int (3));;

let zPTE39_LOG_SIZE = (Big_int.of_int (3));;

let zPTE39_SIZE = (Big_int.of_int (8));;

type  zvaddr39 = zbits;;

let string_of_zvaddr39 (gs7741 :  zvaddr39) = string_of_zbits gs7741;;

let rec zundefined_SV39_Vaddr (() : (unit)) : ZSV39_Vaddr.zSV39_Vaddr = sail_call (fun r ->
  {ZSV39_Vaddr.zbits = undefined_bitvector (Big_int.of_int (39))})

and zMk_SV39_Vaddr (zv : ((bit) list)) : ZSV39_Vaddr.zSV39_Vaddr = sail_call (fun r ->
  {ZSV39_Vaddr.zbits = zv})

and zundefined_SV39_Paddr (() : (unit)) : ZSV39_Paddr.zSV39_Paddr = sail_call (fun r ->
  {ZSV39_Paddr.zbits = undefined_bitvector (Big_int.of_int (56))})

and zMk_SV39_Paddr (zv : ((bit) list)) : ZSV39_Paddr.zSV39_Paddr = sail_call (fun r ->
  {ZSV39_Paddr.zbits = zv})

and zundefined_SV39_PTE (() : (unit)) : ZSV39_PTE.zSV39_PTE = sail_call (fun r ->
  {ZSV39_PTE.zbits = undefined_bitvector (Big_int.of_int (64))})

and zMk_SV39_PTE (zv : ((bit) list)) : ZSV39_PTE.zSV39_PTE = sail_call (fun r ->
  {ZSV39_PTE.zbits = zv})

and z_get_SV39_PTE_Ext (zv : (ZSV39_PTE.zSV39_PTE)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (63)), (Big_int.of_int (54))))

and z_update_SV39_PTE_Ext ((zv, zx) : (ZSV39_PTE.zSV39_PTE * (bit) list)) : ZSV39_PTE.zSV39_PTE = sail_call (fun r ->
  {zv with ZSV39_PTE.zbits = update_subrange ((zv.zbits), (Big_int.of_int (63)), (Big_int.of_int (54)), zx)})

and z_update_SV48_PTE_Ext ((zv, zx) : (ZSV48_PTE.zSV48_PTE * (bit) list)) : ZSV48_PTE.zSV48_PTE = sail_call (fun r ->
  {zv with ZSV48_PTE.zbits = update_subrange ((zv.zbits), (Big_int.of_int (63)), (Big_int.of_int (54)), zx)})

and z_set_SV39_PTE_Ext ((zr_ref, zv) : ((ZSV39_PTE.zSV39_PTE) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV39_PTE_Ext (zr, zv))))

and z_get_SV48_PTE_Ext (zv : (ZSV48_PTE.zSV48_PTE)) : (bit) list = sail_call (fun r ->
  subrange ((zv.zbits), (Big_int.of_int (63)), (Big_int.of_int (54))))

and z_set_SV48_PTE_Ext ((zr_ref, zv) : ((ZSV48_PTE.zSV48_PTE) ref * (bit) list)) : unit = sail_call (fun r ->
  let zr = (reg_deref zr_ref) in
  (zr_ref := (z_update_SV48_PTE_Ext (zr, zv))))

let zSV48_LEVEL_BITS = (Big_int.of_int (9));;

let zSV48_LEVELS = (Big_int.of_int (4));;

let zPTE48_LOG_SIZE = (Big_int.of_int (3));;

let zPTE48_SIZE = (Big_int.of_int (8));;

type  zvaddr48 = zbits;;

let string_of_zvaddr48 (gs7794 :  zvaddr48) = string_of_zbits gs7794;;

type  zpte48 = zbits;;

let string_of_zpte48 (gs7795 :  zpte48) = string_of_zbits gs7795;;

let rec zundefined_SV48_Vaddr (() : (unit)) : ZSV48_Vaddr.zSV48_Vaddr = sail_call (fun r ->
  {ZSV48_Vaddr.zbits = undefined_bitvector (Big_int.of_int (48))})

and zMk_SV48_Vaddr (zv : ((bit) list)) : ZSV48_Vaddr.zSV48_Vaddr = sail_call (fun r ->
  {ZSV48_Vaddr.zbits = zv})

and zundefined_SV48_Paddr (() : (unit)) : ZSV48_Paddr.zSV48_Paddr = sail_call (fun r ->
  {ZSV48_Paddr.zbits = undefined_bitvector (Big_int.of_int (56))})

and zMk_SV48_Paddr (zv : ((bit) list)) : ZSV48_Paddr.zSV48_Paddr = sail_call (fun r ->
  {ZSV48_Paddr.zbits = zv})

and zundefined_SV48_PTE (() : (unit)) : ZSV48_PTE.zSV48_PTE = sail_call (fun r ->
  {ZSV48_PTE.zbits = undefined_bitvector (Big_int.of_int (64))})

and zMk_SV48_PTE (zv : ((bit) list)) : ZSV48_PTE.zSV48_PTE = sail_call (fun r ->
  {ZSV48_PTE.zbits = zv})

type ('zpaddr, 'zpte) zPTW_Result =
  | ZPTW_Success of ('zpaddr * 'zpte * 'zpaddr * Big_int.num * bool * Zext_ptw.zext_ptw)
  | ZPTW_Failure of (zPTW_Error * Zext_ptw.zext_ptw);;

let string_of_zPTW_Result _ = "VARIANT";;

type ('zpaddr, 'zfailure) zTR_Result =
  | ZTR_Address of ('zpaddr * Zext_ptw.zext_ptw)
  | ZTR_Failure of ('zfailure * Zext_ptw.zext_ptw);;

let string_of_zTR_Result _ = "VARIANT";;

module ZTLB_Entry = struct
  type  zTLB_Entry = {
    zasid : zbits;
    zglobal : bool;
    zvAddr : zbits;
    zpAddr : zbits;
    zvMatchMask : zbits;
    zvAddrMask : zbits;
    zpte : zbits;
    zpteAddr : zbits;
    zage : zbits
  }
  end;;

let string_of_zTLB_Entry (gs7820 :  ZTLB_Entry.zTLB_Entry) =
  "{asid = " ^ string_of_zbits gs7820.ZTLB_Entry.zasid
  ^ ", global = " ^ string_of_zbool gs7820.ZTLB_Entry.zglobal
  ^ ", vAddr = " ^ string_of_zbits gs7820.ZTLB_Entry.zvAddr
  ^ ", pAddr = " ^ string_of_zbits gs7820.ZTLB_Entry.zpAddr
  ^ ", vMatchMask = " ^ string_of_zbits gs7820.ZTLB_Entry.zvMatchMask
  ^ ", vAddrMask = " ^ string_of_zbits gs7820.ZTLB_Entry.zvAddrMask
  ^ ", pte = " ^ string_of_zbits gs7820.ZTLB_Entry.zpte
  ^ ", pteAddr = " ^ string_of_zbits gs7820.ZTLB_Entry.zpteAddr
  ^ ", age = " ^ string_of_zbits gs7820.ZTLB_Entry.zage ^ "}";;

let rec zmake_TLB_Entry ((zasid, zglobal, zvAddr, zpAddr, zpte, zlevel, zpteAddr, zlevelBitSizze) : ((bit) list * bool * (bit) list * (bit) list * (bit) list * Big_int.num * (bit) list * Big_int.num)) : ZTLB_Entry.zTLB_Entry = sail_call (fun r ->
  let zshift = (add_int (zPAGESIZE_BITS, (mult (zlevel, zlevelBitSizze)))) in
  let zvAddrMask = (sub_vec_int ((shiftl ((xor_vec (zvAddr, (xor_vec (zvAddr, (zzzero_extend ((length zvAddr), [B1])))))), zshift)), (Big_int.of_int (1)))) in
  let zvMatchMask = (not_vec zvAddrMask) in
  {ZTLB_Entry.zasid = zasid;
  ZTLB_Entry.zglobal = zglobal;
  ZTLB_Entry.zpte = zpte;
  ZTLB_Entry.zpteAddr = zpteAddr;
  ZTLB_Entry.zvAddrMask = zvAddrMask;
  ZTLB_Entry.zvMatchMask = zvMatchMask;
  ZTLB_Entry.zvAddr = and_vec (zvAddr, zvMatchMask);
  ZTLB_Entry.zpAddr = shiftl ((shiftr (zpAddr, zshift)), zshift);
  ZTLB_Entry.zage = !zmcycle})

and zmatch_TLB_Entry ((zent, zasid, zvaddr) : (ZTLB_Entry.zTLB_Entry * (bit) list * (bit) list)) : bool = sail_call (fun r ->
  ((zent.zglobal) || (eq_list ((zent.zasid), zasid))) && (eq_list ((zent.zvAddr), (and_vec ((zent.zvMatchMask), zvaddr)))))

and zflush_TLB_Entry ((ze, zasid, zaddr) : (ZTLB_Entry.zTLB_Entry * ((bit) list) zoption * ((bit) list) zoption)) : bool = sail_call (fun r ->
  begin
    match ((fun (v0, v1) -> (v1, v0)) (zaddr, zasid)) with
    | (ZNone (()), ZNone (())) -> true
    | (ZNone (()), ZSome (za)) ->
      eq_list ((ze.zvAddr), (and_vec ((ze.zvMatchMask), za)))
    | (ZSome (zi), ZNone (())) ->
      (eq_list ((ze.zasid), zi)) && (znot (ze.zglobal))
    | (ZSome (zi), ZSome (za)) ->
      (eq_list ((ze.zasid), zi)) && ((eq_list ((ze.zvAddr), (and_vec (za, (ze.zvMatchMask))))) && (znot (ze.zglobal)))
  end)

and zto_phys_addr (za : ((bit) list)) : (bit) list = sail_call (fun r ->
  subrange (za, (Big_int.of_int (31)), Big_int.zero))

and zwalk32 ((zvaddr, zac, zpriv, zmxr, zdo_sum, zptb, zlevel, zglobal, zext_ptw) : ((bit) list * (zext_access_type) zAccessType * zPrivilege * bool * bool * (bit) list * Big_int.num * bool * Zext_ptw.zext_ptw)) : ((bit) list, ZSV32_PTE.zSV32_PTE) zPTW_Result = sail_call (fun r ->
  let zva = (zMk_SV32_Vaddr zvaddr) in
  let zpt_ofs = (shiftl ((zzzero_extend ((Big_int.of_int (34)), (subrange ((shiftr ((z_get_SV32_Vaddr_VPNi zva), (mult (zlevel, zSV32_LEVEL_BITS)))), (sub_int (zSV32_LEVEL_BITS, (Big_int.of_int (1)))), Big_int.zero)))), zPTE32_LOG_SIZE)) in
  let zpte_addr = (add_vec (zptb, zpt_ofs)) in
  begin
    match (zmem_read_priv ((ZRead ZData), ZSupervisor, (zto_phys_addr zpte_addr), (Big_int.of_int (4)), false, false, false)) with
    | ZMemException (_) ->
      ZPTW_Failure ((fun (v0, v1) -> (v1, v0)) (zext_ptw, ZPTW_Access ()))
    | ZMemValue (zv) ->
      let zpte = (zMk_SV32_PTE zv) in
      let zpbits = (z_get_SV32_PTE_BITS zpte) in
      let zext_pte = zdefault_sv32_ext_pte in
      let zpattr = (zMk_PTE_Bits zpbits) in
      let zis_global = (zglobal || (eq_list ((z_get_PTE_Bits_G zpattr), [B1]))) in
      (if (zisInvalidPTE (zpbits, zext_pte)) then (ZPTW_Failure ((fun (v0, v1) -> (v1, v0)) (zext_ptw, ZPTW_Invalid_PTE ()))) else ((if (zisPTEPtr (zpbits, zext_pte)) then ((if (gt (zlevel, Big_int.zero)) then (zwalk32 (zvaddr, zac, zpriv, zmxr, zdo_sum, (shiftl ((zzzero_extend ((Big_int.of_int (34)), (z_get_SV32_PTE_PPNi zpte))), zPAGESIZE_BITS)), (sub_int (zlevel, (Big_int.of_int (1)))), zis_global, zext_ptw)) else (ZPTW_Failure ((fun (v0, v1) -> (v1, v0)) (zext_ptw, ZPTW_Invalid_PTE ()))))) else (begin
        match (zcheckPTEPermission (zac, zpriv, zmxr, zdo_sum, zpattr, zext_pte, zext_ptw)) with
        | ZPTE_Check_Failure ((zext_ptw, zext_ptw_fail)) ->
          ZPTW_Failure ((fun (v0, v1) -> (v1, v0)) (zext_ptw, zext_get_ptw_error zext_ptw_fail))
        | ZPTE_Check_Success (zext_ptw) ->
          (if (gt (zlevel, Big_int.zero)) then (let zmask = (sub_vec_int ((shiftl ((xor_vec ((z_get_SV32_PTE_PPNi zpte), (xor_vec ((z_get_SV32_PTE_PPNi zpte), (zzzero_extend ((Big_int.of_int (22)), [B1])))))), (mult (zlevel, zSV32_LEVEL_BITS)))), (Big_int.of_int (1)))) in
          (if (zneq_bits ((and_vec ((z_get_SV32_PTE_PPNi zpte), zmask)), (zzzero_extend ((Big_int.of_int (22)), [B0])))) then (ZPTW_Failure ((fun (v0, v1) -> (v1, v0)) (zext_ptw, ZPTW_Misaligned ()))) else (let zppn = (or_vec ((z_get_SV32_PTE_PPNi zpte), (and_vec ((zzzero_extend ((Big_int.of_int (22)), (z_get_SV32_Vaddr_VPNi zva))), zmask)))) in
          ZPTW_Success ((fun (v0, v1, v2, v3, v4, v5) -> (v5, v4, v3, v2, v1, v0)) (zext_ptw, zis_global, zlevel, zpte_addr, zpte, append (zppn, (z_get_SV32_Vaddr_PgOfs zva))))))) else (ZPTW_Success ((fun (v0, v1, v2, v3, v4, v5) -> (v5, v4, v3, v2, v1, v0)) (zext_ptw, zis_global, zlevel, zpte_addr, zpte, append ((z_get_SV32_PTE_PPNi zpte), (z_get_SV32_Vaddr_PgOfs zva))))))
      end))))
  end)

type  zTLB32_Entry = ZTLB_Entry.zTLB_Entry;;

let string_of_zTLB32_Entry (gs7860 :  zTLB32_Entry) =
  string_of_zTLB_Entry gs7860;;

let ztlb32 : ((zTLB32_Entry) zoption) ref = ref (ZNone ());;

let rec zlookup_TLB32 ((zasid, zvaddr) : ((bit) list * (bit) list)) : ((Big_int.num * ZTLB_Entry.zTLB_Entry)) zoption = sail_call (fun r ->
  begin
    match !ztlb32 with
    | ZNone (()) -> ZNone ()
    | ZSome (ze) ->
      (if (zmatch_TLB_Entry (ze, zasid, zvaddr)) then (ZSome ((fun (v0, v1) -> (v1, v0)) (ze, Big_int.zero))) else (ZNone ()))
  end)

and zadd_to_TLB32 ((zasid, zvAddr, zpAddr, zpte, zpteAddr, zlevel, zglobal) : ((bit) list * (bit) list * (bit) list * ZSV32_PTE.zSV32_PTE * (bit) list * Big_int.num * bool)) : unit = sail_call (fun r ->
  let zent = (zmake_TLB_Entry (zasid, zglobal, zvAddr, zpAddr, (zpte.zbits), zlevel, zpteAddr, zSV32_LEVEL_BITS)) in
  (ztlb32 := (ZSome zent)))

and zwrite_TLB32 ((zidx, zent) : (Big_int.num * ZTLB_Entry.zTLB_Entry)) : unit = sail_call (fun r ->
  (ztlb32 := (ZSome zent)))

and zflush_TLB32 ((zasid, zaddr) : (((bit) list) zoption * ((bit) list) zoption)) : unit = sail_call (fun r ->
  begin
    match !ztlb32 with
    | ZNone (()) -> ()
    | ZSome (ze) ->
      (if (zflush_TLB_Entry (ze, zasid, zaddr)) then ((ztlb32 := (ZNone ()))) else ())
  end)

and ztranslate32 ((zasid, zptb, zvAddr, zac, zpriv, zmxr, zdo_sum, zlevel, zext_ptw) : ((bit) list * (bit) list * (bit) list * (zext_access_type) zAccessType * zPrivilege * bool * bool * Big_int.num * Zext_ptw.zext_ptw)) : ((bit) list, zPTW_Error) zTR_Result = sail_call (fun r ->
  begin
    match (zlookup_TLB32 (zasid, zvAddr)) with
    | ZSome ((zidx, zent)) ->
      let zpte = (zMk_SV32_PTE (zent.zpte)) in
      let zext_pte = (zzzeros_implicit (Big_int.of_int (10))) in
      let zpteBits = (zMk_PTE_Bits (z_get_SV32_PTE_BITS zpte)) in
      begin
        match (zcheckPTEPermission (zac, zpriv, zmxr, zdo_sum, zpteBits, zext_pte, zext_ptw)) with
        | ZPTE_Check_Failure ((zext_ptw, zext_ptw_fail)) ->
          ZTR_Failure ((fun (v0, v1) -> (v1, v0)) (zext_ptw, zext_get_ptw_error zext_ptw_fail))
        | ZPTE_Check_Success (zext_ptw) ->
          begin
            match (zupdate_PTE_Bits (zpteBits, zac, zext_pte)) with
            | ZNone (()) ->
              ZTR_Address ((fun (v0, v1) -> (v1, v0)) (zext_ptw, or_vec ((zent.zpAddr), (zzzero_extend ((Big_int.of_int (34)), (and_vec (zvAddr, (zent.zvAddrMask))))))))
            | ZSome ((zpbits, zext)) ->
              (if (znot (Platform.enable_dirty_update ())) then (ZTR_Failure ((fun (v0, v1) -> (v1, v0)) (zext_ptw, ZPTW_PTE_Update ()))) else (let zn_pte = ref ((z_update_SV32_PTE_BITS (zpte, (zpbits.zbits))) : ZSV32_PTE.zSV32_PTE) in
              let zn_ent = ref (zent : ZTLB_Entry.zTLB_Entry) in
              begin
                (zn_ent := ({!zn_ent with ZTLB_Entry.zpte = !zn_pte.zbits}));
                zwrite_TLB32 (zidx, !zn_ent);
                begin
                  match (zmem_write_value_priv ((zto_phys_addr (zzzero_extend ((Big_int.of_int (34)), (zent.zpteAddr)))), (Big_int.of_int (4)), (!zn_pte.zbits), ZSupervisor, false, false, false)) with
                  | ZMemValue (_) -> ()
                  | ZMemException (ze) ->
                    zinternal_error ("sail-riscv/model/riscv_vmem_sv32.sail", (Big_int.of_int (154)), "invalid physical address in TLB")
                end;
                ZTR_Address ((fun (v0, v1) -> (v1, v0)) (zext_ptw, or_vec ((zent.zpAddr), (zzzero_extend ((Big_int.of_int (34)), (and_vec (zvAddr, (zent.zvAddrMask))))))))
              end))
          end
      end
    | ZNone (()) ->
      begin
        match (zwalk32 (zvAddr, zac, zpriv, zmxr, zdo_sum, zptb, zlevel, false, zext_ptw)) with
        | ZPTW_Failure ((zf, zext_ptw)) ->
          ZTR_Failure ((fun (v0, v1) -> (v1, v0)) (zext_ptw, zf))
        | ZPTW_Success ((zpAddr, zpte, zpteAddr, zlevel, zglobal, zext_ptw)) ->
          begin
            match (zupdate_PTE_Bits ((zMk_PTE_Bits (z_get_SV32_PTE_BITS zpte)), zac, (zzzeros_implicit (Big_int.of_int (10))))) with
            | ZNone (()) ->
              begin
                zadd_to_TLB32 (zasid, zvAddr, zpAddr, zpte, zpteAddr, zlevel, zglobal);
                ZTR_Address ((fun (v0, v1) -> (v1, v0)) (zext_ptw, zpAddr))
              end
            | ZSome ((zpbits, zext)) ->
              (if (znot (Platform.enable_dirty_update ())) then (ZTR_Failure ((fun (v0, v1) -> (v1, v0)) (zext_ptw, ZPTW_PTE_Update ()))) else (let zw_pte = ref ((z_update_SV32_PTE_BITS (zpte, (zpbits.zbits))) : ZSV32_PTE.zSV32_PTE) in
              begin
                match (zmem_write_value_priv ((zto_phys_addr zpteAddr), (Big_int.of_int (4)), (!zw_pte.zbits), ZSupervisor, false, false, false)) with
                | ZMemValue (_) ->
                  begin
                    zadd_to_TLB32 (zasid, zvAddr, zpAddr, !zw_pte, zpteAddr, zlevel, zglobal);
                    ZTR_Address ((fun (v0, v1) -> (v1, v0)) (zext_ptw, zpAddr))
                  end
                | ZMemException (ze) ->
                  ZTR_Failure ((fun (v0, v1) -> (v1, v0)) (zext_ptw, ZPTW_Access ()))
              end))
          end
      end
  end)

and zinit_vmem_sv32 (() : (unit)) : unit = sail_call (fun r ->
  (ztlb32 := (ZNone ())))

let zsatp : (zxlenbits) ref = ref (undefined_bitvector (Big_int.of_int (32)));;

let rec zlegalizze_satp ((za, zo, zv) : (zArchitecture * (bit) list * (bit) list)) : (bit) list = sail_call (fun r ->
  zlegalizze_satp32 (za, zo, zv))

and ztranslationMode (zpriv : (zPrivilege)) : zSATPMode = sail_call (fun r ->
  (if ((fun (x, y) -> x = y) (zpriv, ZMachine)) then ZSbare else (let zarch = (zarchitecture (zget_mstatus_SXL !zmstatus)) in
  begin
    match zarch with
    | ZSome (ZRV32) ->
      let zs = (zMk_Satp32 (subrange (!zsatp, (Big_int.of_int (31)), Big_int.zero))) in
      (if (eq_list ((z_get_Satp32_Mode zs), [B0])) then ZSbare else ZSv32)
    | _ ->
      zinternal_error ("sail-riscv/model/riscv_vmem_rv32.sail", (Big_int.of_int (30)), "unsupported address translation arch")
  end)))

and ztranslateAddr_priv ((zvAddr, zac, zeffPriv) : ((bit) list * (zext_access_type) zAccessType * zPrivilege)) : ((bit) list, zExceptionType) zTR_Result = sail_call (fun r ->
  let zmxr = (eq_list ((z_get_Mstatus_MXR !zmstatus), [B1])) in
  let zdo_sum = (eq_list ((z_get_Mstatus_SUM !zmstatus), [B1])) in
  let zmode = (ztranslationMode zeffPriv) in
  let zasid = (zcurAsid32 !zsatp) in
  let zptb = (zcurPTB32 !zsatp) in
  let zext_ptw = zinit_ext_ptw in
  begin
    match zmode with
    | ZSbare -> ZTR_Address ((fun (v0, v1) -> (v1, v0)) (zext_ptw, zvAddr))
    | ZSv32 ->
      begin
        match (ztranslate32 (zasid, zptb, zvAddr, zac, zeffPriv, zmxr, zdo_sum, (sub_int (zSV32_LEVELS, (Big_int.of_int (1)))), zext_ptw)) with
        | ZTR_Address ((zpa, zext_ptw)) ->
          ZTR_Address ((fun (v0, v1) -> (v1, v0)) (zext_ptw, zto_phys_addr zpa))
        | ZTR_Failure ((zf, zext_ptw)) ->
          ZTR_Failure ((fun (v0, v1) -> (v1, v0)) (zext_ptw, ztranslationException (zac, zf)))
      end
    | _ ->
      zinternal_error ("sail-riscv/model/riscv_vmem_rv32.sail", (Big_int.of_int (55)), "unsupported address translation scheme")
  end)

and ztranslateAddr ((zvAddr, zac) : ((bit) list * (zext_access_type) zAccessType)) : ((bit) list, zExceptionType) zTR_Result = sail_call (fun r ->
  ztranslateAddr_priv (zvAddr, zac, (zeffectivePrivilege (zac, !zmstatus, !zcur_privilege))))

and zflush_TLB ((zasid_xlen, zaddr_xlen) : (((bit) list) zoption * ((bit) list) zoption)) : unit = sail_call (fun r ->
  let zasid = (begin
    match zasid_xlen with
    | ZNone (()) -> ZNone ()
    | ZSome (za) -> ZSome (subrange (za, (Big_int.of_int (8)), Big_int.zero))
  end) in
  zflush_TLB32 (zasid, zaddr_xlen))

and zinit_vmem (() : (unit)) : unit = sail_call (fun r -> zinit_vmem_sv32 ())

and zencdec_uop_forwards (zargz3 : (zuop)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_LUI -> [B0; B1; B1; B0; B1; B1; B1]
    | ZRISCV_AUIPC -> [B0; B0; B1; B0; B1; B1; B1]
  end)

and zencdec_uop_backwards (zargz3 : ((bit) list)) : zuop = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B1; B1; B0; B1; B1; B1])) -> ZRISCV_LUI
    | zb__1 when (eq_list (zb__1, [B0; B0; B1; B0; B1; B1; B1])) -> ZRISCV_AUIPC
  end)

and zencdec_uop_forwards_matches (zargz3 : (zuop)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_LUI -> true
    | ZRISCV_AUIPC -> true
    | _ -> false
  end)

and zencdec_uop_backwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B1; B1; B0; B1; B1; B1])) -> true
    | zb__1 when (eq_list (zb__1, [B0; B0; B1; B0; B1; B1; B1])) -> true
    | _ -> false
  end)

and zutype_mnemonic_backwards (zargz3 : (string)) : zuop = sail_call (fun r ->
  begin match zargz3 with | "lui" -> ZRISCV_LUI | "auipc" -> ZRISCV_AUIPC end)

and zutype_mnemonic_forwards_matches (zargz3 : (zuop)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_LUI -> true
    | ZRISCV_AUIPC -> true
    | _ -> false
  end)

and zutype_mnemonic_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | "lui" -> true | "auipc" -> true | _ -> false end)

and zencdec_bop_forwards (zargz3 : (zbop)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_BEQ -> [B0; B0; B0]
    | ZRISCV_BNE -> [B0; B0; B1]
    | ZRISCV_BLT -> [B1; B0; B0]
    | ZRISCV_BGE -> [B1; B0; B1]
    | ZRISCV_BLTU -> [B1; B1; B0]
    | ZRISCV_BGEU -> [B1; B1; B1]
  end)

and zencdec_bop_backwards (zargz3 : ((bit) list)) : zbop = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0; B0])) -> ZRISCV_BEQ
    | zb__1 when (eq_list (zb__1, [B0; B0; B1])) -> ZRISCV_BNE
    | zb__2 when (eq_list (zb__2, [B1; B0; B0])) -> ZRISCV_BLT
    | zb__3 when (eq_list (zb__3, [B1; B0; B1])) -> ZRISCV_BGE
    | zb__4 when (eq_list (zb__4, [B1; B1; B0])) -> ZRISCV_BLTU
    | zb__5 when (eq_list (zb__5, [B1; B1; B1])) -> ZRISCV_BGEU
  end)

and zencdec_bop_forwards_matches (zargz3 : (zbop)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_BEQ -> true
    | ZRISCV_BNE -> true
    | ZRISCV_BLT -> true
    | ZRISCV_BGE -> true
    | ZRISCV_BLTU -> true
    | ZRISCV_BGEU -> true
    | _ -> false
  end)

and zencdec_bop_backwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0; B0])) -> true
    | zb__1 when (eq_list (zb__1, [B0; B0; B1])) -> true
    | zb__2 when (eq_list (zb__2, [B1; B0; B0])) -> true
    | zb__3 when (eq_list (zb__3, [B1; B0; B1])) -> true
    | zb__4 when (eq_list (zb__4, [B1; B1; B0])) -> true
    | zb__5 when (eq_list (zb__5, [B1; B1; B1])) -> true
    | _ -> false
  end)

and zbtype_mnemonic_backwards (zargz3 : (string)) : zbop = sail_call (fun r ->
  begin
    match zargz3 with
    | "beq" -> ZRISCV_BEQ
    | "bne" -> ZRISCV_BNE
    | "blt" -> ZRISCV_BLT
    | "bge" -> ZRISCV_BGE
    | "bltu" -> ZRISCV_BLTU
    | "bgeu" -> ZRISCV_BGEU
  end)

and zbtype_mnemonic_forwards_matches (zargz3 : (zbop)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_BEQ -> true
    | ZRISCV_BNE -> true
    | ZRISCV_BLT -> true
    | ZRISCV_BGE -> true
    | ZRISCV_BLTU -> true
    | ZRISCV_BGEU -> true
    | _ -> false
  end)

and zbtype_mnemonic_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | "beq" -> true
    | "bne" -> true
    | "blt" -> true
    | "bge" -> true
    | "bltu" -> true
    | "bgeu" -> true
    | _ -> false
  end)

and zencdec_iop_forwards (zargz3 : (ziop)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_ADDI -> [B0; B0; B0]
    | ZRISCV_SLTI -> [B0; B1; B0]
    | ZRISCV_SLTIU -> [B0; B1; B1]
    | ZRISCV_ANDI -> [B1; B1; B1]
    | ZRISCV_ORI -> [B1; B1; B0]
    | ZRISCV_XORI -> [B1; B0; B0]
  end)

and zencdec_iop_backwards (zargz3 : ((bit) list)) : ziop = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0; B0])) -> ZRISCV_ADDI
    | zb__1 when (eq_list (zb__1, [B0; B1; B0])) -> ZRISCV_SLTI
    | zb__2 when (eq_list (zb__2, [B0; B1; B1])) -> ZRISCV_SLTIU
    | zb__3 when (eq_list (zb__3, [B1; B1; B1])) -> ZRISCV_ANDI
    | zb__4 when (eq_list (zb__4, [B1; B1; B0])) -> ZRISCV_ORI
    | zb__5 when (eq_list (zb__5, [B1; B0; B0])) -> ZRISCV_XORI
  end)

and zencdec_iop_forwards_matches (zargz3 : (ziop)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_ADDI -> true
    | ZRISCV_SLTI -> true
    | ZRISCV_SLTIU -> true
    | ZRISCV_ANDI -> true
    | ZRISCV_ORI -> true
    | ZRISCV_XORI -> true
    | _ -> false
  end)

and zencdec_iop_backwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0; B0])) -> true
    | zb__1 when (eq_list (zb__1, [B0; B1; B0])) -> true
    | zb__2 when (eq_list (zb__2, [B0; B1; B1])) -> true
    | zb__3 when (eq_list (zb__3, [B1; B1; B1])) -> true
    | zb__4 when (eq_list (zb__4, [B1; B1; B0])) -> true
    | zb__5 when (eq_list (zb__5, [B1; B0; B0])) -> true
    | _ -> false
  end)

and zitype_mnemonic_backwards (zargz3 : (string)) : ziop = sail_call (fun r ->
  begin
    match zargz3 with
    | "addi" -> ZRISCV_ADDI
    | "slti" -> ZRISCV_SLTI
    | "sltiu" -> ZRISCV_SLTIU
    | "xori" -> ZRISCV_XORI
    | "ori" -> ZRISCV_ORI
    | "andi" -> ZRISCV_ANDI
  end)

and zitype_mnemonic_forwards_matches (zargz3 : (ziop)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_ADDI -> true
    | ZRISCV_SLTI -> true
    | ZRISCV_SLTIU -> true
    | ZRISCV_XORI -> true
    | ZRISCV_ORI -> true
    | ZRISCV_ANDI -> true
    | _ -> false
  end)

and zitype_mnemonic_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | "addi" -> true
    | "slti" -> true
    | "sltiu" -> true
    | "xori" -> true
    | "ori" -> true
    | "andi" -> true
    | _ -> false
  end)

and zencdec_sop_forwards (zargz3 : (zsop)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_SLLI -> [B0; B0; B1]
    | ZRISCV_SRLI -> [B1; B0; B1]
    | ZRISCV_SRAI -> [B1; B0; B1]
  end)

and zencdec_sop_backwards (zargz3 : ((bit) list)) : zsop = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0; B1])) -> ZRISCV_SLLI
    | zb__1 when (eq_list (zb__1, [B1; B0; B1])) -> ZRISCV_SRLI
    | zb__2 when (eq_list (zb__2, [B1; B0; B1])) -> ZRISCV_SRAI
  end)

and zencdec_sop_forwards_matches (zargz3 : (zsop)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_SLLI -> true
    | ZRISCV_SRLI -> true
    | ZRISCV_SRAI -> true
    | _ -> false
  end)

and zencdec_sop_backwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0; B1])) -> true
    | zb__1 when (eq_list (zb__1, [B1; B0; B1])) -> true
    | zb__2 when (eq_list (zb__2, [B1; B0; B1])) -> true
    | _ -> false
  end)

and zshiftiop_mnemonic_backwards (zargz3 : (string)) : zsop = sail_call (fun r ->
  begin
    match zargz3 with
    | "slli" -> ZRISCV_SLLI
    | "srli" -> ZRISCV_SRLI
    | "srai" -> ZRISCV_SRAI
  end)

and zshiftiop_mnemonic_forwards_matches (zargz3 : (zsop)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_SLLI -> true
    | ZRISCV_SRLI -> true
    | ZRISCV_SRAI -> true
    | _ -> false
  end)

and zshiftiop_mnemonic_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | "slli" -> true
    | "srli" -> true
    | "srai" -> true
    | _ -> false
  end)

and zrtype_mnemonic_backwards (zargz3 : (string)) : zrop = sail_call (fun r ->
  begin
    match zargz3 with
    | "add" -> ZRISCV_ADD
    | "slt" -> ZRISCV_SLT
    | "sltu" -> ZRISCV_SLTU
    | "and" -> ZRISCV_AND
    | "or" -> ZRISCV_OR
    | "xor" -> ZRISCV_XOR
    | "sll" -> ZRISCV_SLL
    | "srl" -> ZRISCV_SRL
    | "sub" -> ZRISCV_SUB
    | "sra" -> ZRISCV_SRA
  end)

and zrtype_mnemonic_forwards_matches (zargz3 : (zrop)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_ADD -> true
    | ZRISCV_SLT -> true
    | ZRISCV_SLTU -> true
    | ZRISCV_AND -> true
    | ZRISCV_OR -> true
    | ZRISCV_XOR -> true
    | ZRISCV_SLL -> true
    | ZRISCV_SRL -> true
    | ZRISCV_SUB -> true
    | ZRISCV_SRA -> true
    | _ -> false
  end)

and zrtype_mnemonic_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | "add" -> true
    | "slt" -> true
    | "sltu" -> true
    | "and" -> true
    | "or" -> true
    | "xor" -> true
    | "sll" -> true
    | "srl" -> true
    | "sub" -> true
    | "sra" -> true
    | _ -> false
  end)

and zextend_value ((zis_unsigned, zvalue) : (bool * ((bit) list) zMemoryOpResult)) : ((bit) list) zMemoryOpResult = sail_call (fun r ->
  begin
    match zvalue with
    | ZMemValue (zv) ->
      ZMemValue ((if zis_unsigned then (zzzero_extend ((Big_int.of_int (32)), zv)) else (zsign_extend ((Big_int.of_int (32)), zv))))
    | ZMemException (ze) -> ZMemException ze
  end)

and zprocess_load ((zrd, zvaddr, zvalue, zis_unsigned) : ((bit) list * (bit) list * ((bit) list) zMemoryOpResult * bool)) : zRetired = sail_call (fun r ->
  begin
    match (zextend_value (zis_unsigned, zvalue)) with
    | ZMemValue (zresult) -> begin zwX_bits (zrd, zresult); ZRETIRE_SUCCESS end
    | ZMemException (ze) ->
      begin zhandle_mem_exception (zvaddr, ze); ZRETIRE_FAIL end
  end)

and zcheck_misaligned ((zvaddr, zwidth) : ((bit) list * zword_width)) : bool = sail_call (fun r ->
  (if (Platform.enable_misaligned_access ()) then false else (begin
    match zwidth with
    | ZBYTE -> false
    | ZHALF -> eq_bit ((access (zvaddr, Big_int.zero)), B1)
    | ZWORD ->
      (eq_bit ((access (zvaddr, Big_int.zero)), B1)) || (eq_bit ((access (zvaddr, (Big_int.of_int (1)))), B1))
    | ZDOUBLE ->
      (eq_bit ((access (zvaddr, Big_int.zero)), B1)) || ((eq_bit ((access (zvaddr, (Big_int.of_int (1)))), B1)) || (eq_bit ((access (zvaddr, (Big_int.of_int (2)))), B1)))
  end)))

and zmaybe_aq_backwards (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | ".aq" -> true | "" -> false end)

and zmaybe_aq_forwards_matches (zargz3 : (bool)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zp0z3 when (eq_bool (zp0z3, true)) -> true
    | zp0z3 when (eq_bool (zp0z3, false)) -> true
    | _ -> false
  end)

and zmaybe_aq_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | ".aq" -> true | "" -> true | _ -> false end)

and zmaybe_rl_backwards (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | ".rl" -> true | "" -> false end)

and zmaybe_rl_forwards_matches (zargz3 : (bool)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zp0z3 when (eq_bool (zp0z3, true)) -> true
    | zp0z3 when (eq_bool (zp0z3, false)) -> true
    | _ -> false
  end)

and zmaybe_rl_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | ".rl" -> true | "" -> true | _ -> false end)

and zmaybe_u_backwards (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | "u" -> true | "" -> false end)

and zmaybe_u_forwards_matches (zargz3 : (bool)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zp0z3 when (eq_bool (zp0z3, true)) -> true
    | zp0z3 when (eq_bool (zp0z3, false)) -> true
    | _ -> false
  end)

and zmaybe_u_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | "u" -> true | "" -> true | _ -> false end)

and zrtypew_mnemonic_backwards (zargz3 : (string)) : zropw = sail_call (fun r ->
  begin
    match zargz3 with
    | "addw" -> ZRISCV_ADDW
    | "subw" -> ZRISCV_SUBW
    | "sllw" -> ZRISCV_SLLW
    | "srlw" -> ZRISCV_SRLW
    | "sraw" -> ZRISCV_SRAW
  end)

and zrtypew_mnemonic_forwards_matches (zargz3 : (zropw)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_ADDW -> true
    | ZRISCV_SUBW -> true
    | ZRISCV_SLLW -> true
    | ZRISCV_SRLW -> true
    | ZRISCV_SRAW -> true
    | _ -> false
  end)

and zrtypew_mnemonic_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | "addw" -> true
    | "subw" -> true
    | "sllw" -> true
    | "srlw" -> true
    | "sraw" -> true
    | _ -> false
  end)

and zshiftiwop_mnemonic_backwards (zargz3 : (string)) : zsopw = sail_call (fun r ->
  begin
    match zargz3 with
    | "slliw" -> ZRISCV_SLLIW
    | "srliw" -> ZRISCV_SRLIW
    | "sraiw" -> ZRISCV_SRAIW
  end)

and zshiftiwop_mnemonic_forwards_matches (zargz3 : (zsopw)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | ZRISCV_SLLIW -> true
    | ZRISCV_SRLIW -> true
    | ZRISCV_SRAIW -> true
    | _ -> false
  end)

and zshiftiwop_mnemonic_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | "slliw" -> true
    | "srliw" -> true
    | "sraiw" -> true
    | _ -> false
  end)

and zeffective_fence_set ((zset, zfiom) : ((bit) list * bool)) : (bit) list = sail_call (fun r ->
  (if zfiom then (append ((subrange (zset, (Big_int.of_int (3)), (Big_int.of_int (2)))), (or_vec ((subrange (zset, (Big_int.of_int (1)), Big_int.zero)), (subrange (zset, (Big_int.of_int (3)), (Big_int.of_int (2)))))))) else zset))

and zbit_maybe_r_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin match zargz3 with | "r" -> [B1] | "" -> [B0] end)

and zbit_maybe_r_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B1])) -> true
    | zb__1 when (eq_list (zb__1, [B0])) -> true
    | _ -> false
  end)

and zbit_maybe_r_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | "r" -> true | "" -> true | _ -> false end)

and zbit_maybe_w_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin match zargz3 with | "w" -> [B1] | "" -> [B0] end)

and zbit_maybe_w_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B1])) -> true
    | zb__1 when (eq_list (zb__1, [B0])) -> true
    | _ -> false
  end)

and zbit_maybe_w_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | "w" -> true | "" -> true | _ -> false end)

and zbit_maybe_i_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin match zargz3 with | "i" -> [B1] | "" -> [B0] end)

and zbit_maybe_i_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B1])) -> true
    | zb__1 when (eq_list (zb__1, [B0])) -> true
    | _ -> false
  end)

and zbit_maybe_i_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | "i" -> true | "" -> true | _ -> false end)

and zbit_maybe_o_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin match zargz3 with | "o" -> [B1] | "" -> [B0] end)

and zbit_maybe_o_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B1])) -> true
    | zb__1 when (eq_list (zb__1, [B0])) -> true
    | _ -> false
  end)

and zbit_maybe_o_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | "o" -> true | "" -> true | _ -> false end)

and zfence_bits_backwards (zargz3 : (string)) : (bit) list = sail_call (fun r ->
  begin match zargz3 with | _ -> exit 0 end)

and zfence_bits_forwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin match zargz3 with | zv__27 -> true | _ -> false end)

and zfence_bits_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | _ -> exit 0 | _ -> false end)

and zencdec_mul_op_forwards (zargz3 : ((bool * bool * bool))) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, true)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, false))) ->
      [B0; B0; B0]
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, true)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, true))) ->
      [B0; B0; B1]
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, false)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, true))) ->
      [B0; B1; B0]
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, false)) && (eq_bool (zp1z3, false))) && (eq_bool (zp0z3, true))) ->
      [B0; B1; B1]
  end)

and zencdec_mul_op_backwards (zargz3 : ((bit) list)) : (bool * bool * bool) = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0; B0])) ->
      ((fun (v0, v1, v2) -> (v2, v1, v0)) (true, true, false))
    | zb__1 when (eq_list (zb__1, [B0; B0; B1])) ->
      ((fun (v0, v1, v2) -> (v2, v1, v0)) (true, true, true))
    | zb__2 when (eq_list (zb__2, [B0; B1; B0])) ->
      ((fun (v0, v1, v2) -> (v2, v1, v0)) (false, true, true))
    | zb__3 when (eq_list (zb__3, [B0; B1; B1])) ->
      ((fun (v0, v1, v2) -> (v2, v1, v0)) (false, false, true))
  end)

and zencdec_mul_op_forwards_matches (zargz3 : ((bool * bool * bool))) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, true)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, false))) ->
      true
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, true)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, true))) ->
      true
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, false)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, true))) ->
      true
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, false)) && (eq_bool (zp1z3, false))) && (eq_bool (zp0z3, true))) ->
      true
    | _ -> false
  end)

and zencdec_mul_op_backwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B0; B0])) -> true
    | zb__1 when (eq_list (zb__1, [B0; B0; B1])) -> true
    | zb__2 when (eq_list (zb__2, [B0; B1; B0])) -> true
    | zb__3 when (eq_list (zb__3, [B0; B1; B1])) -> true
    | _ -> false
  end)

and zmul_mnemonic_backwards (zargz3 : (string)) : (bool * bool * bool) = sail_call (fun r ->
  begin
    match zargz3 with
    | "mul" -> ((fun (v0, v1, v2) -> (v2, v1, v0)) (true, true, false))
    | "mulh" -> ((fun (v0, v1, v2) -> (v2, v1, v0)) (true, true, true))
    | "mulhsu" -> ((fun (v0, v1, v2) -> (v2, v1, v0)) (false, true, true))
    | "mulhu" -> ((fun (v0, v1, v2) -> (v2, v1, v0)) (false, false, true))
  end)

and zmul_mnemonic_forwards_matches (zargz3 : ((bool * bool * bool))) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, true)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, false))) ->
      true
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, true)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, true))) ->
      true
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, false)) && (eq_bool (zp1z3, true))) && (eq_bool (zp0z3, true))) ->
      true
    | (zp0z3, zp1z3, zp2z3) when (((eq_bool (zp2z3, false)) && (eq_bool (zp1z3, false))) && (eq_bool (zp0z3, true))) ->
      true
    | _ -> false
  end)

and zmul_mnemonic_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | "mul" -> true
    | "mulh" -> true
    | "mulhsu" -> true
    | "mulhu" -> true
    | _ -> false
  end)

and zmaybe_not_u_backwards (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | "u" -> false | "" -> true end)

and zmaybe_not_u_forwards_matches (zargz3 : (bool)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zp0z3 when (eq_bool (zp0z3, false)) -> true
    | zp0z3 when (eq_bool (zp0z3, true)) -> true
    | _ -> false
  end)

and zmaybe_not_u_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | "u" -> true | "" -> true | _ -> false end)

and zencdec_csrop_forwards (zargz3 : (zcsrop)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | ZCSRRW -> [B0; B1]
    | ZCSRRS -> [B1; B0]
    | ZCSRRC -> [B1; B1]
  end)

and zencdec_csrop_backwards (zargz3 : ((bit) list)) : zcsrop = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B1])) -> ZCSRRW
    | zb__1 when (eq_list (zb__1, [B1; B0])) -> ZCSRRS
    | zb__2 when (eq_list (zb__2, [B1; B1])) -> ZCSRRC
  end)

and zencdec_csrop_forwards_matches (zargz3 : (zcsrop)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | ZCSRRW -> true
    | ZCSRRS -> true
    | ZCSRRC -> true
    | _ -> false
  end)

and zencdec_csrop_backwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zb__0 when (eq_list (zb__0, [B0; B1])) -> true
    | zb__1 when (eq_list (zb__1, [B1; B0])) -> true
    | zb__2 when (eq_list (zb__2, [B1; B1])) -> true
    | _ -> false
  end)

and zreadCSR (zcsr : ((bit) list)) : (bit) list = sail_call (fun r ->
  let zres = (begin
    match ((fun (v0, v1) -> (v1, v0)) ((Big_int.of_int (32)), zcsr)) with
    | (zb__0, _) when (eq_list (zb__0, [B1; B1; B1; B1; B0; B0; B0; B1; B0; B0; B0; B1])) ->
      zzzero_extend ((Big_int.of_int (32)), !zmvendorid)
    | (zb__1, _) when (eq_list (zb__1, [B1; B1; B1; B1; B0; B0; B0; B1; B0; B0; B1; B0])) ->
      !zmarchid
    | (zb__2, _) when (eq_list (zb__2, [B1; B1; B1; B1; B0; B0; B0; B1; B0; B0; B1; B1])) ->
      !zmimpid
    | (zb__3, _) when (eq_list (zb__3, [B1; B1; B1; B1; B0; B0; B0; B1; B0; B1; B0; B0])) ->
      !zmhartid
    | (zb__4, _) when (eq_list (zb__4, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      !zmstatus.zbits
    | (zb__5, _) when (eq_list (zb__5, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0; B1])) ->
      !zmisa.zbits
    | (zb__6, _) when (eq_list (zb__6, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      !zmedeleg.zbits
    | (zb__7, _) when (eq_list (zb__7, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B1; B1])) ->
      !zmideleg.zbits
    | (zb__8, _) when (eq_list (zb__8, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B1; B0; B0])) ->
      !zmie.zbits
    | (zb__9, _) when (eq_list (zb__9, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B1; B0; B1])) ->
      zget_mtvec ()
    | (zb__10, _) when (eq_list (zb__10, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B1; B1; B0])) ->
      zzzero_extend ((Big_int.of_int (32)), (!zmcounteren.zbits))
    | (zb__11, _) when (eq_list (zb__11, [B0; B0; B1; B1; B0; B0; B0; B0; B1; B0; B1; B0])) ->
      subrange ((!zmenvcfg.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero)
    | (zb__12, zl__25) when ((eq_list (zb__12, [B0; B0; B1; B1; B0; B0; B0; B1; B0; B0; B0; B0])) && (eq_int (zl__25, (Big_int.of_int (32))))) ->
      !zmstatush.zbits
    | (zb__13, zl__26) when ((eq_list (zb__13, [B0; B0; B1; B1; B0; B0; B0; B1; B1; B0; B1; B0])) && (eq_int (zl__26, (Big_int.of_int (32))))) ->
      subrange ((!zmenvcfg.zbits), (Big_int.of_int (63)), (Big_int.of_int (32)))
    | (zb__14, _) when (eq_list (zb__14, [B0; B0; B1; B1; B0; B0; B1; B0; B0; B0; B0; B0])) ->
      zzzero_extend ((Big_int.of_int (32)), (!zmcountinhibit.zbits))
    | (zb__15, _) when (eq_list (zb__15, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B0; B0])) ->
      !zmscratch
    | (zb__16, _) when (eq_list (zb__16, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B0; B1])) ->
      and_vec ((zget_xret_target ZMachine), (zpc_alignment_mask ()))
    | (zb__17, _) when (eq_list (zb__17, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B1; B0])) ->
      !zmcause.zbits
    | (zb__18, _) when (eq_list (zb__18, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B1; B1])) ->
      !zmtval
    | (zb__19, _) when (eq_list (zb__19, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B1; B0; B0])) ->
      !zmip.zbits
    | (zv__28, _) when ((let zidx = (subrange (zv__28, (Big_int.of_int (3)), Big_int.zero)) in
    (eq_bit ((access (zidx, Big_int.zero)), B0)) || (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32))))) && (eq_list ((subrange (zv__28, (Big_int.of_int (11)), (Big_int.of_int (4)))), [B0; B0; B1; B1; B1; B0; B1; B0]))) ->
      let zidx = (subrange (zv__28, (Big_int.of_int (3)), Big_int.zero)) in
      zpmpReadCfgReg (uint zidx)
    | (zv__30, _) when (eq_list ((subrange (zv__30, (Big_int.of_int (11)), (Big_int.of_int (4)))), [B0; B0; B1; B1; B1; B0; B1; B1])) ->
      let zidx = (subrange (zv__30, (Big_int.of_int (3)), Big_int.zero)) in
      zpmpReadAddrReg (uint (append ([B0; B0], zidx)))
    | (zv__32, _) when (eq_list ((subrange (zv__32, (Big_int.of_int (11)), (Big_int.of_int (4)))), [B0; B0; B1; B1; B1; B1; B0; B0])) ->
      let zidx = (subrange (zv__32, (Big_int.of_int (3)), Big_int.zero)) in
      zpmpReadAddrReg (uint (append ([B0; B1], zidx)))
    | (zv__34, _) when (eq_list ((subrange (zv__34, (Big_int.of_int (11)), (Big_int.of_int (4)))), [B0; B0; B1; B1; B1; B1; B0; B1])) ->
      let zidx = (subrange (zv__34, (Big_int.of_int (3)), Big_int.zero)) in
      zpmpReadAddrReg (uint (append ([B1; B0], zidx)))
    | (zv__36, _) when (eq_list ((subrange (zv__36, (Big_int.of_int (11)), (Big_int.of_int (4)))), [B0; B0; B1; B1; B1; B1; B1; B0])) ->
      let zidx = (subrange (zv__36, (Big_int.of_int (3)), Big_int.zero)) in
      zpmpReadAddrReg (uint (append ([B1; B1], zidx)))
    | (zb__20, _) when (eq_list (zb__20, [B1; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      subrange (!zmcycle, (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero)
    | (zb__21, _) when (eq_list (zb__21, [B1; B0; B1; B1; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      subrange (!zminstret, (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero)
    | (zb__22, zl__27) when ((eq_list (zb__22, [B1; B0; B1; B1; B1; B0; B0; B0; B0; B0; B0; B0])) && (eq_int (zl__27, (Big_int.of_int (32))))) ->
      subrange (!zmcycle, (Big_int.of_int (63)), (Big_int.of_int (32)))
    | (zb__23, zl__28) when ((eq_list (zb__23, [B1; B0; B1; B1; B1; B0; B0; B0; B0; B0; B1; B0])) && (eq_int (zl__28, (Big_int.of_int (32))))) ->
      subrange (!zminstret, (Big_int.of_int (63)), (Big_int.of_int (32)))
    | (zb__24, _) when (eq_list (zb__24, [B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B0; B0])) ->
      zzzero_extend ((Big_int.of_int (32)), !zvstart)
    | (zb__25, _) when (eq_list (zb__25, [B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B0; B1])) ->
      zzzero_extend ((Big_int.of_int (32)), !zvxsat)
    | (zb__26, _) when (eq_list (zb__26, [B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B1; B0])) ->
      zzzero_extend ((Big_int.of_int (32)), !zvxrm)
    | (zb__27, _) when (eq_list (zb__27, [B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B1; B1])) ->
      zzzero_extend ((Big_int.of_int (32)), (!zvcsr.zbits))
    | (zb__28, _) when (eq_list (zb__28, [B1; B1; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0])) ->
      !zvl
    | (zb__29, _) when (eq_list (zb__29, [B1; B1; B0; B0; B0; B0; B1; B0; B0; B0; B0; B1])) ->
      !zvtype.zbits
    | (zb__30, _) when (eq_list (zb__30, [B1; B1; B0; B0; B0; B0; B1; B0; B0; B0; B1; B0])) ->
      !zvlenb
    | (zb__31, _) when (eq_list (zb__31, [B0; B1; B1; B1; B1; B0; B1; B0; B0; B0; B0; B0])) ->
      not_vec !ztselect
    | (zb__32, _) when (eq_list (zb__32, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      (zlower_mstatus !zmstatus).zbits
    | (zb__33, _) when (eq_list (zb__33, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      !zsedeleg.zbits
    | (zb__34, _) when (eq_list (zb__34, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B1; B1])) ->
      !zsideleg.zbits
    | (zb__35, _) when (eq_list (zb__35, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B1; B0; B0])) ->
      (zlower_mie (!zmie, !zmideleg)).zbits
    | (zb__36, _) when (eq_list (zb__36, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B1; B0; B1])) ->
      zget_stvec ()
    | (zb__37, _) when (eq_list (zb__37, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B1; B1; B0])) ->
      zzzero_extend ((Big_int.of_int (32)), (!zscounteren.zbits))
    | (zb__38, _) when (eq_list (zb__38, [B0; B0; B0; B1; B0; B0; B0; B0; B1; B0; B1; B0])) ->
      subrange ((!zsenvcfg.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero)
    | (zb__39, _) when (eq_list (zb__39, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B0; B0])) ->
      !zsscratch
    | (zb__40, _) when (eq_list (zb__40, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B0; B1])) ->
      and_vec ((zget_xret_target ZSupervisor), (zpc_alignment_mask ()))
    | (zb__41, _) when (eq_list (zb__41, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B1; B0])) ->
      !zscause.zbits
    | (zb__42, _) when (eq_list (zb__42, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B1; B1])) ->
      !zstval
    | (zb__43, _) when (eq_list (zb__43, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B1; B0; B0])) ->
      (zlower_mip (!zmip, !zmideleg)).zbits
    | (zb__44, _) when (eq_list (zb__44, [B0; B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0])) ->
      !zsatp
    | (zb__45, _) when (eq_list (zb__45, [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      subrange (!zmcycle, (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero)
    | (zb__46, _) when (eq_list (zb__46, [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1])) ->
      subrange (!zmtime, (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero)
    | (zb__47, _) when (eq_list (zb__47, [B1; B1; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      subrange (!zminstret, (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero)
    | (zb__48, zl__29) when ((eq_list (zb__48, [B1; B1; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0])) && (eq_int (zl__29, (Big_int.of_int (32))))) ->
      subrange (!zmcycle, (Big_int.of_int (63)), (Big_int.of_int (32)))
    | (zb__49, zl__30) when ((eq_list (zb__49, [B1; B1; B0; B0; B1; B0; B0; B0; B0; B0; B0; B1])) && (eq_int (zl__30, (Big_int.of_int (32))))) ->
      subrange (!zmtime, (Big_int.of_int (63)), (Big_int.of_int (32)))
    | (zb__50, zl__31) when ((eq_list (zb__50, [B1; B1; B0; B0; B1; B0; B0; B0; B0; B0; B1; B0])) && (eq_int (zl__31, (Big_int.of_int (32))))) ->
      subrange (!zminstret, (Big_int.of_int (63)), (Big_int.of_int (32)))
    | (zb__51, _) when (eq_list (zb__51, [B0; B0; B0; B0; B0; B0; B0; B1; B0; B1; B0; B1])) ->
      zread_seed_csr ()
    | _ ->
      begin
        match (zext_read_CSR zcsr) with
        | ZSome (zres) -> zres
        | ZNone (()) ->
          begin
            print_bits ("unhandled read to CSR ", zcsr);
            zzzero_extend ((Big_int.of_int (32)), [B0; B0; B0; B0])
          end
      end
  end) in
  begin
    (if (Platform.get_config_print_reg ()) then (Platform.print_reg (concat_str ("CSR ", (concat_str ((zcsr_name zcsr), (concat_str (" -> ", (string_of_bits zres)))))))) else ());
    zres
  end)

and zwriteCSR ((zcsr, zvalue) : ((bit) list * (bit) list)) : unit = sail_call (fun r ->
  let zres = (begin
    match ((fun (v0, v1) -> (v1, v0)) ((Big_int.of_int (32)), zcsr)) with
    | (zb__0, _) when (eq_list (zb__0, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      begin
        (zmstatus := (zlegalizze_mstatus (!zmstatus, zvalue)));
        ZSome (!zmstatus.zbits)
      end
    | (zb__1, _) when (eq_list (zb__1, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0; B1])) ->
      begin
        (zmisa := (zlegalizze_misa (!zmisa, zvalue)));
        ZSome (!zmisa.zbits)
      end
    | (zb__2, _) when (eq_list (zb__2, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      begin
        (zmedeleg := (zlegalizze_medeleg (!zmedeleg, zvalue)));
        ZSome (!zmedeleg.zbits)
      end
    | (zb__3, _) when (eq_list (zb__3, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B1; B1])) ->
      begin
        (zmideleg := (zlegalizze_mideleg (!zmideleg, zvalue)));
        ZSome (!zmideleg.zbits)
      end
    | (zb__4, _) when (eq_list (zb__4, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B1; B0; B0])) ->
      begin (zmie := (zlegalizze_mie (!zmie, zvalue))); ZSome (!zmie.zbits) end
    | (zb__5, _) when (eq_list (zb__5, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B1; B0; B1])) ->
      ZSome (zset_mtvec zvalue)
    | (zb__6, _) when (eq_list (zb__6, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B1; B1; B0])) ->
      begin
        (zmcounteren := (zlegalizze_mcounteren (!zmcounteren, zvalue)));
        ZSome (zzzero_extend ((Big_int.of_int (32)), (!zmcounteren.zbits)))
      end
    | (zb__7, zl__19) when ((eq_list (zb__7, [B0; B0; B1; B1; B0; B0; B0; B0; B1; B0; B1; B0])) && (eq_int (zl__19, (Big_int.of_int (32))))) ->
      begin
        (zmenvcfg := (zlegalizze_envcfg (!zmenvcfg, (append ((subrange ((!zmenvcfg.zbits), (Big_int.of_int (63)), (Big_int.of_int (32)))), zvalue)))));
        ZSome (subrange ((!zmenvcfg.zbits), (Big_int.of_int (31)), Big_int.zero))
      end
    | (zb__8, zl__20) when ((eq_list (zb__8, [B0; B0; B1; B1; B0; B0; B0; B0; B1; B0; B1; B0])) && (eq_int (zl__20, (Big_int.of_int (64))))) ->
      begin
        (zmenvcfg := (zlegalizze_envcfg (!zmenvcfg, zvalue)));
        ZSome (!zmenvcfg.zbits)
      end
    | (zb__9, zl__21) when ((eq_list (zb__9, [B0; B0; B1; B1; B0; B0; B0; B1; B0; B0; B0; B0])) && (eq_int (zl__21, (Big_int.of_int (32))))) ->
      ZSome (!zmstatush.zbits)
    | (zb__10, zl__22) when ((eq_list (zb__10, [B0; B0; B1; B1; B0; B0; B0; B1; B1; B0; B1; B0])) && (eq_int (zl__22, (Big_int.of_int (32))))) ->
      begin
        (zmenvcfg := (zlegalizze_envcfg (!zmenvcfg, (append (zvalue, (subrange ((!zmenvcfg.zbits), (Big_int.of_int (31)), Big_int.zero)))))));
        ZSome (subrange ((!zmenvcfg.zbits), (Big_int.of_int (63)), (Big_int.of_int (32))))
      end
    | (zb__11, _) when (eq_list (zb__11, [B0; B0; B1; B1; B0; B0; B1; B0; B0; B0; B0; B0])) ->
      begin
        (zmcountinhibit := (zlegalizze_mcountinhibit (!zmcountinhibit, zvalue)));
        ZSome (zzzero_extend ((Big_int.of_int (32)), (!zmcountinhibit.zbits)))
      end
    | (zb__12, _) when (eq_list (zb__12, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B0; B0])) ->
      begin (zmscratch := zvalue); ZSome !zmscratch end
    | (zb__13, _) when (eq_list (zb__13, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B0; B1])) ->
      ZSome (zset_xret_target (ZMachine, zvalue))
    | (zb__14, _) when (eq_list (zb__14, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B1; B0])) ->
      begin
        (zmcause := ({!zmcause with ZMcause.zbits = zvalue}));
        ZSome (!zmcause.zbits)
      end
    | (zb__15, _) when (eq_list (zb__15, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B0; B1; B1])) ->
      begin (zmtval := zvalue); ZSome !zmtval end
    | (zb__16, _) when (eq_list (zb__16, [B0; B0; B1; B1; B0; B1; B0; B0; B0; B1; B0; B0])) ->
      begin (zmip := (zlegalizze_mip (!zmip, zvalue))); ZSome (!zmip.zbits) end
    | (zv__38, _) when ((let zidx = (subrange (zv__38, (Big_int.of_int (3)), Big_int.zero)) in
    (eq_bit ((access (zidx, Big_int.zero)), B0)) || (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32))))) && (eq_list ((subrange (zv__38, (Big_int.of_int (11)), (Big_int.of_int (4)))), [B0; B0; B1; B1; B1; B0; B1; B0]))) ->
      let zidx = (subrange (zv__38, (Big_int.of_int (3)), Big_int.zero)) in
      let zidx = (uint zidx) in
      begin zpmpWriteCfgReg (zidx, zvalue); ZSome (zpmpReadCfgReg zidx) end
    | (zv__40, _) when (eq_list ((subrange (zv__40, (Big_int.of_int (11)), (Big_int.of_int (4)))), [B0; B0; B1; B1; B1; B0; B1; B1])) ->
      let zidx = (subrange (zv__40, (Big_int.of_int (3)), Big_int.zero)) in
      let zidx = (uint (append ([B0; B0], zidx))) in
      begin zpmpWriteAddrReg (zidx, zvalue); ZSome (zpmpReadAddrReg zidx) end
    | (zv__42, _) when (eq_list ((subrange (zv__42, (Big_int.of_int (11)), (Big_int.of_int (4)))), [B0; B0; B1; B1; B1; B1; B0; B0])) ->
      let zidx = (subrange (zv__42, (Big_int.of_int (3)), Big_int.zero)) in
      let zidx = (uint (append ([B0; B1], zidx))) in
      begin zpmpWriteAddrReg (zidx, zvalue); ZSome (zpmpReadAddrReg zidx) end
    | (zv__44, _) when (eq_list ((subrange (zv__44, (Big_int.of_int (11)), (Big_int.of_int (4)))), [B0; B0; B1; B1; B1; B1; B0; B1])) ->
      let zidx = (subrange (zv__44, (Big_int.of_int (3)), Big_int.zero)) in
      let zidx = (uint (append ([B1; B0], zidx))) in
      begin zpmpWriteAddrReg (zidx, zvalue); ZSome (zpmpReadAddrReg zidx) end
    | (zv__46, _) when (eq_list ((subrange (zv__46, (Big_int.of_int (11)), (Big_int.of_int (4)))), [B0; B0; B1; B1; B1; B1; B1; B0])) ->
      let zidx = (subrange (zv__46, (Big_int.of_int (3)), Big_int.zero)) in
      let zidx = (uint (append ([B1; B1], zidx))) in
      begin zpmpWriteAddrReg (zidx, zvalue); ZSome (zpmpReadAddrReg zidx) end
    | (zb__17, _) when (eq_list (zb__17, [B1; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      begin
        (zmcycle := (update_subrange (!zmcycle, (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero, zvalue)));
        ZSome zvalue
      end
    | (zb__18, _) when (eq_list (zb__18, [B1; B0; B1; B1; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      begin
        (zminstret := (update_subrange (!zminstret, (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero, zvalue)));
        (zminstret_increment := false);
        ZSome zvalue
      end
    | (zb__19, zl__23) when ((eq_list (zb__19, [B1; B0; B1; B1; B1; B0; B0; B0; B0; B0; B0; B0])) && (eq_int (zl__23, (Big_int.of_int (32))))) ->
      begin
        (zmcycle := (update_subrange (!zmcycle, (Big_int.of_int (63)), (Big_int.of_int (32)), zvalue)));
        ZSome zvalue
      end
    | (zb__20, zl__24) when ((eq_list (zb__20, [B1; B0; B1; B1; B1; B0; B0; B0; B0; B0; B1; B0])) && (eq_int (zl__24, (Big_int.of_int (32))))) ->
      begin
        (zminstret := (update_subrange (!zminstret, (Big_int.of_int (63)), (Big_int.of_int (32)), zvalue)));
        (zminstret_increment := false);
        ZSome zvalue
      end
    | (zb__21, _) when (eq_list (zb__21, [B0; B1; B1; B1; B1; B0; B1; B0; B0; B0; B0; B0])) ->
      begin (ztselect := zvalue); ZSome !ztselect end
    | (zb__22, _) when (eq_list (zb__22, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      begin
        (zmstatus := (zlegalizze_sstatus (!zmstatus, zvalue)));
        ZSome (!zmstatus.zbits)
      end
    | (zb__23, _) when (eq_list (zb__23, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      begin
        (zsedeleg := (zlegalizze_sedeleg (!zsedeleg, zvalue)));
        ZSome (!zsedeleg.zbits)
      end
    | (zb__24, _) when (eq_list (zb__24, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B1; B1])) ->
      begin
        (zsideleg := ({!zsideleg with ZSinterrupts.zbits = zvalue}));
        ZSome (!zsideleg.zbits)
      end
    | (zb__25, _) when (eq_list (zb__25, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B1; B0; B0])) ->
      begin
        (zmie := (zlegalizze_sie (!zmie, !zmideleg, zvalue)));
        ZSome (!zmie.zbits)
      end
    | (zb__26, _) when (eq_list (zb__26, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B1; B0; B1])) ->
      ZSome (zset_stvec zvalue)
    | (zb__27, _) when (eq_list (zb__27, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B1; B1; B0])) ->
      begin
        (zscounteren := (zlegalizze_scounteren (!zscounteren, zvalue)));
        ZSome (zzzero_extend ((Big_int.of_int (32)), (!zscounteren.zbits)))
      end
    | (zb__28, _) when (eq_list (zb__28, [B0; B0; B0; B1; B0; B0; B0; B0; B1; B0; B1; B0])) ->
      begin
        (zsenvcfg := (zlegalizze_envcfg (!zsenvcfg, (zzzero_extend ((Big_int.of_int (64)), zvalue)))));
        ZSome (subrange ((!zsenvcfg.zbits), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero))
      end
    | (zb__29, _) when (eq_list (zb__29, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B0; B0])) ->
      begin (zsscratch := zvalue); ZSome !zsscratch end
    | (zb__30, _) when (eq_list (zb__30, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B0; B1])) ->
      ZSome (zset_xret_target (ZSupervisor, zvalue))
    | (zb__31, _) when (eq_list (zb__31, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B1; B0])) ->
      begin
        (zscause := ({!zscause with ZMcause.zbits = zvalue}));
        ZSome (!zscause.zbits)
      end
    | (zb__32, _) when (eq_list (zb__32, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B1; B1])) ->
      begin (zstval := zvalue); ZSome !zstval end
    | (zb__33, _) when (eq_list (zb__33, [B0; B0; B0; B1; B0; B1; B0; B0; B0; B1; B0; B0])) ->
      begin
        (zmip := (zlegalizze_sip (!zmip, !zmideleg, zvalue)));
        ZSome (!zmip.zbits)
      end
    | (zb__34, _) when (eq_list (zb__34, [B0; B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B0])) ->
      begin
        (zsatp := (zlegalizze_satp ((zcur_Architecture ()), !zsatp, zvalue)));
        ZSome !zsatp
      end
    | (zb__35, _) when (eq_list (zb__35, [B0; B0; B0; B0; B0; B0; B0; B1; B0; B1; B0; B1])) ->
      zwrite_seed_csr ()
    | (zb__36, _) when (eq_list (zb__36, [B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B0; B0])) ->
      let zvstart_length = (zget_vlen_pow ()) in
      begin
        (zvstart := (zzzero_extend ((Big_int.of_int (16)), (subrange (zvalue, (sub_int (zvstart_length, (Big_int.of_int (1)))), Big_int.zero)))));
        ZSome (zzzero_extend ((Big_int.of_int (32)), !zvstart))
      end
    | (zb__37, _) when (eq_list (zb__37, [B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B0; B1])) ->
      begin
        (zvxsat := (subrange (zvalue, Big_int.zero, Big_int.zero)));
        ZSome (zzzero_extend ((Big_int.of_int (32)), !zvxsat))
      end
    | (zb__38, _) when (eq_list (zb__38, [B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B1; B0])) ->
      begin
        (zvxrm := (subrange (zvalue, (Big_int.of_int (1)), Big_int.zero)));
        ZSome (zzzero_extend ((Big_int.of_int (32)), !zvxrm))
      end
    | (zb__39, _) when (eq_list (zb__39, [B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B1; B1])) ->
      begin
        (zvcsr := ({!zvcsr with ZVcsr.zbits = subrange (zvalue, (Big_int.of_int (2)), Big_int.zero)}));
        ZSome (zzzero_extend ((Big_int.of_int (32)), (!zvcsr.zbits)))
      end
    | (zb__40, _) when (eq_list (zb__40, [B1; B1; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0])) ->
      begin (zvl := zvalue); ZSome !zvl end
    | (zb__41, _) when (eq_list (zb__41, [B1; B1; B0; B0; B0; B0; B1; B0; B0; B0; B0; B1])) ->
      begin
        (zvtype := ({!zvtype with ZVtype.zbits = zvalue}));
        ZSome (!zvtype.zbits)
      end
    | (zb__42, _) when (eq_list (zb__42, [B1; B1; B0; B0; B0; B0; B1; B0; B0; B0; B1; B0])) ->
      begin (zvlenb := zvalue); ZSome !zvlenb end
    | _ -> zext_write_CSR (zcsr, zvalue)
  end) in
  begin
    match zres with
    | ZSome (zv) ->
      (if (Platform.get_config_print_reg ()) then (Platform.print_reg (concat_str ("CSR ", (concat_str ((zcsr_name zcsr), (concat_str (" <- ", (concat_str ((string_of_bits zv), (concat_str (" (input: ", (concat_str ((string_of_bits zvalue), ")"))))))))))))) else ())
    | ZNone (()) -> print_bits ("unhandled write to CSR ", zcsr)
  end)

and zmaybe_i_forwards (zargz3 : (bool)) : string = sail_call (fun r ->
  begin
    match zargz3 with
    | zp0z3 when (eq_bool (zp0z3, true)) -> "i"
    | zp0z3 when (eq_bool (zp0z3, false)) -> ""
  end)

and zmaybe_i_backwards (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | "i" -> true | "" -> false end)

and zmaybe_i_forwards_matches (zargz3 : (bool)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zp0z3 when (eq_bool (zp0z3, true)) -> true
    | zp0z3 when (eq_bool (zp0z3, false)) -> true
    | _ -> false
  end)

and zmaybe_i_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin match zargz3 with | "i" -> true | "" -> true | _ -> false end)

and zcsr_mnemonic_backwards (zargz3 : (string)) : zcsrop = sail_call (fun r ->
  begin
    match zargz3 with
    | "csrrw" -> ZCSRRW
    | "csrrs" -> ZCSRRS
    | "csrrc" -> ZCSRRC
  end)

and zcsr_mnemonic_forwards_matches (zargz3 : (zcsrop)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | ZCSRRW -> true
    | ZCSRRS -> true
    | ZCSRRC -> true
    | _ -> false
  end)

and zcsr_mnemonic_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | "csrrw" -> true
    | "csrrs" -> true
    | "csrrc" -> true
    | _ -> false
  end)

and zencdec_capmode_forwards (zargz3 : (zast)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | ZAUIPCC ((zimm, zcd)) ->
      append ((zimm), (append ((zcd), [B0; B0; B1; B0; B1; B1; B1])))
    | ZCJALR ((zimm, zcs1, zcd)) ->
      append ((zimm), (append ((zcs1), (append ([B0; B0; B0], (append ((zcd), [B1; B1; B0; B0; B1; B1; B1])))))))
    | ZCJAL ((zv__48, zcd)) when (eq_list ((subrange (zv__48, Big_int.zero, Big_int.zero)), [B0])) ->
      let zimm_19 = (subrange (zv__48, (Big_int.of_int (20)), (Big_int.of_int (20)))) in
      let zimm_8 = (subrange (zv__48, (Big_int.of_int (11)), (Big_int.of_int (11)))) in
      let zimm_7_0 = (subrange (zv__48, (Big_int.of_int (19)), (Big_int.of_int (12)))) in
      let zimm_19 = (subrange (zv__48, (Big_int.of_int (20)), (Big_int.of_int (20)))) in
      let zimm_18_13 = (subrange (zv__48, (Big_int.of_int (10)), (Big_int.of_int (5)))) in
      let zimm_12_9 = (subrange (zv__48, (Big_int.of_int (4)), (Big_int.of_int (1)))) in
      append ((zimm_19), (append ((zimm_18_13), (append ((zimm_12_9), (append ((zimm_8), (append ((zimm_7_0), (append ((zcd), [B1; B1; B0; B1; B1; B1; B1])))))))))))
    | ZNOT_CAPMODE (zs) -> zs
  end)

and zencdec_capmode_backwards (zargz3 : ((bit) list)) : zast = sail_call (fun r ->
  begin
    match zargz3 with
    | zv__50 when (eq_list ((subrange (zv__50, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B1; B0; B1; B1; B1])) ->
      let zimm = (subrange (zv__50, (Big_int.of_int (31)), (Big_int.of_int (12)))) in
      let zimm = (subrange (zv__50, (Big_int.of_int (31)), (Big_int.of_int (12)))) in
      let zcd = (subrange (zv__50, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
      ZAUIPCC ((fun (v0, v1) -> (v1, v0)) (zcd, zimm))
    | zv__52 when ((eq_list ((subrange (zv__52, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__52, (Big_int.of_int (6)), Big_int.zero)), [B1; B1; B0; B0; B1; B1; B1]))) ->
      let zimm = (subrange (zv__52, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
      let zimm = (subrange (zv__52, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
      let zcs1 = (subrange (zv__52, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
      let zcd = (subrange (zv__52, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
      ZCJALR ((fun (v0, v1, v2) -> (v2, v1, v0)) (zcd, zcs1, zimm))
    | zv__55 when (eq_list ((subrange (zv__55, (Big_int.of_int (6)), Big_int.zero)), [B1; B1; B0; B1; B1; B1; B1])) ->
      let zimm_19 = (subrange (zv__55, (Big_int.of_int (31)), (Big_int.of_int (31)))) in
      let zimm_8 = (subrange (zv__55, (Big_int.of_int (20)), (Big_int.of_int (20)))) in
      let zimm_7_0 = (subrange (zv__55, (Big_int.of_int (19)), (Big_int.of_int (12)))) in
      let zimm_19 = (subrange (zv__55, (Big_int.of_int (31)), (Big_int.of_int (31)))) in
      let zimm_18_13 = (subrange (zv__55, (Big_int.of_int (30)), (Big_int.of_int (25)))) in
      let zimm_12_9 = (subrange (zv__55, (Big_int.of_int (24)), (Big_int.of_int (21)))) in
      let zcd = (subrange (zv__55, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
      ZCJAL ((fun (v0, v1) -> (v1, v0)) (zcd, append ((zimm_19), (append ((zimm_7_0), (append ((zimm_8), (append ((zimm_18_13), (append ((zimm_12_9), [B0])))))))))))
    | zs -> ZNOT_CAPMODE zs
  end)

and zencdec_capmode_forwards_matches (zargz3 : (zast)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | ZAUIPCC ((zimm, zcd)) -> true
    | ZCJALR ((zimm, zcs1, zcd)) -> true
    | ZCJAL ((zv__57, zcd)) when (eq_list ((subrange (zv__57, Big_int.zero, Big_int.zero)), [B0])) ->
      true
    | ZNOT_CAPMODE (zs) -> true
    | _ -> false
  end)

and zencdec_capmode_backwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zv__59 when (eq_list ((subrange (zv__59, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B1; B0; B1; B1; B1])) ->
      true
    | zv__61 when ((eq_list ((subrange (zv__61, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__61, (Big_int.of_int (6)), Big_int.zero)), [B1; B1; B0; B0; B1; B1; B1]))) ->
      true
    | zv__64 when (eq_list ((subrange (zv__64, (Big_int.of_int (6)), Big_int.zero)), [B1; B1; B0; B1; B1; B1; B1])) ->
      true
    | zs -> true
    | _ -> false
  end)

and zencdec_compressed_capmode_forwards (zargz3 : (zast)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | ZC_CLC ((zcdc, zcsc1, zv__66)) when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && (eq_list ((subrange (zv__66, (Big_int.of_int (3)), Big_int.zero)), [B0; B0; B0; B0]))) ->
      let zui8 = (subrange (zv__66, (Big_int.of_int (8)), (Big_int.of_int (8)))) in
      let zui8 = (subrange (zv__66, (Big_int.of_int (8)), (Big_int.of_int (8)))) in
      let zui76 = (subrange (zv__66, (Big_int.of_int (7)), (Big_int.of_int (6)))) in
      let zui54 = (subrange (zv__66, (Big_int.of_int (5)), (Big_int.of_int (4)))) in
      append ([B0; B0; B1], (append ((zui54), (append ((zui8), (append ((zcsc1), (append ((zui76), (append ((zcdc), [B0; B0])))))))))))
    | ZC_CLC ((zcdc, zcsc1, zv__68)) when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && ((eq_list ((subrange (zv__68, (Big_int.of_int (8)), (Big_int.of_int (8)))), [B0])) && (eq_list ((subrange (zv__68, (Big_int.of_int (2)), Big_int.zero)), [B0; B0; B0])))) ->
      let zui76 = (subrange (zv__68, (Big_int.of_int (7)), (Big_int.of_int (6)))) in
      let zui53 = (subrange (zv__68, (Big_int.of_int (5)), (Big_int.of_int (3)))) in
      append ([B0; B1; B1], (append ((zui53), (append ((zcsc1), (append ((zui76), (append ((zcdc), [B0; B0])))))))))
    | ZC_CLCSP ((zcd, zv__71)) when (((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && (zneq_bits (zcd, (zzzeros_implicit (Big_int.of_int (5)))))) && (eq_list ((subrange (zv__71, (Big_int.of_int (3)), Big_int.zero)), [B0; B0; B0; B0]))) ->
      let zui96 = (subrange (zv__71, (Big_int.of_int (9)), (Big_int.of_int (6)))) in
      let zui96 = (subrange (zv__71, (Big_int.of_int (9)), (Big_int.of_int (6)))) in
      let zui5 = (subrange (zv__71, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let zui4 = (subrange (zv__71, (Big_int.of_int (4)), (Big_int.of_int (4)))) in
      append ([B0; B0; B1], (append ((zui5), (append ((zcd), (append ((zui4), (append ((zui96), [B1; B0])))))))))
    | ZC_CLCSP ((zcd, zv__73)) when (((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && (zneq_bits (zcd, (zzzeros_implicit (Big_int.of_int (5)))))) && ((eq_list ((subrange (zv__73, (Big_int.of_int (9)), (Big_int.of_int (9)))), [B0])) && (eq_list ((subrange (zv__73, (Big_int.of_int (2)), Big_int.zero)), [B0; B0; B0])))) ->
      let zui86 = (subrange (zv__73, (Big_int.of_int (8)), (Big_int.of_int (6)))) in
      let zui5 = (subrange (zv__73, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let zui43 = (subrange (zv__73, (Big_int.of_int (4)), (Big_int.of_int (3)))) in
      append ([B0; B1; B1], (append ((zui5), (append ((zcd), (append ((zui43), (append ((zui86), [B1; B0])))))))))
    | ZC_ILLEGAL (zv__76) when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__76, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B1])) && ((eq_list ((subrange (zv__76, (Big_int.of_int (11)), (Big_int.of_int (7)))), [B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__76, (Big_int.of_int (1)), Big_int.zero)), [B1; B0]))))) ->
      let zui96 = (subrange (zv__76, (Big_int.of_int (5)), (Big_int.of_int (2)))) in
      let zui5 = (subrange (zv__76, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let zui4 = (subrange (zv__76, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
      append ([B0; B0; B1], (append ((zui5), (append ([B0; B0; B0; B0; B0], (append ((zui4), (append ((zui96), [B1; B0])))))))))
    | ZC_ILLEGAL (zv__80) when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && ((eq_list ((subrange (zv__80, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B1])) && ((eq_list ((subrange (zv__80, (Big_int.of_int (11)), (Big_int.of_int (7)))), [B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__80, (Big_int.of_int (1)), Big_int.zero)), [B1; B0]))))) ->
      let zui86 = (subrange (zv__80, (Big_int.of_int (4)), (Big_int.of_int (2)))) in
      let zui5 = (subrange (zv__80, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let zui43 = (subrange (zv__80, (Big_int.of_int (6)), (Big_int.of_int (5)))) in
      append ([B0; B1; B1], (append ((zui5), (append ([B0; B0; B0; B0; B0], (append ((zui43), (append ((zui86), [B1; B0])))))))))
    | ZC_CSC ((zcsc2, zcsc1, zv__84)) when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && (eq_list ((subrange (zv__84, (Big_int.of_int (3)), Big_int.zero)), [B0; B0; B0; B0]))) ->
      let zui8 = (subrange (zv__84, (Big_int.of_int (8)), (Big_int.of_int (8)))) in
      let zui8 = (subrange (zv__84, (Big_int.of_int (8)), (Big_int.of_int (8)))) in
      let zui76 = (subrange (zv__84, (Big_int.of_int (7)), (Big_int.of_int (6)))) in
      let zui54 = (subrange (zv__84, (Big_int.of_int (5)), (Big_int.of_int (4)))) in
      append ([B1; B0; B1], (append ((zui54), (append ((zui8), (append ((zcsc1), (append ((zui76), (append ((zcsc2), [B0; B0])))))))))))
    | ZC_CSC ((zcsc2, zcsc1, zv__86)) when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && ((eq_list ((subrange (zv__86, (Big_int.of_int (8)), (Big_int.of_int (8)))), [B0])) && (eq_list ((subrange (zv__86, (Big_int.of_int (2)), Big_int.zero)), [B0; B0; B0])))) ->
      let zui76 = (subrange (zv__86, (Big_int.of_int (7)), (Big_int.of_int (6)))) in
      let zui53 = (subrange (zv__86, (Big_int.of_int (5)), (Big_int.of_int (3)))) in
      append ([B1; B1; B1], (append ((zui53), (append ((zcsc1), (append ((zui76), (append ((zcsc2), [B0; B0])))))))))
    | ZC_CSCSP ((zcs2, zv__89)) when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && (eq_list ((subrange (zv__89, (Big_int.of_int (3)), Big_int.zero)), [B0; B0; B0; B0]))) ->
      let zui96 = (subrange (zv__89, (Big_int.of_int (9)), (Big_int.of_int (6)))) in
      let zui96 = (subrange (zv__89, (Big_int.of_int (9)), (Big_int.of_int (6)))) in
      let zui54 = (subrange (zv__89, (Big_int.of_int (5)), (Big_int.of_int (4)))) in
      append ([B1; B0; B1], (append ((zui54), (append ((zui96), (append ((zcs2), [B1; B0])))))))
    | ZC_CSCSP ((zcs2, zv__91)) when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && ((eq_list ((subrange (zv__91, (Big_int.of_int (9)), (Big_int.of_int (9)))), [B0])) && (eq_list ((subrange (zv__91, (Big_int.of_int (2)), Big_int.zero)), [B0; B0; B0])))) ->
      let zui86 = (subrange (zv__91, (Big_int.of_int (8)), (Big_int.of_int (6)))) in
      let zui53 = (subrange (zv__91, (Big_int.of_int (5)), (Big_int.of_int (3)))) in
      append ([B1; B1; B1], (append ((zui53), (append ((zui86), (append ((zcs2), [B1; B0])))))))
    | ZC_CIncAddr16CSP (zv__94) when ((let znzzi9 = (subrange (zv__94, (Big_int.of_int (9)), (Big_int.of_int (9)))) in
    let znzzi9 = (subrange (zv__94, (Big_int.of_int (9)), (Big_int.of_int (9)))) in
    let znzzi87 = (subrange (zv__94, (Big_int.of_int (8)), (Big_int.of_int (7)))) in
    let znzzi6 = (subrange (zv__94, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
    let znzzi5 = (subrange (zv__94, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzi4 = (subrange (zv__94, (Big_int.of_int (4)), (Big_int.of_int (4)))) in
    zneq_bits ((append (znzzi9, (append (znzzi87, (append (znzzi6, (append (znzzi5, znzzi4)))))))), [B0; B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__94, (Big_int.of_int (3)), Big_int.zero)), [B0; B0; B0; B0]))) ->
      let znzzi9 = (subrange (zv__94, (Big_int.of_int (9)), (Big_int.of_int (9)))) in
      let znzzi9 = (subrange (zv__94, (Big_int.of_int (9)), (Big_int.of_int (9)))) in
      let znzzi87 = (subrange (zv__94, (Big_int.of_int (8)), (Big_int.of_int (7)))) in
      let znzzi6 = (subrange (zv__94, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
      let znzzi5 = (subrange (zv__94, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let znzzi4 = (subrange (zv__94, (Big_int.of_int (4)), (Big_int.of_int (4)))) in
      append ([B0; B1; B1], (append ((znzzi9), (append ([B0; B0; B0; B1; B0], (append ((znzzi4), (append ((znzzi6), (append ((znzzi87), (append ((znzzi5), [B0; B1])))))))))))))
    | ZC_CIncAddr4CSPN ((zcdc, zv__96)) when ((let znzz96 = (subrange (zv__96, (Big_int.of_int (9)), (Big_int.of_int (6)))) in
    let znzz96 = (subrange (zv__96, (Big_int.of_int (9)), (Big_int.of_int (6)))) in
    let znzz54 = (subrange (zv__96, (Big_int.of_int (5)), (Big_int.of_int (4)))) in
    let znzz3 = (subrange (zv__96, (Big_int.of_int (3)), (Big_int.of_int (3)))) in
    let znzz2 = (subrange (zv__96, (Big_int.of_int (2)), (Big_int.of_int (2)))) in
    zneq_bits ((append (znzz96, (append (znzz54, (append (znzz3, znzz2)))))), [B0; B0; B0; B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__96, (Big_int.of_int (1)), Big_int.zero)), [B0; B0]))) ->
      let znzz96 = (subrange (zv__96, (Big_int.of_int (9)), (Big_int.of_int (6)))) in
      let znzz96 = (subrange (zv__96, (Big_int.of_int (9)), (Big_int.of_int (6)))) in
      let znzz54 = (subrange (zv__96, (Big_int.of_int (5)), (Big_int.of_int (4)))) in
      let znzz3 = (subrange (zv__96, (Big_int.of_int (3)), (Big_int.of_int (3)))) in
      let znzz2 = (subrange (zv__96, (Big_int.of_int (2)), (Big_int.of_int (2)))) in
      append ([B0; B0; B0], (append ((znzz54), (append ((znzz96), (append ((znzz2), (append ((znzz3), (append ((zcdc), [B0; B0])))))))))))
    | ZC_CJALR (zcs1) when (zneq_bits (zcs1, zzzreg)) ->
      append ([B1; B0; B0], (append ([B1], (append ((zcs1), (append ([B0; B0; B0; B0; B0], [B1; B0])))))))
    | ZC_CJR (zcs1) when (zneq_bits (zcs1, zzzreg)) ->
      append ([B1; B0; B0], (append ([B0], (append ((zcs1), (append ([B0; B0; B0; B0; B0], [B1; B0])))))))
    | ZC_CJAL (zv__98) when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && (eq_list ((subrange (zv__98, Big_int.zero, Big_int.zero)), [B0]))) ->
      let zi11 = (subrange (zv__98, (Big_int.of_int (11)), (Big_int.of_int (11)))) in
      let zi98 = (subrange (zv__98, (Big_int.of_int (9)), (Big_int.of_int (8)))) in
      let zi7 = (subrange (zv__98, (Big_int.of_int (7)), (Big_int.of_int (7)))) in
      let zi6 = (subrange (zv__98, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
      let zi5 = (subrange (zv__98, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let zi4 = (subrange (zv__98, (Big_int.of_int (4)), (Big_int.of_int (4)))) in
      let zi31 = (subrange (zv__98, (Big_int.of_int (3)), (Big_int.of_int (1)))) in
      let zi11 = (subrange (zv__98, (Big_int.of_int (11)), (Big_int.of_int (11)))) in
      let zi10 = (subrange (zv__98, (Big_int.of_int (10)), (Big_int.of_int (10)))) in
      append ([B0; B0; B1], (append ((zi11), (append ((zi4), (append ((zi98), (append ((zi10), (append ((zi6), (append ((zi7), (append ((zi31), (append ((zi5), [B0; B1])))))))))))))))))
    | ZNOT_C_CAPMODE (zs) -> zs
  end)

and zencdec_compressed_capmode_backwards (zargz3 : ((bit) list)) : zast = sail_call (fun r ->
  begin
    match zargz3 with
    | zv__100 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__100, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B1])) && (eq_list ((subrange (zv__100, (Big_int.of_int (1)), Big_int.zero)), [B0; B0])))) ->
      let zui8 = (subrange (zv__100, (Big_int.of_int (10)), (Big_int.of_int (10)))) in
      let zui76 = (subrange (zv__100, (Big_int.of_int (6)), (Big_int.of_int (5)))) in
      let zui54 = (subrange (zv__100, (Big_int.of_int (12)), (Big_int.of_int (11)))) in
      let zcsc1 = (subrange (zv__100, (Big_int.of_int (9)), (Big_int.of_int (7)))) in
      let zcdc = (subrange (zv__100, (Big_int.of_int (4)), (Big_int.of_int (2)))) in
      ZC_CLC ((fun (v0, v1, v2) -> (v2, v1, v0)) (append ((zui8), (append ((zui76), (append ((zui54), [B0; B0; B0; B0]))))), zcsc1, zcdc))
    | zv__103 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && ((eq_list ((subrange (zv__103, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B1])) && (eq_list ((subrange (zv__103, (Big_int.of_int (1)), Big_int.zero)), [B0; B0])))) ->
      let zui76 = (subrange (zv__103, (Big_int.of_int (6)), (Big_int.of_int (5)))) in
      let zui53 = (subrange (zv__103, (Big_int.of_int (12)), (Big_int.of_int (10)))) in
      let zcsc1 = (subrange (zv__103, (Big_int.of_int (9)), (Big_int.of_int (7)))) in
      let zcdc = (subrange (zv__103, (Big_int.of_int (4)), (Big_int.of_int (2)))) in
      ZC_CLC ((fun (v0, v1, v2) -> (v2, v1, v0)) (append ([B0], (append ((zui76), (append ((zui53), [B0; B0; B0]))))), zcsc1, zcdc))
    | zv__106 when ((let zcd = (subrange (zv__106, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && (zneq_bits (zcd, (zzzeros_implicit (Big_int.of_int (5)))))) && ((eq_list ((subrange (zv__106, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B1])) && (eq_list ((subrange (zv__106, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      let zui96 = (subrange (zv__106, (Big_int.of_int (5)), (Big_int.of_int (2)))) in
      let zui5 = (subrange (zv__106, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let zui4 = (subrange (zv__106, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
      let zcd = (subrange (zv__106, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
      ZC_CLCSP ((fun (v0, v1) -> (v1, v0)) (append ((zui96), (append ((zui5), (append ((zui4), [B0; B0; B0; B0]))))), zcd))
    | zv__109 when ((let zcd = (subrange (zv__109, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && (zneq_bits (zcd, (zzzeros_implicit (Big_int.of_int (5)))))) && ((eq_list ((subrange (zv__109, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B1])) && (eq_list ((subrange (zv__109, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      let zui86 = (subrange (zv__109, (Big_int.of_int (4)), (Big_int.of_int (2)))) in
      let zui5 = (subrange (zv__109, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let zui43 = (subrange (zv__109, (Big_int.of_int (6)), (Big_int.of_int (5)))) in
      let zcd = (subrange (zv__109, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
      ZC_CLCSP ((fun (v0, v1) -> (v1, v0)) (append ([B0], (append ((zui86), (append ((zui5), (append ((zui43), [B0; B0; B0]))))))), zcd))
    | zv__112 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__112, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B1])) && ((eq_list ((subrange (zv__112, (Big_int.of_int (11)), (Big_int.of_int (7)))), [B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__112, (Big_int.of_int (1)), Big_int.zero)), [B1; B0]))))) ->
      let zui96 = (subrange (zv__112, (Big_int.of_int (5)), (Big_int.of_int (2)))) in
      let zui5 = (subrange (zv__112, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let zui4 = (subrange (zv__112, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
      ZC_ILLEGAL (append ([B0; B0; B1], (append ((zui5), (append ([B0; B0; B0; B0; B0], (append ((zui4), (append ((zui96), [B1; B0]))))))))))
    | zv__116 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && ((eq_list ((subrange (zv__116, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B1])) && ((eq_list ((subrange (zv__116, (Big_int.of_int (11)), (Big_int.of_int (7)))), [B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__116, (Big_int.of_int (1)), Big_int.zero)), [B1; B0]))))) ->
      let zui86 = (subrange (zv__116, (Big_int.of_int (4)), (Big_int.of_int (2)))) in
      let zui5 = (subrange (zv__116, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let zui43 = (subrange (zv__116, (Big_int.of_int (6)), (Big_int.of_int (5)))) in
      ZC_ILLEGAL (append ([B0; B1; B1], (append ((zui5), (append ([B0; B0; B0; B0; B0], (append ((zui43), (append ((zui86), [B1; B0]))))))))))
    | zv__120 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__120, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B0; B1])) && (eq_list ((subrange (zv__120, (Big_int.of_int (1)), Big_int.zero)), [B0; B0])))) ->
      let zui8 = (subrange (zv__120, (Big_int.of_int (10)), (Big_int.of_int (10)))) in
      let zui76 = (subrange (zv__120, (Big_int.of_int (6)), (Big_int.of_int (5)))) in
      let zui54 = (subrange (zv__120, (Big_int.of_int (12)), (Big_int.of_int (11)))) in
      let zcsc2 = (subrange (zv__120, (Big_int.of_int (4)), (Big_int.of_int (2)))) in
      let zcsc1 = (subrange (zv__120, (Big_int.of_int (9)), (Big_int.of_int (7)))) in
      ZC_CSC ((fun (v0, v1, v2) -> (v2, v1, v0)) (append ((zui8), (append ((zui76), (append ((zui54), [B0; B0; B0; B0]))))), zcsc1, zcsc2))
    | zv__123 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && ((eq_list ((subrange (zv__123, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B1; B1])) && (eq_list ((subrange (zv__123, (Big_int.of_int (1)), Big_int.zero)), [B0; B0])))) ->
      let zui76 = (subrange (zv__123, (Big_int.of_int (6)), (Big_int.of_int (5)))) in
      let zui53 = (subrange (zv__123, (Big_int.of_int (12)), (Big_int.of_int (10)))) in
      let zcsc2 = (subrange (zv__123, (Big_int.of_int (4)), (Big_int.of_int (2)))) in
      let zcsc1 = (subrange (zv__123, (Big_int.of_int (9)), (Big_int.of_int (7)))) in
      ZC_CSC ((fun (v0, v1, v2) -> (v2, v1, v0)) (append ([B0], (append ((zui76), (append ((zui53), [B0; B0; B0]))))), zcsc1, zcsc2))
    | zv__126 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__126, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B0; B1])) && (eq_list ((subrange (zv__126, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      let zui96 = (subrange (zv__126, (Big_int.of_int (10)), (Big_int.of_int (7)))) in
      let zui54 = (subrange (zv__126, (Big_int.of_int (12)), (Big_int.of_int (11)))) in
      let zcs2 = (subrange (zv__126, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
      ZC_CSCSP ((fun (v0, v1) -> (v1, v0)) (append ((zui96), (append ((zui54), [B0; B0; B0; B0]))), zcs2))
    | zv__129 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && ((eq_list ((subrange (zv__129, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B1; B1])) && (eq_list ((subrange (zv__129, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      let zui86 = (subrange (zv__129, (Big_int.of_int (9)), (Big_int.of_int (7)))) in
      let zui53 = (subrange (zv__129, (Big_int.of_int (12)), (Big_int.of_int (10)))) in
      let zcs2 = (subrange (zv__129, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
      ZC_CSCSP ((fun (v0, v1) -> (v1, v0)) (append ([B0], (append ((zui86), (append ((zui53), [B0; B0; B0]))))), zcs2))
    | zv__132 when ((let znzzi9 = (subrange (zv__132, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
    let znzzi87 = (subrange (zv__132, (Big_int.of_int (4)), (Big_int.of_int (3)))) in
    let znzzi6 = (subrange (zv__132, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzi5 = (subrange (zv__132, (Big_int.of_int (2)), (Big_int.of_int (2)))) in
    let znzzi4 = (subrange (zv__132, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
    zneq_bits ((append (znzzi9, (append (znzzi87, (append (znzzi6, (append (znzzi5, znzzi4)))))))), [B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__132, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B1])) && ((eq_list ((subrange (zv__132, (Big_int.of_int (11)), (Big_int.of_int (7)))), [B0; B0; B0; B1; B0])) && (eq_list ((subrange (zv__132, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))))) ->
      let znzzi9 = (subrange (zv__132, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let znzzi87 = (subrange (zv__132, (Big_int.of_int (4)), (Big_int.of_int (3)))) in
      let znzzi6 = (subrange (zv__132, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let znzzi5 = (subrange (zv__132, (Big_int.of_int (2)), (Big_int.of_int (2)))) in
      let znzzi4 = (subrange (zv__132, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
      ZC_CIncAddr16CSP (append ((znzzi9), (append ((znzzi87), (append ((znzzi6), (append ((znzzi5), (append ((znzzi4), [B0; B0; B0; B0]))))))))))
    | zv__136 when ((let znzz96 = (subrange (zv__136, (Big_int.of_int (10)), (Big_int.of_int (7)))) in
    let znzz54 = (subrange (zv__136, (Big_int.of_int (12)), (Big_int.of_int (11)))) in
    let znzz3 = (subrange (zv__136, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzz2 = (subrange (zv__136, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
    zneq_bits ((append (znzz96, (append (znzz54, (append (znzz3, znzz2)))))), [B0; B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__136, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B0])) && (eq_list ((subrange (zv__136, (Big_int.of_int (1)), Big_int.zero)), [B0; B0])))) ->
      let znzz96 = (subrange (zv__136, (Big_int.of_int (10)), (Big_int.of_int (7)))) in
      let znzz54 = (subrange (zv__136, (Big_int.of_int (12)), (Big_int.of_int (11)))) in
      let znzz3 = (subrange (zv__136, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let znzz2 = (subrange (zv__136, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
      let zcdc = (subrange (zv__136, (Big_int.of_int (4)), (Big_int.of_int (2)))) in
      ZC_CIncAddr4CSPN ((fun (v0, v1) -> (v1, v0)) (append ((znzz96), (append ((znzz54), (append ((znzz3), (append ((znzz2), [B0; B0]))))))), zcdc))
    | zv__139 when ((let zcs1 = (subrange (zv__139, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    zneq_bits (zcs1, zzzreg)) && ((eq_list ((subrange (zv__139, (Big_int.of_int (15)), (Big_int.of_int (12)))), [B1; B0; B0; B1])) && (eq_list ((subrange (zv__139, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B0; B0; B0; B1; B0])))) ->
      let zcs1 = (subrange (zv__139, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
      ZC_CJALR zcs1
    | zv__144 when ((let zcs1 = (subrange (zv__144, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    zneq_bits (zcs1, zzzreg)) && ((eq_list ((subrange (zv__144, (Big_int.of_int (15)), (Big_int.of_int (12)))), [B1; B0; B0; B0])) && (eq_list ((subrange (zv__144, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B0; B0; B0; B1; B0])))) ->
      let zcs1 = (subrange (zv__144, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
      ZC_CJR zcs1
    | zv__149 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && ((eq_list ((subrange (zv__149, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B1])) && (eq_list ((subrange (zv__149, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      let zi98 = (subrange (zv__149, (Big_int.of_int (10)), (Big_int.of_int (9)))) in
      let zi7 = (subrange (zv__149, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
      let zi6 = (subrange (zv__149, (Big_int.of_int (7)), (Big_int.of_int (7)))) in
      let zi5 = (subrange (zv__149, (Big_int.of_int (2)), (Big_int.of_int (2)))) in
      let zi4 = (subrange (zv__149, (Big_int.of_int (11)), (Big_int.of_int (11)))) in
      let zi31 = (subrange (zv__149, (Big_int.of_int (5)), (Big_int.of_int (3)))) in
      let zi11 = (subrange (zv__149, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let zi10 = (subrange (zv__149, (Big_int.of_int (8)), (Big_int.of_int (8)))) in
      ZC_CJAL (append ((zi11), (append ((zi10), (append ((zi98), (append ((zi7), (append ((zi6), (append ((zi5), (append ((zi4), (append ((zi31), [B0]))))))))))))))))
    | zs -> ZNOT_C_CAPMODE zs
  end)

and zencdec_compressed_capmode_forwards_matches (zargz3 : (zast)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | ZC_CLC ((zcdc, zcsc1, zv__152)) when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && (eq_list ((subrange (zv__152, (Big_int.of_int (3)), Big_int.zero)), [B0; B0; B0; B0]))) ->
      true
    | ZC_CLC ((zcdc, zcsc1, zv__154)) when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && ((eq_list ((subrange (zv__154, (Big_int.of_int (8)), (Big_int.of_int (8)))), [B0])) && (eq_list ((subrange (zv__154, (Big_int.of_int (2)), Big_int.zero)), [B0; B0; B0])))) ->
      true
    | ZC_CLCSP ((zcd, zv__157)) when (((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && (zneq_bits (zcd, (zzzeros_implicit (Big_int.of_int (5)))))) && (eq_list ((subrange (zv__157, (Big_int.of_int (3)), Big_int.zero)), [B0; B0; B0; B0]))) ->
      true
    | ZC_CLCSP ((zcd, zv__159)) when (((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && (zneq_bits (zcd, (zzzeros_implicit (Big_int.of_int (5)))))) && ((eq_list ((subrange (zv__159, (Big_int.of_int (9)), (Big_int.of_int (9)))), [B0])) && (eq_list ((subrange (zv__159, (Big_int.of_int (2)), Big_int.zero)), [B0; B0; B0])))) ->
      true
    | ZC_ILLEGAL (zv__162) when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__162, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B1])) && ((eq_list ((subrange (zv__162, (Big_int.of_int (11)), (Big_int.of_int (7)))), [B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__162, (Big_int.of_int (1)), Big_int.zero)), [B1; B0]))))) ->
      true
    | ZC_ILLEGAL (zv__166) when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && ((eq_list ((subrange (zv__166, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B1])) && ((eq_list ((subrange (zv__166, (Big_int.of_int (11)), (Big_int.of_int (7)))), [B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__166, (Big_int.of_int (1)), Big_int.zero)), [B1; B0]))))) ->
      true
    | ZC_CSC ((zcsc2, zcsc1, zv__170)) when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && (eq_list ((subrange (zv__170, (Big_int.of_int (3)), Big_int.zero)), [B0; B0; B0; B0]))) ->
      true
    | ZC_CSC ((zcsc2, zcsc1, zv__172)) when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && ((eq_list ((subrange (zv__172, (Big_int.of_int (8)), (Big_int.of_int (8)))), [B0])) && (eq_list ((subrange (zv__172, (Big_int.of_int (2)), Big_int.zero)), [B0; B0; B0])))) ->
      true
    | ZC_CSCSP ((zcs2, zv__175)) when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && (eq_list ((subrange (zv__175, (Big_int.of_int (3)), Big_int.zero)), [B0; B0; B0; B0]))) ->
      true
    | ZC_CSCSP ((zcs2, zv__177)) when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && ((eq_list ((subrange (zv__177, (Big_int.of_int (9)), (Big_int.of_int (9)))), [B0])) && (eq_list ((subrange (zv__177, (Big_int.of_int (2)), Big_int.zero)), [B0; B0; B0])))) ->
      true
    | ZC_CIncAddr16CSP (zv__180) when ((let znzzi9 = (subrange (zv__180, (Big_int.of_int (9)), (Big_int.of_int (9)))) in
    let znzzi9 = (subrange (zv__180, (Big_int.of_int (9)), (Big_int.of_int (9)))) in
    let znzzi87 = (subrange (zv__180, (Big_int.of_int (8)), (Big_int.of_int (7)))) in
    let znzzi6 = (subrange (zv__180, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
    let znzzi5 = (subrange (zv__180, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzi4 = (subrange (zv__180, (Big_int.of_int (4)), (Big_int.of_int (4)))) in
    zneq_bits ((append (znzzi9, (append (znzzi87, (append (znzzi6, (append (znzzi5, znzzi4)))))))), [B0; B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__180, (Big_int.of_int (3)), Big_int.zero)), [B0; B0; B0; B0]))) ->
      true
    | ZC_CIncAddr4CSPN ((zcdc, zv__182)) when ((let znzz96 = (subrange (zv__182, (Big_int.of_int (9)), (Big_int.of_int (6)))) in
    let znzz96 = (subrange (zv__182, (Big_int.of_int (9)), (Big_int.of_int (6)))) in
    let znzz54 = (subrange (zv__182, (Big_int.of_int (5)), (Big_int.of_int (4)))) in
    let znzz3 = (subrange (zv__182, (Big_int.of_int (3)), (Big_int.of_int (3)))) in
    let znzz2 = (subrange (zv__182, (Big_int.of_int (2)), (Big_int.of_int (2)))) in
    zneq_bits ((append (znzz96, (append (znzz54, (append (znzz3, znzz2)))))), [B0; B0; B0; B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__182, (Big_int.of_int (1)), Big_int.zero)), [B0; B0]))) ->
      true
    | ZC_CJALR (zcs1) when (zneq_bits (zcs1, zzzreg)) -> true
    | ZC_CJR (zcs1) when (zneq_bits (zcs1, zzzreg)) -> true
    | ZC_CJAL (zv__184) when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && (eq_list ((subrange (zv__184, Big_int.zero, Big_int.zero)), [B0]))) ->
      true
    | ZNOT_C_CAPMODE (zs) -> true
    | _ -> false
  end)

and zencdec_compressed_capmode_backwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zv__186 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__186, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B1])) && (eq_list ((subrange (zv__186, (Big_int.of_int (1)), Big_int.zero)), [B0; B0])))) ->
      true
    | zv__189 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && ((eq_list ((subrange (zv__189, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B1])) && (eq_list ((subrange (zv__189, (Big_int.of_int (1)), Big_int.zero)), [B0; B0])))) ->
      true
    | zv__192 when ((let zcd = (subrange (zv__192, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && (zneq_bits (zcd, (zzzeros_implicit (Big_int.of_int (5)))))) && ((eq_list ((subrange (zv__192, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B1])) && (eq_list ((subrange (zv__192, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      true
    | zv__195 when ((let zcd = (subrange (zv__195, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && (zneq_bits (zcd, (zzzeros_implicit (Big_int.of_int (5)))))) && ((eq_list ((subrange (zv__195, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B1])) && (eq_list ((subrange (zv__195, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      true
    | zv__198 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__198, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B1])) && ((eq_list ((subrange (zv__198, (Big_int.of_int (11)), (Big_int.of_int (7)))), [B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__198, (Big_int.of_int (1)), Big_int.zero)), [B1; B0]))))) ->
      true
    | zv__202 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && ((eq_list ((subrange (zv__202, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B1])) && ((eq_list ((subrange (zv__202, (Big_int.of_int (11)), (Big_int.of_int (7)))), [B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__202, (Big_int.of_int (1)), Big_int.zero)), [B1; B0]))))) ->
      true
    | zv__206 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__206, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B0; B1])) && (eq_list ((subrange (zv__206, (Big_int.of_int (1)), Big_int.zero)), [B0; B0])))) ->
      true
    | zv__209 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && ((eq_list ((subrange (zv__209, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B1; B1])) && (eq_list ((subrange (zv__209, (Big_int.of_int (1)), Big_int.zero)), [B0; B0])))) ->
      true
    | zv__212 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__212, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B0; B1])) && (eq_list ((subrange (zv__212, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      true
    | zv__215 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && ((eq_list ((subrange (zv__215, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B1; B1])) && (eq_list ((subrange (zv__215, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      true
    | zv__218 when ((let znzzi9 = (subrange (zv__218, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
    let znzzi87 = (subrange (zv__218, (Big_int.of_int (4)), (Big_int.of_int (3)))) in
    let znzzi6 = (subrange (zv__218, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzi5 = (subrange (zv__218, (Big_int.of_int (2)), (Big_int.of_int (2)))) in
    let znzzi4 = (subrange (zv__218, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
    zneq_bits ((append (znzzi9, (append (znzzi87, (append (znzzi6, (append (znzzi5, znzzi4)))))))), [B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__218, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B1])) && ((eq_list ((subrange (zv__218, (Big_int.of_int (11)), (Big_int.of_int (7)))), [B0; B0; B0; B1; B0])) && (eq_list ((subrange (zv__218, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))))) ->
      true
    | zv__222 when ((let znzz96 = (subrange (zv__222, (Big_int.of_int (10)), (Big_int.of_int (7)))) in
    let znzz54 = (subrange (zv__222, (Big_int.of_int (12)), (Big_int.of_int (11)))) in
    let znzz3 = (subrange (zv__222, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzz2 = (subrange (zv__222, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
    zneq_bits ((append (znzz96, (append (znzz54, (append (znzz3, znzz2)))))), [B0; B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__222, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B0])) && (eq_list ((subrange (zv__222, (Big_int.of_int (1)), Big_int.zero)), [B0; B0])))) ->
      true
    | zv__225 when ((let zcs1 = (subrange (zv__225, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    zneq_bits (zcs1, zzzreg)) && ((eq_list ((subrange (zv__225, (Big_int.of_int (15)), (Big_int.of_int (12)))), [B1; B0; B0; B1])) && (eq_list ((subrange (zv__225, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B0; B0; B0; B1; B0])))) ->
      true
    | zv__230 when ((let zcs1 = (subrange (zv__230, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    zneq_bits (zcs1, zzzreg)) && ((eq_list ((subrange (zv__230, (Big_int.of_int (15)), (Big_int.of_int (12)))), [B1; B0; B0; B0])) && (eq_list ((subrange (zv__230, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B0; B0; B0; B1; B0])))) ->
      true
    | zv__235 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && ((eq_list ((subrange (zv__235, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B1])) && (eq_list ((subrange (zv__235, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      true
    | zs -> true
    | _ -> false
  end)

and zencdec_forwards (zargz3 : (zast)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | ZUTYPE ((zimm, zrd, zop)) ->
      append ((zimm), (append ((zrd), (zencdec_uop_forwards zop))))
    | ZRISCV_JAL ((zv__238, zrd)) when (eq_list ((subrange (zv__238, Big_int.zero, Big_int.zero)), [B0])) ->
      let zimm_19 = (subrange (zv__238, (Big_int.of_int (20)), (Big_int.of_int (20)))) in
      let zimm_8 = (subrange (zv__238, (Big_int.of_int (11)), (Big_int.of_int (11)))) in
      let zimm_7_0 = (subrange (zv__238, (Big_int.of_int (19)), (Big_int.of_int (12)))) in
      let zimm_19 = (subrange (zv__238, (Big_int.of_int (20)), (Big_int.of_int (20)))) in
      let zimm_18_13 = (subrange (zv__238, (Big_int.of_int (10)), (Big_int.of_int (5)))) in
      let zimm_12_9 = (subrange (zv__238, (Big_int.of_int (4)), (Big_int.of_int (1)))) in
      append ((zimm_19), (append ((zimm_18_13), (append ((zimm_12_9), (append ((zimm_8), (append ((zimm_7_0), (append ((zrd), [B1; B1; B0; B1; B1; B1; B1])))))))))))
    | ZRISCV_JALR ((zimm, zrs1, zrd)) ->
      append ((zimm), (append ((zrs1), (append ([B0; B0; B0], (append ((zrd), [B1; B1; B0; B0; B1; B1; B1])))))))
    | ZBTYPE ((zv__240, zrs2, zrs1, zop)) when (eq_list ((subrange (zv__240, Big_int.zero, Big_int.zero)), [B0])) ->
      let zimm7_6 = (subrange (zv__240, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let zimm7_6 = (subrange (zv__240, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let zimm7_5_0 = (subrange (zv__240, (Big_int.of_int (10)), (Big_int.of_int (5)))) in
      let zimm5_4_1 = (subrange (zv__240, (Big_int.of_int (4)), (Big_int.of_int (1)))) in
      let zimm5_0 = (subrange (zv__240, (Big_int.of_int (11)), (Big_int.of_int (11)))) in
      append ((zimm7_6), (append ((zimm7_5_0), (append ((zrs2), (append ((zrs1), (append ((zencdec_bop_forwards zop), (append ((zimm5_4_1), (append ((zimm5_0), [B1; B1; B0; B0; B0; B1; B1])))))))))))))
    | ZITYPE ((zimm, zrs1, zrd, zop)) ->
      append ((zimm), (append ((zrs1), (append ((zencdec_iop_forwards zop), (append ((zrd), [B0; B0; B1; B0; B0; B1; B1])))))))
    | ZSHIFTIOP ((zshamt, zrs1, zrd, ZRISCV_SLLI)) ->
      append ([B0; B0; B0; B0; B0; B0], (append ((zshamt), (append ((zrs1), (append ([B0; B0; B1], (append ((zrd), [B0; B0; B1; B0; B0; B1; B1])))))))))
    | ZSHIFTIOP ((zshamt, zrs1, zrd, ZRISCV_SRLI)) ->
      append ([B0; B0; B0; B0; B0; B0], (append ((zshamt), (append ((zrs1), (append ([B1; B0; B1], (append ((zrd), [B0; B0; B1; B0; B0; B1; B1])))))))))
    | ZSHIFTIOP ((zshamt, zrs1, zrd, ZRISCV_SRAI)) ->
      append ([B0; B1; B0; B0; B0; B0], (append ((zshamt), (append ((zrs1), (append ([B1; B0; B1], (append ((zrd), [B0; B0; B1; B0; B0; B1; B1])))))))))
    | ZRTYPE ((zrs2, zrs1, zrd, ZRISCV_ADD)) ->
      append ([B0; B0; B0; B0; B0; B0; B0], (append ((zrs2), (append ((zrs1), (append ([B0; B0; B0], (append ((zrd), [B0; B1; B1; B0; B0; B1; B1])))))))))
    | ZRTYPE ((zrs2, zrs1, zrd, ZRISCV_SLT)) ->
      append ([B0; B0; B0; B0; B0; B0; B0], (append ((zrs2), (append ((zrs1), (append ([B0; B1; B0], (append ((zrd), [B0; B1; B1; B0; B0; B1; B1])))))))))
    | ZRTYPE ((zrs2, zrs1, zrd, ZRISCV_SLTU)) ->
      append ([B0; B0; B0; B0; B0; B0; B0], (append ((zrs2), (append ((zrs1), (append ([B0; B1; B1], (append ((zrd), [B0; B1; B1; B0; B0; B1; B1])))))))))
    | ZRTYPE ((zrs2, zrs1, zrd, ZRISCV_AND)) ->
      append ([B0; B0; B0; B0; B0; B0; B0], (append ((zrs2), (append ((zrs1), (append ([B1; B1; B1], (append ((zrd), [B0; B1; B1; B0; B0; B1; B1])))))))))
    | ZRTYPE ((zrs2, zrs1, zrd, ZRISCV_OR)) ->
      append ([B0; B0; B0; B0; B0; B0; B0], (append ((zrs2), (append ((zrs1), (append ([B1; B1; B0], (append ((zrd), [B0; B1; B1; B0; B0; B1; B1])))))))))
    | ZRTYPE ((zrs2, zrs1, zrd, ZRISCV_XOR)) ->
      append ([B0; B0; B0; B0; B0; B0; B0], (append ((zrs2), (append ((zrs1), (append ([B1; B0; B0], (append ((zrd), [B0; B1; B1; B0; B0; B1; B1])))))))))
    | ZRTYPE ((zrs2, zrs1, zrd, ZRISCV_SLL)) ->
      append ([B0; B0; B0; B0; B0; B0; B0], (append ((zrs2), (append ((zrs1), (append ([B0; B0; B1], (append ((zrd), [B0; B1; B1; B0; B0; B1; B1])))))))))
    | ZRTYPE ((zrs2, zrs1, zrd, ZRISCV_SRL)) ->
      append ([B0; B0; B0; B0; B0; B0; B0], (append ((zrs2), (append ((zrs1), (append ([B1; B0; B1], (append ((zrd), [B0; B1; B1; B0; B0; B1; B1])))))))))
    | ZRTYPE ((zrs2, zrs1, zrd, ZRISCV_SUB)) ->
      append ([B0; B1; B0; B0; B0; B0; B0], (append ((zrs2), (append ((zrs1), (append ([B0; B0; B0], (append ((zrd), [B0; B1; B1; B0; B0; B1; B1])))))))))
    | ZRTYPE ((zrs2, zrs1, zrd, ZRISCV_SRA)) ->
      append ([B0; B1; B0; B0; B0; B0; B0], (append ((zrs2), (append ((zrs1), (append ([B1; B0; B1], (append ((zrd), [B0; B1; B1; B0; B0; B1; B1])))))))))
    | ZLOAD ((zimm, zrs1, zrd, zis_unsigned, zsizze, zp0z3, zp1z3)) when ((((lt ((zword_width_bytes zsizze), (Big_int.of_int (4)))) || ((znot zis_unsigned) && (lteq ((zword_width_bytes zsizze), (Big_int.of_int (4)))))) && (eq_bool (zp1z3, false))) && (eq_bool (zp0z3, false))) ->
      append ((zimm), (append ((zrs1), (append ((zbool_bits_forwards zis_unsigned), (append ((zsizze_bits_forwards zsizze), (append ((zrd), [B0; B0; B0; B0; B0; B1; B1])))))))))
    | ZSTORE ((zv__242, zrs2, zrs1, zsizze, zp0z3, zp1z3)) when (((lteq ((zword_width_bytes zsizze), (Big_int.of_int (4)))) && (eq_bool (zp1z3, false))) && (eq_bool (zp0z3, false))) ->
      let zimm7 = (subrange (zv__242, (Big_int.of_int (11)), (Big_int.of_int (5)))) in
      let zimm7 = (subrange (zv__242, (Big_int.of_int (11)), (Big_int.of_int (5)))) in
      let zimm5 = (subrange (zv__242, (Big_int.of_int (4)), Big_int.zero)) in
      append ((zimm7), (append ((zrs2), (append ((zrs1), (append ([B0], (append ((zsizze_bits_forwards zsizze), (append ((zimm5), [B0; B1; B0; B0; B0; B1; B1])))))))))))
    | ZADDIW ((zimm, zrs1, zrd)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      append ((zimm), (append ((zrs1), (append ([B0; B0; B0], (append ((zrd), [B0; B0; B1; B1; B0; B1; B1])))))))
    | ZRTYPEW ((zrs2, zrs1, zrd, ZRISCV_ADDW)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      append ([B0; B0; B0; B0; B0; B0; B0], (append ((zrs2), (append ((zrs1), (append ([B0; B0; B0], (append ((zrd), [B0; B1; B1; B1; B0; B1; B1])))))))))
    | ZRTYPEW ((zrs2, zrs1, zrd, ZRISCV_SUBW)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      append ([B0; B1; B0; B0; B0; B0; B0], (append ((zrs2), (append ((zrs1), (append ([B0; B0; B0], (append ((zrd), [B0; B1; B1; B1; B0; B1; B1])))))))))
    | ZRTYPEW ((zrs2, zrs1, zrd, ZRISCV_SLLW)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      append ([B0; B0; B0; B0; B0; B0; B0], (append ((zrs2), (append ((zrs1), (append ([B0; B0; B1], (append ((zrd), [B0; B1; B1; B1; B0; B1; B1])))))))))
    | ZRTYPEW ((zrs2, zrs1, zrd, ZRISCV_SRLW)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      append ([B0; B0; B0; B0; B0; B0; B0], (append ((zrs2), (append ((zrs1), (append ([B1; B0; B1], (append ((zrd), [B0; B1; B1; B1; B0; B1; B1])))))))))
    | ZRTYPEW ((zrs2, zrs1, zrd, ZRISCV_SRAW)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      append ([B0; B1; B0; B0; B0; B0; B0], (append ((zrs2), (append ((zrs1), (append ([B1; B0; B1], (append ((zrd), [B0; B1; B1; B1; B0; B1; B1])))))))))
    | ZSHIFTIWOP ((zshamt, zrs1, zrd, ZRISCV_SLLIW)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      append ([B0; B0; B0; B0; B0; B0; B0], (append ((zshamt), (append ((zrs1), (append ([B0; B0; B1], (append ((zrd), [B0; B0; B1; B1; B0; B1; B1])))))))))
    | ZSHIFTIWOP ((zshamt, zrs1, zrd, ZRISCV_SRLIW)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      append ([B0; B0; B0; B0; B0; B0; B0], (append ((zshamt), (append ((zrs1), (append ([B1; B0; B1], (append ((zrd), [B0; B0; B1; B1; B0; B1; B1])))))))))
    | ZSHIFTIWOP ((zshamt, zrs1, zrd, ZRISCV_SRAIW)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      append ([B0; B1; B0; B0; B0; B0; B0], (append ((zshamt), (append ((zrs1), (append ([B1; B0; B1], (append ((zrd), [B0; B0; B1; B1; B0; B1; B1])))))))))
    | ZFENCE ((zpred, zsucc)) ->
      append ([B0; B0; B0; B0], (append ((zpred), (append ((zsucc), (append ([B0; B0; B0; B0; B0], (append ([B0; B0; B0], (append ([B0; B0; B0; B0; B0], [B0; B0; B0; B1; B1; B1; B1])))))))))))
    | ZFENCE_TSO ((zpred, zsucc)) ->
      append ([B1; B0; B0; B0], (append ((zpred), (append ((zsucc), (append ([B0; B0; B0; B0; B0], (append ([B0; B0; B0], (append ([B0; B0; B0; B0; B0], [B0; B0; B0; B1; B1; B1; B1])))))))))))
    | ZFENCEI (()) ->
      append ([B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0], (append ([B0; B0; B0; B0; B0], (append ([B0; B0; B1], (append ([B0; B0; B0; B0; B0], [B0; B0; B0; B1; B1; B1; B1])))))))
    | ZECALL (()) ->
      append ([B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0], (append ([B0; B0; B0; B0; B0], (append ([B0; B0; B0], (append ([B0; B0; B0; B0; B0], [B1; B1; B1; B0; B0; B1; B1])))))))
    | ZMRET (()) ->
      append ([B0; B0; B1; B1; B0; B0; B0], (append ([B0; B0; B0; B1; B0], (append ([B0; B0; B0; B0; B0], (append ([B0; B0; B0], (append ([B0; B0; B0; B0; B0], [B1; B1; B1; B0; B0; B1; B1])))))))))
    | ZSRET (()) ->
      append ([B0; B0; B0; B1; B0; B0; B0], (append ([B0; B0; B0; B1; B0], (append ([B0; B0; B0; B0; B0], (append ([B0; B0; B0], (append ([B0; B0; B0; B0; B0], [B1; B1; B1; B0; B0; B1; B1])))))))))
    | ZEBREAK (()) ->
      append ([B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1], (append ([B0; B0; B0; B0; B0], (append ([B0; B0; B0], (append ([B0; B0; B0; B0; B0], [B1; B1; B1; B0; B0; B1; B1])))))))
    | ZWFI (()) ->
      append ([B0; B0; B0; B1; B0; B0; B0; B0; B0; B1; B0; B1], (append ([B0; B0; B0; B0; B0], (append ([B0; B0; B0], (append ([B0; B0; B0; B0; B0], [B1; B1; B1; B0; B0; B1; B1])))))))
    | ZSFENCE_VMA ((zrs1, zrs2)) ->
      append ([B0; B0; B0; B1; B0; B0; B1], (append ((zrs2), (append ((zrs1), (append ([B0; B0; B0], (append ([B0; B0; B0; B0; B0], [B1; B1; B1; B0; B0; B1; B1])))))))))
    | ZMUL ((zrs2, zrs1, zrd, zhigh, zsigned1, zsigned2)) ->
      append ([B0; B0; B0; B0; B0; B0; B1], (append ((zrs2), (append ((zrs1), (append ((zencdec_mul_op_forwards ((fun (v0, v1, v2) -> (v2, v1, v0)) (zsigned2, zsigned1, zhigh))), (append ((zrd), [B0; B1; B1; B0; B0; B1; B1])))))))))
    | ZDIV ((zrs2, zrs1, zrd, zs)) ->
      append ([B0; B0; B0; B0; B0; B0; B1], (append ((zrs2), (append ((zrs1), (append ([B1; B0], (append ((zbool_not_bits_forwards zs), (append ((zrd), [B0; B1; B1; B0; B0; B1; B1])))))))))))
    | ZREM ((zrs2, zrs1, zrd, zs)) ->
      append ([B0; B0; B0; B0; B0; B0; B1], (append ((zrs2), (append ((zrs1), (append ([B1; B1], (append ((zbool_not_bits_forwards zs), (append ((zrd), [B0; B1; B1; B0; B0; B1; B1])))))))))))
    | ZMULW ((zrs2, zrs1, zrd)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      append ([B0; B0; B0; B0; B0; B0; B1], (append ((zrs2), (append ((zrs1), (append ([B0; B0; B0], (append ((zrd), [B0; B1; B1; B1; B0; B1; B1])))))))))
    | ZDIVW ((zrs2, zrs1, zrd, zs)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      append ([B0; B0; B0; B0; B0; B0; B1], (append ((zrs2), (append ((zrs1), (append ([B1; B0], (append ((zbool_not_bits_forwards zs), (append ((zrd), [B0; B1; B1; B1; B0; B1; B1])))))))))))
    | ZREMW ((zrs2, zrs1, zrd, zs)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      append ([B0; B0; B0; B0; B0; B0; B1], (append ((zrs2), (append ((zrs1), (append ([B1; B1], (append ((zbool_not_bits_forwards zs), (append ((zrd), [B0; B1; B1; B1; B0; B1; B1])))))))))))
    | ZCSR ((zcsr, zrs1, zrd, zis_imm, zop)) ->
      append ((zcsr), (append ((zrs1), (append ((zbool_bits_forwards zis_imm), (append ((zencdec_csrop_forwards zop), (append ((zrd), [B1; B1; B1; B0; B0; B1; B1])))))))))
    | ZFENCE_RESERVED ((zfm, zpred, zsucc, zrs, zrd)) when (((zneq_bits (zfm, [B0; B0; B0; B0])) && (zneq_bits (zfm, [B1; B0; B0; B0]))) || ((zneq_bits (zrs, [B0; B0; B0; B0; B0])) || (zneq_bits (zrd, [B0; B0; B0; B0; B0])))) ->
      append ((zfm), (append ((zpred), (append ((zsucc), (append ((zrs), (append ([B0; B0; B0], (append ((zrd), [B0; B0; B0; B1; B1; B1; B1])))))))))))
    | ZFENCEI_RESERVED ((zimm, zrs, zrd)) when ((zneq_bits (zimm, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0])) || ((zneq_bits (zrs, zzzreg)) || (zneq_bits (zrd, zzzreg)))) ->
      append ((zimm), (append ((zrs), (append ([B0; B0; B1], (append ((zrd), [B0; B0; B0; B1; B1; B1; B1])))))))
    | ZAUICGP ((zimm, zcd)) when (zhaveXcheri ()) ->
      append ((zimm), (append ((zcd), [B1; B1; B1; B1; B0; B1; B1])))
    | ZCGetPerm ((zrd, zcs1)) when (zhaveXcheri ()) ->
      append ([B1; B1; B1; B1; B1; B1; B1], (append ([B0; B0; B0; B0; B0], (append ((zcs1), (append ([B0; B0; B0], (append ((zrd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCGetType ((zrd, zcs1)) when (zhaveXcheri ()) ->
      append ([B1; B1; B1; B1; B1; B1; B1], (append ([B0; B0; B0; B0; B1], (append ((zcs1), (append ([B0; B0; B0], (append ((zrd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCGetBase ((zrd, zcs1)) when (zhaveXcheri ()) ->
      append ([B1; B1; B1; B1; B1; B1; B1], (append ([B0; B0; B0; B1; B0], (append ((zcs1), (append ([B0; B0; B0], (append ((zrd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCGetLen ((zrd, zcs1)) when (zhaveXcheri ()) ->
      append ([B1; B1; B1; B1; B1; B1; B1], (append ([B0; B0; B0; B1; B1], (append ((zcs1), (append ([B0; B0; B0], (append ((zrd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCGetTag ((zrd, zcs1)) when (zhaveXcheri ()) ->
      append ([B1; B1; B1; B1; B1; B1; B1], (append ([B0; B0; B1; B0; B0], (append ((zcs1), (append ([B0; B0; B0], (append ((zrd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCGetAddr ((zrd, zcs1)) when (zhaveXcheri ()) ->
      append ([B1; B1; B1; B1; B1; B1; B1], (append ([B0; B1; B1; B1; B1], (append ((zcs1), (append ([B0; B0; B0], (append ((zrd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCGetHigh ((zrd, zcs1)) when (zhaveXcheri ()) ->
      append ([B1; B1; B1; B1; B1; B1; B1], (append ([B1; B0; B1; B1; B1], (append ((zcs1), (append ([B0; B0; B0], (append ((zrd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCGetTop ((zrd, zcs1)) when (zhaveXcheri ()) ->
      append ([B1; B1; B1; B1; B1; B1; B1], (append ([B1; B1; B0; B0; B0], (append ((zcs1), (append ([B0; B0; B0], (append ((zrd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCMove ((zcd, zcs1)) when (zhaveXcheri ()) ->
      append ([B1; B1; B1; B1; B1; B1; B1], (append ([B0; B1; B0; B1; B0], (append ((zcs1), (append ([B0; B0; B0], (append ((zcd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCClearTag ((zcd, zcs1)) when (zhaveXcheri ()) ->
      append ([B1; B1; B1; B1; B1; B1; B1], (append ([B0; B1; B0; B1; B1], (append ((zcs1), (append ([B0; B0; B0], (append ((zcd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCRRL ((zrd, zrs1)) when (zhaveXcheri ()) ->
      append ([B1; B1; B1; B1; B1; B1; B1], (append ([B0; B1; B0; B0; B0], (append ((zrs1), (append ([B0; B0; B0], (append ((zrd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCRAM ((zrd, zrs1)) when (zhaveXcheri ()) ->
      append ([B1; B1; B1; B1; B1; B1; B1], (append ([B0; B1; B0; B0; B1], (append ((zrs1), (append ([B0; B0; B0], (append ((zrd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCSeal ((zcd, zcs1, zcs2)) when (zhaveXcheri ()) ->
      append ([B0; B0; B0; B1; B0; B1; B1], (append ((zcs2), (append ((zcs1), (append ([B0; B0; B0], (append ((zcd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCUnseal ((zcd, zcs1, zcs2)) when (zhaveXcheri ()) ->
      append ([B0; B0; B0; B1; B1; B0; B0], (append ((zcs2), (append ((zcs1), (append ([B0; B0; B0], (append ((zcd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCAndPerm ((zcd, zcs1, zrs2)) when (zhaveXcheri ()) ->
      append ([B0; B0; B0; B1; B1; B0; B1], (append ((zrs2), (append ((zcs1), (append ([B0; B0; B0], (append ((zcd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCSetAddr ((zcd, zcs1, zrs2)) when (zhaveXcheri ()) ->
      append ([B0; B0; B1; B0; B0; B0; B0], (append ((zrs2), (append ((zcs1), (append ([B0; B0; B0], (append ((zcd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCSetHigh ((zcd, zcs1, zrs2)) when (zhaveXcheri ()) ->
      append ([B0; B0; B1; B0; B1; B1; B0], (append ((zrs2), (append ((zcs1), (append ([B0; B0; B0], (append ((zcd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCIncAddr ((zcd, zcs1, zrs2)) when (zhaveXcheri ()) ->
      append ([B0; B0; B1; B0; B0; B0; B1], (append ((zrs2), (append ((zcs1), (append ([B0; B0; B0], (append ((zcd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCSetBounds ((zcd, zcs1, zrs2)) when (zhaveXcheri ()) ->
      append ([B0; B0; B0; B1; B0; B0; B0], (append ((zrs2), (append ((zcs1), (append ([B0; B0; B0], (append ((zcd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCSetBoundsExact ((zcd, zcs1, zrs2)) when (zhaveXcheri ()) ->
      append ([B0; B0; B0; B1; B0; B0; B1], (append ((zrs2), (append ((zcs1), (append ([B0; B0; B0], (append ((zcd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCSetBoundsRoundDown ((zcd, zcs1, zrs2)) when (zhaveXcheri ()) ->
      append ([B0; B0; B0; B1; B0; B1; B0], (append ((zrs2), (append ((zcs1), (append ([B0; B0; B0], (append ((zcd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCSub ((zrd, zcs1, zcs2)) when (zhaveXcheri ()) ->
      append ([B0; B0; B1; B0; B1; B0; B0], (append ((zcs2), (append ((zcs1), (append ([B0; B0; B0], (append ((zrd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCTestSubset ((zrd, zcs1, zcs2)) when (zhaveXcheri ()) ->
      append ([B0; B1; B0; B0; B0; B0; B0], (append ((zcs2), (append ((zcs1), (append ([B0; B0; B0], (append ((zrd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCSpecialRW ((zcd, zscr, zcs1)) when (zhaveXcheri ()) ->
      append ([B0; B0; B0; B0; B0; B0; B1], (append ((zscr), (append ((zcs1), (append ([B0; B0; B0], (append ((zcd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZCIncAddrImmediate ((zcd, zcs1, zimm12)) when (zhaveXcheri ()) ->
      append ((zimm12), (append ((zcs1), (append ([B0; B0; B1], (append ((zcd), [B1; B0; B1; B1; B0; B1; B1])))))))
    | ZCSetBoundsImmediate ((zcd, zcs1, zimm12)) when (zhaveXcheri ()) ->
      append ((zimm12), (append ((zcs1), (append ([B0; B1; B0], (append ((zcd), [B1; B0; B1; B1; B0; B1; B1])))))))
    | ZCSEQX ((zrd, zcs1, zcs2)) when (zhaveXcheri ()) ->
      append ([B0; B1; B0; B0; B0; B0; B1], (append ((zcs2), (append ((zcs1), (append ([B0; B0; B0], (append ((zrd), [B1; B0; B1; B1; B0; B1; B1])))))))))
    | ZLoadCapImm ((zcd, zrs1, zoffset)) ->
      append ((zoffset), (append ((zrs1), (append ([B0; B1; B1], (append ((zcd), [B0; B0; B0; B0; B0; B1; B1])))))))
    | ZStoreCapImm ((zcs2, zrs1, zv__243)) ->
      let zoff7 = (subrange (zv__243, (Big_int.of_int (11)), (Big_int.of_int (5)))) in
      let zoff7 = (subrange (zv__243, (Big_int.of_int (11)), (Big_int.of_int (5)))) in
      let zoff5 = (subrange (zv__243, (Big_int.of_int (4)), Big_int.zero)) in
      append ((zoff7), (append ((zcs2), (append ((zrs1), (append ([B0; B1; B1], (append ((zoff5), [B0; B1; B0; B0; B0; B1; B1])))))))))
    | ZILLEGAL (zs) -> zs
  end)

and zencdec_backwards (zargz3 : ((bit) list)) : zast = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zv__557 when (let zmapping0z3 = (subrange (zv__557, (Big_int.of_int (6)), Big_int.zero)) in
      zencdec_uop_backwards_matches zmapping0z3) ->
        let zimm = (subrange (zv__557, (Big_int.of_int (31)), (Big_int.of_int (12)))) in
        let zrd = (subrange (zv__557, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
        let zmapping0z3 = (subrange (zv__557, (Big_int.of_int (6)), Big_int.zero)) in
        let zimm = (subrange (zv__557, (Big_int.of_int (31)), (Big_int.of_int (12)))) in
        begin
          match (zencdec_uop_backwards zmapping0z3) with
          | zop ->
            ZSome (ZUTYPE ((fun (v0, v1, v2) -> (v2, v1, v0)) (zop, zrd, zimm)))
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) ->
      begin
        match (begin
          match zhead_expz3 with
          | zv__550 when (eq_list ((subrange (zv__550, (Big_int.of_int (6)), Big_int.zero)), [B1; B1; B0; B1; B1; B1; B1])) ->
            let zimm_19 = (subrange (zv__550, (Big_int.of_int (31)), (Big_int.of_int (31)))) in
            let zrd = (subrange (zv__550, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
            let zimm_8 = (subrange (zv__550, (Big_int.of_int (20)), (Big_int.of_int (20)))) in
            let zimm_7_0 = (subrange (zv__550, (Big_int.of_int (19)), (Big_int.of_int (12)))) in
            let zimm_19 = (subrange (zv__550, (Big_int.of_int (31)), (Big_int.of_int (31)))) in
            let zimm_18_13 = (subrange (zv__550, (Big_int.of_int (30)), (Big_int.of_int (25)))) in
            let zimm_12_9 = (subrange (zv__550, (Big_int.of_int (24)), (Big_int.of_int (21)))) in
            ZSome (ZRISCV_JAL ((fun (v0, v1) -> (v1, v0)) (zrd, append ((zimm_19), (append ((zimm_7_0), (append ((zimm_8), (append ((zimm_18_13), (append ((zimm_12_9), [B0]))))))))))))
          | zv__552 when ((eq_list ((subrange (zv__552, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__552, (Big_int.of_int (6)), Big_int.zero)), [B1; B1; B0; B0; B1; B1; B1]))) ->
            let zimm = (subrange (zv__552, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
            let zrs1 = (subrange (zv__552, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
            let zrd = (subrange (zv__552, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
            let zimm = (subrange (zv__552, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
            ZSome (ZRISCV_JALR ((fun (v0, v1, v2) -> (v2, v1, v0)) (zrd, zrs1, zimm)))
          | zv__555 when ((let zmapping1z3 = (subrange (zv__555, (Big_int.of_int (14)), (Big_int.of_int (12)))) in
          zencdec_bop_backwards_matches zmapping1z3) && (eq_list ((subrange (zv__555, (Big_int.of_int (6)), Big_int.zero)), [B1; B1; B0; B0; B0; B1; B1]))) ->
            let zimm7_6 = (subrange (zv__555, (Big_int.of_int (31)), (Big_int.of_int (31)))) in
            let zrs2 = (subrange (zv__555, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
            let zrs1 = (subrange (zv__555, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
            let zmapping1z3 = (subrange (zv__555, (Big_int.of_int (14)), (Big_int.of_int (12)))) in
            let zimm7_6 = (subrange (zv__555, (Big_int.of_int (31)), (Big_int.of_int (31)))) in
            let zimm7_5_0 = (subrange (zv__555, (Big_int.of_int (30)), (Big_int.of_int (25)))) in
            let zimm5_4_1 = (subrange (zv__555, (Big_int.of_int (11)), (Big_int.of_int (8)))) in
            let zimm5_0 = (subrange (zv__555, (Big_int.of_int (7)), (Big_int.of_int (7)))) in
            begin
              match (zencdec_bop_backwards zmapping1z3) with
              | zop ->
                ZSome (ZBTYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (zop, zrs1, zrs2, append ((zimm7_6), (append ((zimm5_0), (append ((zimm7_5_0), (append ((zimm5_4_1), [B0]))))))))))
              | _ -> ZNone ()
            end
          | _ -> ZNone ()
        end) with
        | ZSome (zresult) -> zresult
        | ZNone (()) ->
          begin
            match (begin
              match zhead_expz3 with
              | zv__548 when ((let zmapping2z3 = (subrange (zv__548, (Big_int.of_int (14)), (Big_int.of_int (12)))) in
              zencdec_iop_backwards_matches zmapping2z3) && (eq_list ((subrange (zv__548, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B1; B0; B0; B1; B1]))) ->
                let zimm = (subrange (zv__548, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
                let zrs1 = (subrange (zv__548, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                let zrd = (subrange (zv__548, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                let zmapping2z3 = (subrange (zv__548, (Big_int.of_int (14)), (Big_int.of_int (12)))) in
                let zimm = (subrange (zv__548, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
                begin
                  match (zencdec_iop_backwards zmapping2z3) with
                  | zop ->
                    ZSome (ZITYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (zop, zrd, zrs1, zimm)))
                  | _ -> ZNone ()
                end
              | _ -> ZNone ()
            end) with
            | ZSome (zresult) -> zresult
            | ZNone (()) ->
              begin
                match (begin
                  match zhead_expz3 with
                  | zv__494 when ((let zshamt = (subrange (zv__494, (Big_int.of_int (25)), (Big_int.of_int (20)))) in
                  (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) || (eq_bit ((access (zshamt, (Big_int.of_int (5)))), B0))) && ((eq_list ((subrange (zv__494, (Big_int.of_int (31)), (Big_int.of_int (26)))), [B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__494, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B1])) && (eq_list ((subrange (zv__494, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B1; B0; B0; B1; B1]))))) ->
                    let zshamt = (subrange (zv__494, (Big_int.of_int (25)), (Big_int.of_int (20)))) in
                    let zrs1 = (subrange (zv__494, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                    let zrd = (subrange (zv__494, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                    ZSome (ZSHIFTIOP ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_SLLI, zrd, zrs1, zshamt)))
                  | zv__498 when ((let zshamt = (subrange (zv__498, (Big_int.of_int (25)), (Big_int.of_int (20)))) in
                  (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) || (eq_bit ((access (zshamt, (Big_int.of_int (5)))), B0))) && ((eq_list ((subrange (zv__498, (Big_int.of_int (31)), (Big_int.of_int (26)))), [B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__498, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B1; B0; B1])) && (eq_list ((subrange (zv__498, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B1; B0; B0; B1; B1]))))) ->
                    let zshamt = (subrange (zv__498, (Big_int.of_int (25)), (Big_int.of_int (20)))) in
                    let zrs1 = (subrange (zv__498, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                    let zrd = (subrange (zv__498, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                    ZSome (ZSHIFTIOP ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_SRLI, zrd, zrs1, zshamt)))
                  | zv__502 when ((let zshamt = (subrange (zv__502, (Big_int.of_int (25)), (Big_int.of_int (20)))) in
                  (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) || (eq_bit ((access (zshamt, (Big_int.of_int (5)))), B0))) && ((eq_list ((subrange (zv__502, (Big_int.of_int (31)), (Big_int.of_int (26)))), [B0; B1; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__502, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B1; B0; B1])) && (eq_list ((subrange (zv__502, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B1; B0; B0; B1; B1]))))) ->
                    let zshamt = (subrange (zv__502, (Big_int.of_int (25)), (Big_int.of_int (20)))) in
                    let zrs1 = (subrange (zv__502, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                    let zrd = (subrange (zv__502, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                    ZSome (ZSHIFTIOP ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_SRAI, zrd, zrs1, zshamt)))
                  | zv__506 when ((eq_list ((subrange (zv__506, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__506, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__506, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1])))) ->
                    let zrs2 = (subrange (zv__506, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                    let zrs1 = (subrange (zv__506, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                    let zrd = (subrange (zv__506, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                    ZSome (ZRTYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_ADD, zrd, zrs1, zrs2)))
                  | zv__510 when ((eq_list ((subrange (zv__510, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__510, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B1; B0])) && (eq_list ((subrange (zv__510, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1])))) ->
                    let zrs2 = (subrange (zv__510, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                    let zrs1 = (subrange (zv__510, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                    let zrd = (subrange (zv__510, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                    ZSome (ZRTYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_SLT, zrd, zrs1, zrs2)))
                  | zv__514 when ((eq_list ((subrange (zv__514, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__514, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B1; B1])) && (eq_list ((subrange (zv__514, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1])))) ->
                    let zrs2 = (subrange (zv__514, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                    let zrs1 = (subrange (zv__514, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                    let zrd = (subrange (zv__514, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                    ZSome (ZRTYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_SLTU, zrd, zrs1, zrs2)))
                  | zv__518 when ((eq_list ((subrange (zv__518, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__518, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B1; B1; B1])) && (eq_list ((subrange (zv__518, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1])))) ->
                    let zrs2 = (subrange (zv__518, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                    let zrs1 = (subrange (zv__518, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                    let zrd = (subrange (zv__518, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                    ZSome (ZRTYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_AND, zrd, zrs1, zrs2)))
                  | zv__522 when ((eq_list ((subrange (zv__522, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__522, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B1; B1; B0])) && (eq_list ((subrange (zv__522, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1])))) ->
                    let zrs2 = (subrange (zv__522, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                    let zrs1 = (subrange (zv__522, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                    let zrd = (subrange (zv__522, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                    ZSome (ZRTYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_OR, zrd, zrs1, zrs2)))
                  | zv__526 when ((eq_list ((subrange (zv__526, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__526, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B1; B0; B0])) && (eq_list ((subrange (zv__526, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1])))) ->
                    let zrs2 = (subrange (zv__526, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                    let zrs1 = (subrange (zv__526, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                    let zrd = (subrange (zv__526, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                    ZSome (ZRTYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_XOR, zrd, zrs1, zrs2)))
                  | zv__530 when ((eq_list ((subrange (zv__530, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__530, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B1])) && (eq_list ((subrange (zv__530, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1])))) ->
                    let zrs2 = (subrange (zv__530, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                    let zrs1 = (subrange (zv__530, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                    let zrd = (subrange (zv__530, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                    ZSome (ZRTYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_SLL, zrd, zrs1, zrs2)))
                  | zv__534 when ((eq_list ((subrange (zv__534, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__534, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B1; B0; B1])) && (eq_list ((subrange (zv__534, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1])))) ->
                    let zrs2 = (subrange (zv__534, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                    let zrs1 = (subrange (zv__534, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                    let zrd = (subrange (zv__534, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                    ZSome (ZRTYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_SRL, zrd, zrs1, zrs2)))
                  | zv__538 when ((eq_list ((subrange (zv__538, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B1; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__538, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__538, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1])))) ->
                    let zrs2 = (subrange (zv__538, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                    let zrs1 = (subrange (zv__538, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                    let zrd = (subrange (zv__538, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                    ZSome (ZRTYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_SUB, zrd, zrs1, zrs2)))
                  | zv__542 when ((eq_list ((subrange (zv__542, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B1; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__542, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B1; B0; B1])) && (eq_list ((subrange (zv__542, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1])))) ->
                    let zrs2 = (subrange (zv__542, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                    let zrs1 = (subrange (zv__542, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                    let zrd = (subrange (zv__542, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                    ZSome (ZRTYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_SRA, zrd, zrs1, zrs2)))
                  | zv__546 when ((let zmapping4z3 = (subrange (zv__546, (Big_int.of_int (13)), (Big_int.of_int (12)))) in
                  let zmapping3z3 = (subrange (zv__546, (Big_int.of_int (14)), (Big_int.of_int (14)))) in
                  (zbool_bits_backwards_matches zmapping3z3) && (zsizze_bits_backwards_matches zmapping4z3)) && (eq_list ((subrange (zv__546, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B0; B0; B0; B1; B1]))) ->
                    let zimm = (subrange (zv__546, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
                    let zrs1 = (subrange (zv__546, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                    let zrd = (subrange (zv__546, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                    let zmapping4z3 = (subrange (zv__546, (Big_int.of_int (13)), (Big_int.of_int (12)))) in
                    let zmapping3z3 = (subrange (zv__546, (Big_int.of_int (14)), (Big_int.of_int (14)))) in
                    let zimm = (subrange (zv__546, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
                    begin
                      match ((fun (v0, v1) -> (v1, v0)) (zsizze_bits_backwards zmapping4z3, zbool_bits_backwards zmapping3z3)) with
                      | (zis_unsigned, zsizze) when ((lt ((zword_width_bytes zsizze), (Big_int.of_int (4)))) || ((znot zis_unsigned) && (lteq ((zword_width_bytes zsizze), (Big_int.of_int (4)))))) ->
                        ZSome (ZLOAD ((fun (v0, v1, v2, v3, v4, v5, v6) -> (v6, v5, v4, v3, v2, v1, v0)) (false, false, zsizze, zis_unsigned, zrd, zrs1, zimm)))
                      | _ -> ZNone ()
                    end
                  | _ -> ZNone ()
                end) with
                | ZSome (zresult) -> zresult
                | ZNone (()) ->
                  begin
                    match (begin
                      match zhead_expz3 with
                      | zv__491 when ((let zmapping5z3 = (subrange (zv__491, (Big_int.of_int (13)), (Big_int.of_int (12)))) in
                      zsizze_bits_backwards_matches zmapping5z3) && ((eq_list ((subrange (zv__491, (Big_int.of_int (14)), (Big_int.of_int (14)))), [B0])) && (eq_list ((subrange (zv__491, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B0; B0; B0; B1; B1])))) ->
                        let zimm7 = (subrange (zv__491, (Big_int.of_int (31)), (Big_int.of_int (25)))) in
                        let zrs2 = (subrange (zv__491, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                        let zrs1 = (subrange (zv__491, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                        let zmapping5z3 = (subrange (zv__491, (Big_int.of_int (13)), (Big_int.of_int (12)))) in
                        let zimm7 = (subrange (zv__491, (Big_int.of_int (31)), (Big_int.of_int (25)))) in
                        let zimm5 = (subrange (zv__491, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                        begin
                          match (zsizze_bits_backwards zmapping5z3) with
                          | zsizze when (lteq ((zword_width_bytes zsizze), (Big_int.of_int (4)))) ->
                            ZSome (ZSTORE ((fun (v0, v1, v2, v3, v4, v5) -> (v5, v4, v3, v2, v1, v0)) (false, false, zsizze, zrs1, zrs2, append ((zimm7), (zimm5)))))
                          | _ -> ZNone ()
                        end
                      | _ -> ZNone ()
                    end) with
                    | ZSome (zresult) -> zresult
                    | ZNone (()) ->
                      begin
                        match (begin
                          match zhead_expz3 with
                          | zv__398 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__398, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__398, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B1; B1; B0; B1; B1])))) ->
                            let zimm = (subrange (zv__398, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
                            let zrs1 = (subrange (zv__398, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                            let zrd = (subrange (zv__398, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                            let zimm = (subrange (zv__398, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
                            ZSome (ZADDIW ((fun (v0, v1, v2) -> (v2, v1, v0)) (zrd, zrs1, zimm)))
                          | zv__401 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__401, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__401, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__401, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B1; B0; B1; B1]))))) ->
                            let zrs2 = (subrange (zv__401, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                            let zrs1 = (subrange (zv__401, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                            let zrd = (subrange (zv__401, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                            ZSome (ZRTYPEW ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_ADDW, zrd, zrs1, zrs2)))
                          | zv__405 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__405, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B1; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__405, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__405, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B1; B0; B1; B1]))))) ->
                            let zrs2 = (subrange (zv__405, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                            let zrs1 = (subrange (zv__405, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                            let zrd = (subrange (zv__405, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                            ZSome (ZRTYPEW ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_SUBW, zrd, zrs1, zrs2)))
                          | zv__409 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__409, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__409, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B1])) && (eq_list ((subrange (zv__409, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B1; B0; B1; B1]))))) ->
                            let zrs2 = (subrange (zv__409, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                            let zrs1 = (subrange (zv__409, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                            let zrd = (subrange (zv__409, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                            ZSome (ZRTYPEW ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_SLLW, zrd, zrs1, zrs2)))
                          | zv__413 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__413, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__413, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B1; B0; B1])) && (eq_list ((subrange (zv__413, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B1; B0; B1; B1]))))) ->
                            let zrs2 = (subrange (zv__413, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                            let zrs1 = (subrange (zv__413, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                            let zrd = (subrange (zv__413, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                            ZSome (ZRTYPEW ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_SRLW, zrd, zrs1, zrs2)))
                          | zv__417 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__417, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B1; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__417, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B1; B0; B1])) && (eq_list ((subrange (zv__417, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B1; B0; B1; B1]))))) ->
                            let zrs2 = (subrange (zv__417, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                            let zrs1 = (subrange (zv__417, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                            let zrd = (subrange (zv__417, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                            ZSome (ZRTYPEW ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_SRAW, zrd, zrs1, zrs2)))
                          | zv__421 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__421, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__421, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B1])) && (eq_list ((subrange (zv__421, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B1; B1; B0; B1; B1]))))) ->
                            let zshamt = (subrange (zv__421, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                            let zrs1 = (subrange (zv__421, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                            let zrd = (subrange (zv__421, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                            ZSome (ZSHIFTIWOP ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_SLLIW, zrd, zrs1, zshamt)))
                          | zv__425 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__425, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__425, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B1; B0; B1])) && (eq_list ((subrange (zv__425, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B1; B1; B0; B1; B1]))))) ->
                            let zshamt = (subrange (zv__425, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                            let zrs1 = (subrange (zv__425, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                            let zrd = (subrange (zv__425, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                            ZSome (ZSHIFTIWOP ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_SRLIW, zrd, zrs1, zshamt)))
                          | zv__429 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__429, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B1; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__429, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B1; B0; B1])) && (eq_list ((subrange (zv__429, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B1; B1; B0; B1; B1]))))) ->
                            let zshamt = (subrange (zv__429, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                            let zrs1 = (subrange (zv__429, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                            let zrd = (subrange (zv__429, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                            ZSome (ZSHIFTIWOP ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_SRAIW, zrd, zrs1, zshamt)))
                          | zv__433 when ((eq_list ((subrange (zv__433, (Big_int.of_int (31)), (Big_int.of_int (28)))), [B0; B0; B0; B0])) && (eq_list ((subrange (zv__433, (Big_int.of_int (19)), Big_int.zero)), [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B1; B1]))) ->
                            let zsucc = (subrange (zv__433, (Big_int.of_int (23)), (Big_int.of_int (20)))) in
                            let zpred = (subrange (zv__433, (Big_int.of_int (27)), (Big_int.of_int (24)))) in
                            ZSome (ZFENCE ((fun (v0, v1) -> (v1, v0)) (zsucc, zpred)))
                          | zv__439 when ((eq_list ((subrange (zv__439, (Big_int.of_int (31)), (Big_int.of_int (28)))), [B1; B0; B0; B0])) && (eq_list ((subrange (zv__439, (Big_int.of_int (19)), Big_int.zero)), [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B1; B1]))) ->
                            let zsucc = (subrange (zv__439, (Big_int.of_int (23)), (Big_int.of_int (20)))) in
                            let zpred = (subrange (zv__439, (Big_int.of_int (27)), (Big_int.of_int (24)))) in
                            ZSome (ZFENCE_TSO ((fun (v0, v1) -> (v1, v0)) (zsucc, zpred)))
                          | zv__445 when (eq_list (zv__445, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B1; B1])) ->
                            ZSome (ZFENCEI ())
                          | zv__451 when (eq_list (zv__451, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B1; B0; B0; B1; B1])) ->
                            ZSome (ZECALL ())
                          | zv__457 when (eq_list (zv__457, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B1; B0; B0; B1; B1])) ->
                            ZSome (ZMRET ())
                          | zv__464 when (eq_list (zv__464, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B1; B0; B0; B1; B1])) ->
                            ZSome (ZSRET ())
                          | zv__471 when (eq_list (zv__471, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B1; B0; B0; B1; B1])) ->
                            ZSome (ZEBREAK ())
                          | zv__477 when (eq_list (zv__477, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B1; B0; B0; B1; B1])) ->
                            ZSome (ZWFI ())
                          | zv__483 when ((eq_list ((subrange (zv__483, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B1; B0; B0; B1])) && (eq_list ((subrange (zv__483, (Big_int.of_int (14)), Big_int.zero)), [B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B1; B0; B0; B1; B1]))) ->
                            let zrs2 = (subrange (zv__483, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                            let zrs1 = (subrange (zv__483, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                            ZSome (ZSFENCE_VMA ((fun (v0, v1) -> (v1, v0)) (zrs2, zrs1)))
                          | zv__488 when ((let zmapping6z3 = (subrange (zv__488, (Big_int.of_int (14)), (Big_int.of_int (12)))) in
                          zencdec_mul_op_backwards_matches zmapping6z3) && ((eq_list ((subrange (zv__488, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B1])) && (eq_list ((subrange (zv__488, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1])))) ->
                            let zrs2 = (subrange (zv__488, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                            let zrs1 = (subrange (zv__488, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                            let zrd = (subrange (zv__488, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                            let zmapping6z3 = (subrange (zv__488, (Big_int.of_int (14)), (Big_int.of_int (12)))) in
                            begin
                              match (zencdec_mul_op_backwards zmapping6z3) with
                              | (zhigh, zsigned1, zsigned2) ->
                                ZSome (ZMUL ((fun (v0, v1, v2, v3, v4, v5) -> (v5, v4, v3, v2, v1, v0)) (zsigned2, zsigned1, zhigh, zrd, zrs1, zrs2)))
                              | _ -> ZNone ()
                            end
                          | _ -> ZNone ()
                        end) with
                        | ZSome (zresult) -> zresult
                        | ZNone (()) ->
                          begin
                            match (begin
                              match zhead_expz3 with
                              | zv__394 when ((let zmapping7z3 = (subrange (zv__394, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
                              zbool_not_bits_backwards_matches zmapping7z3) && ((eq_list ((subrange (zv__394, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B1])) && ((eq_list ((subrange (zv__394, (Big_int.of_int (14)), (Big_int.of_int (13)))), [B1; B0])) && (eq_list ((subrange (zv__394, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1]))))) ->
                                let zrs2 = (subrange (zv__394, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                                let zrs1 = (subrange (zv__394, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                let zrd = (subrange (zv__394, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                let zmapping7z3 = (subrange (zv__394, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
                                begin
                                  match (zbool_not_bits_backwards zmapping7z3) with
                                  | zs ->
                                    ZSome (ZDIV ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (zs, zrd, zrs1, zrs2)))
                                  | _ -> ZNone ()
                                end
                              | _ -> ZNone ()
                            end) with
                            | ZSome (zresult) -> zresult
                            | ZNone (()) ->
                              begin
                                match (begin
                                  match zhead_expz3 with
                                  | zv__390 when ((let zmapping8z3 = (subrange (zv__390, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
                                  zbool_not_bits_backwards_matches zmapping8z3) && ((eq_list ((subrange (zv__390, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B1])) && ((eq_list ((subrange (zv__390, (Big_int.of_int (14)), (Big_int.of_int (13)))), [B1; B1])) && (eq_list ((subrange (zv__390, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1]))))) ->
                                    let zrs2 = (subrange (zv__390, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                                    let zrs1 = (subrange (zv__390, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                    let zrd = (subrange (zv__390, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                    let zmapping8z3 = (subrange (zv__390, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
                                    begin
                                      match (zbool_not_bits_backwards zmapping8z3) with
                                      | zs ->
                                        ZSome (ZREM ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (zs, zrd, zrs1, zrs2)))
                                      | _ -> ZNone ()
                                    end
                                  | _ -> ZNone ()
                                end) with
                                | ZSome (zresult) -> zresult
                                | ZNone (()) ->
                                  begin
                                    match (begin
                                      match zhead_expz3 with
                                      | zv__382 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__382, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B1])) && ((eq_list ((subrange (zv__382, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__382, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B1; B0; B1; B1]))))) ->
                                        let zrs2 = (subrange (zv__382, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                                        let zrs1 = (subrange (zv__382, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                        let zrd = (subrange (zv__382, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                        ZSome (ZMULW ((fun (v0, v1, v2) -> (v2, v1, v0)) (zrd, zrs1, zrs2)))
                                      | zv__386 when ((let zmapping9z3 = (subrange (zv__386, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
                                      zbool_not_bits_backwards_matches zmapping9z3) && ((eq_list ((subrange (zv__386, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B1])) && ((eq_list ((subrange (zv__386, (Big_int.of_int (14)), (Big_int.of_int (13)))), [B1; B0])) && (eq_list ((subrange (zv__386, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B1; B0; B1; B1]))))) ->
                                        let zrs2 = (subrange (zv__386, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                                        let zrs1 = (subrange (zv__386, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                        let zrd = (subrange (zv__386, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                        let zmapping9z3 = (subrange (zv__386, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
                                        begin
                                          match (zbool_not_bits_backwards zmapping9z3) with
                                          | zs when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
                                            ZSome (ZDIVW ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (zs, zrd, zrs1, zrs2)))
                                          | _ -> ZNone ()
                                        end
                                      | _ -> ZNone ()
                                    end) with
                                    | ZSome (zresult) -> zresult
                                    | ZNone (()) ->
                                      begin
                                        match (begin
                                          match zhead_expz3 with
                                          | zv__378 when ((let zmapping10z3 = (subrange (zv__378, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
                                          zbool_not_bits_backwards_matches zmapping10z3) && ((eq_list ((subrange (zv__378, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B1])) && ((eq_list ((subrange (zv__378, (Big_int.of_int (14)), (Big_int.of_int (13)))), [B1; B1])) && (eq_list ((subrange (zv__378, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B1; B0; B1; B1]))))) ->
                                            let zrs2 = (subrange (zv__378, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                                            let zrs1 = (subrange (zv__378, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                            let zrd = (subrange (zv__378, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                            let zmapping10z3 = (subrange (zv__378, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
                                            begin
                                              match (zbool_not_bits_backwards zmapping10z3) with
                                              | zs when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
                                                ZSome (ZREMW ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (zs, zrd, zrs1, zrs2)))
                                              | _ -> ZNone ()
                                            end
                                          | _ -> ZNone ()
                                        end) with
                                        | ZSome (zresult) -> zresult
                                        | ZNone (()) ->
                                          begin
                                            match (begin
                                              match zhead_expz3 with
                                              | zv__376 when ((let zmapping12z3 = (subrange (zv__376, (Big_int.of_int (13)), (Big_int.of_int (12)))) in
                                              let zmapping11z3 = (subrange (zv__376, (Big_int.of_int (14)), (Big_int.of_int (14)))) in
                                              (zbool_bits_backwards_matches zmapping11z3) && (zencdec_csrop_backwards_matches zmapping12z3)) && (eq_list ((subrange (zv__376, (Big_int.of_int (6)), Big_int.zero)), [B1; B1; B1; B0; B0; B1; B1]))) ->
                                                let zcsr = (subrange (zv__376, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
                                                let zrs1 = (subrange (zv__376, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                let zrd = (subrange (zv__376, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                let zmapping12z3 = (subrange (zv__376, (Big_int.of_int (13)), (Big_int.of_int (12)))) in
                                                let zmapping11z3 = (subrange (zv__376, (Big_int.of_int (14)), (Big_int.of_int (14)))) in
                                                let zcsr = (subrange (zv__376, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
                                                begin
                                                  match ((fun (v0, v1) -> (v1, v0)) (zencdec_csrop_backwards zmapping12z3, zbool_bits_backwards zmapping11z3)) with
                                                  | (zis_imm, zop) ->
                                                    ZSome (ZCSR ((fun (v0, v1, v2, v3, v4) -> (v4, v3, v2, v1, v0)) (zop, zis_imm, zrd, zrs1, zcsr)))
                                                  | _ -> ZNone ()
                                                end
                                              | _ -> ZNone ()
                                            end) with
                                            | ZSome (zresult) -> zresult
                                            | ZNone (()) ->
                                              begin
                                                match zhead_expz3 with
                                                | zv__244 when ((let zfm = (subrange (zv__244, (Big_int.of_int (31)), (Big_int.of_int (28)))) in
                                                let zrs = (subrange (zv__244, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                let zrd = (subrange (zv__244, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                let zfm = (subrange (zv__244, (Big_int.of_int (31)), (Big_int.of_int (28)))) in
                                                ((zneq_bits (zfm, [B0; B0; B0; B0])) && (zneq_bits (zfm, [B1; B0; B0; B0]))) || ((zneq_bits (zrs, [B0; B0; B0; B0; B0])) || (zneq_bits (zrd, [B0; B0; B0; B0; B0])))) && ((eq_list ((subrange (zv__244, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__244, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B0; B1; B1; B1; B1])))) ->
                                                  let zfm = (subrange (zv__244, (Big_int.of_int (31)), (Big_int.of_int (28)))) in
                                                  let zsucc = (subrange (zv__244, (Big_int.of_int (23)), (Big_int.of_int (20)))) in
                                                  let zrs = (subrange (zv__244, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  let zrd = (subrange (zv__244, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  let zpred = (subrange (zv__244, (Big_int.of_int (27)), (Big_int.of_int (24)))) in
                                                  let zfm = (subrange (zv__244, (Big_int.of_int (31)), (Big_int.of_int (28)))) in
                                                  ZFENCE_RESERVED ((fun (v0, v1, v2, v3, v4) -> (v4, v3, v2, v1, v0)) (zrd, zrs, zsucc, zpred, zfm))
                                                | zv__247 when ((let zimm = (subrange (zv__247, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
                                                let zrs = (subrange (zv__247, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                let zrd = (subrange (zv__247, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                let zimm = (subrange (zv__247, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
                                                (zneq_bits (zimm, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0])) || ((zneq_bits (zrs, zzzreg)) || (zneq_bits (zrd, zzzreg)))) && ((eq_list ((subrange (zv__247, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B1])) && (eq_list ((subrange (zv__247, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B0; B1; B1; B1; B1])))) ->
                                                  let zimm = (subrange (zv__247, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
                                                  let zrs = (subrange (zv__247, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  let zrd = (subrange (zv__247, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  let zimm = (subrange (zv__247, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
                                                  ZFENCEI_RESERVED ((fun (v0, v1, v2) -> (v2, v1, v0)) (zrd, zrs, zimm))
                                                | zv__250 when ((zhaveXcheri ()) && (eq_list ((subrange (zv__250, (Big_int.of_int (6)), Big_int.zero)), [B1; B1; B1; B1; B0; B1; B1]))) ->
                                                  let zimm = (subrange (zv__250, (Big_int.of_int (31)), (Big_int.of_int (12)))) in
                                                  let zimm = (subrange (zv__250, (Big_int.of_int (31)), (Big_int.of_int (12)))) in
                                                  let zcd = (subrange (zv__250, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  ZAUICGP ((fun (v0, v1) -> (v1, v0)) (zcd, zimm))
                                                | zv__252 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__252, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__252, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__252, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zrd = (subrange (zv__252, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  let zcs1 = (subrange (zv__252, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  ZCGetPerm ((fun (v0, v1) -> (v1, v0)) (zcs1, zrd))
                                                | zv__257 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__257, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B0; B0; B0; B0; B1])) && ((eq_list ((subrange (zv__257, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__257, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zrd = (subrange (zv__257, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  let zcs1 = (subrange (zv__257, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  ZCGetType ((fun (v0, v1) -> (v1, v0)) (zcs1, zrd))
                                                | zv__262 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__262, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B0; B0; B0; B1; B0])) && ((eq_list ((subrange (zv__262, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__262, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zrd = (subrange (zv__262, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  let zcs1 = (subrange (zv__262, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  ZCGetBase ((fun (v0, v1) -> (v1, v0)) (zcs1, zrd))
                                                | zv__267 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__267, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B0; B0; B0; B1; B1])) && ((eq_list ((subrange (zv__267, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__267, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zrd = (subrange (zv__267, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  let zcs1 = (subrange (zv__267, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  ZCGetLen ((fun (v0, v1) -> (v1, v0)) (zcs1, zrd))
                                                | zv__272 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__272, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B0; B0; B1; B0; B0])) && ((eq_list ((subrange (zv__272, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__272, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zrd = (subrange (zv__272, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  let zcs1 = (subrange (zv__272, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  ZCGetTag ((fun (v0, v1) -> (v1, v0)) (zcs1, zrd))
                                                | zv__277 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__277, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B0; B1; B1; B1; B1])) && ((eq_list ((subrange (zv__277, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__277, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zrd = (subrange (zv__277, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  let zcs1 = (subrange (zv__277, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  ZCGetAddr ((fun (v0, v1) -> (v1, v0)) (zcs1, zrd))
                                                | zv__282 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__282, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B1; B0; B1; B1; B1])) && ((eq_list ((subrange (zv__282, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__282, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zrd = (subrange (zv__282, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  let zcs1 = (subrange (zv__282, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  ZCGetHigh ((fun (v0, v1) -> (v1, v0)) (zcs1, zrd))
                                                | zv__287 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__287, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B1; B1; B0; B0; B0])) && ((eq_list ((subrange (zv__287, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__287, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zrd = (subrange (zv__287, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  let zcs1 = (subrange (zv__287, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  ZCGetTop ((fun (v0, v1) -> (v1, v0)) (zcs1, zrd))
                                                | zv__292 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__292, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B0; B1; B0; B1; B0])) && ((eq_list ((subrange (zv__292, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__292, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zcs1 = (subrange (zv__292, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  let zcd = (subrange (zv__292, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  ZCMove ((fun (v0, v1) -> (v1, v0)) (zcs1, zcd))
                                                | zv__297 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__297, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B0; B1; B0; B1; B1])) && ((eq_list ((subrange (zv__297, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__297, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zcs1 = (subrange (zv__297, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  let zcd = (subrange (zv__297, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  ZCClearTag ((fun (v0, v1) -> (v1, v0)) (zcs1, zcd))
                                                | zv__302 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__302, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B0; B1; B0; B0; B0])) && ((eq_list ((subrange (zv__302, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__302, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zrs1 = (subrange (zv__302, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  let zrd = (subrange (zv__302, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  ZCRRL ((fun (v0, v1) -> (v1, v0)) (zrs1, zrd))
                                                | zv__307 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__307, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B0; B1; B0; B0; B1])) && ((eq_list ((subrange (zv__307, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__307, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zrs1 = (subrange (zv__307, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  let zrd = (subrange (zv__307, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  ZCRAM ((fun (v0, v1) -> (v1, v0)) (zrs1, zrd))
                                                | zv__312 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__312, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B1; B0; B1; B1])) && ((eq_list ((subrange (zv__312, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__312, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zcs2 = (subrange (zv__312, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                                                  let zcs1 = (subrange (zv__312, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  let zcd = (subrange (zv__312, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  ZCSeal ((fun (v0, v1, v2) -> (v2, v1, v0)) (zcs2, zcs1, zcd))
                                                | zv__316 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__316, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B1; B1; B0; B0])) && ((eq_list ((subrange (zv__316, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__316, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zcs2 = (subrange (zv__316, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                                                  let zcs1 = (subrange (zv__316, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  let zcd = (subrange (zv__316, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  ZCUnseal ((fun (v0, v1, v2) -> (v2, v1, v0)) (zcs2, zcs1, zcd))
                                                | zv__320 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__320, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B1; B1; B0; B1])) && ((eq_list ((subrange (zv__320, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__320, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zrs2 = (subrange (zv__320, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                                                  let zcs1 = (subrange (zv__320, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  let zcd = (subrange (zv__320, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  ZCAndPerm ((fun (v0, v1, v2) -> (v2, v1, v0)) (zrs2, zcs1, zcd))
                                                | zv__324 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__324, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B1; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__324, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__324, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zrs2 = (subrange (zv__324, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                                                  let zcs1 = (subrange (zv__324, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  let zcd = (subrange (zv__324, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  ZCSetAddr ((fun (v0, v1, v2) -> (v2, v1, v0)) (zrs2, zcs1, zcd))
                                                | zv__328 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__328, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B1; B0; B1; B1; B0])) && ((eq_list ((subrange (zv__328, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__328, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zrs2 = (subrange (zv__328, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                                                  let zcs1 = (subrange (zv__328, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  let zcd = (subrange (zv__328, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  ZCSetHigh ((fun (v0, v1, v2) -> (v2, v1, v0)) (zrs2, zcs1, zcd))
                                                | zv__332 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__332, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B1; B0; B0; B0; B1])) && ((eq_list ((subrange (zv__332, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__332, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zrs2 = (subrange (zv__332, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                                                  let zcs1 = (subrange (zv__332, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  let zcd = (subrange (zv__332, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  ZCIncAddr ((fun (v0, v1, v2) -> (v2, v1, v0)) (zrs2, zcs1, zcd))
                                                | zv__336 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__336, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B1; B0; B0; B0])) && ((eq_list ((subrange (zv__336, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__336, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zrs2 = (subrange (zv__336, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                                                  let zcs1 = (subrange (zv__336, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  let zcd = (subrange (zv__336, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  ZCSetBounds ((fun (v0, v1, v2) -> (v2, v1, v0)) (zrs2, zcs1, zcd))
                                                | zv__340 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__340, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B1; B0; B0; B1])) && ((eq_list ((subrange (zv__340, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__340, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zrs2 = (subrange (zv__340, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                                                  let zcs1 = (subrange (zv__340, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  let zcd = (subrange (zv__340, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  ZCSetBoundsExact ((fun (v0, v1, v2) -> (v2, v1, v0)) (zrs2, zcs1, zcd))
                                                | zv__344 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__344, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B1; B0; B1; B0])) && ((eq_list ((subrange (zv__344, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__344, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zrs2 = (subrange (zv__344, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                                                  let zcs1 = (subrange (zv__344, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  let zcd = (subrange (zv__344, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  ZCSetBoundsRoundDown ((fun (v0, v1, v2) -> (v2, v1, v0)) (zrs2, zcs1, zcd))
                                                | zv__348 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__348, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B1; B0; B1; B0; B0])) && ((eq_list ((subrange (zv__348, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__348, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zrd = (subrange (zv__348, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  let zcs2 = (subrange (zv__348, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                                                  let zcs1 = (subrange (zv__348, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  ZCSub ((fun (v0, v1, v2) -> (v2, v1, v0)) (zcs2, zcs1, zrd))
                                                | zv__352 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__352, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B1; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__352, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__352, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zrd = (subrange (zv__352, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  let zcs2 = (subrange (zv__352, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                                                  let zcs1 = (subrange (zv__352, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  ZCTestSubset ((fun (v0, v1, v2) -> (v2, v1, v0)) (zcs2, zcs1, zrd))
                                                | zv__356 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__356, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B1])) && ((eq_list ((subrange (zv__356, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__356, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zscr = (subrange (zv__356, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                                                  let zcs1 = (subrange (zv__356, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  let zcd = (subrange (zv__356, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  ZCSpecialRW ((fun (v0, v1, v2) -> (v2, v1, v0)) (zcs1, zscr, zcd))
                                                | zv__360 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__360, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B1])) && (eq_list ((subrange (zv__360, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1])))) ->
                                                  let zimm12 = (subrange (zv__360, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
                                                  let zimm12 = (subrange (zv__360, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
                                                  let zcs1 = (subrange (zv__360, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  let zcd = (subrange (zv__360, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  ZCIncAddrImmediate ((fun (v0, v1, v2) -> (v2, v1, v0)) (zimm12, zcs1, zcd))
                                                | zv__363 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__363, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B1; B0])) && (eq_list ((subrange (zv__363, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1])))) ->
                                                  let zimm12 = (subrange (zv__363, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
                                                  let zimm12 = (subrange (zv__363, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
                                                  let zcs1 = (subrange (zv__363, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  let zcd = (subrange (zv__363, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  ZCSetBoundsImmediate ((fun (v0, v1, v2) -> (v2, v1, v0)) (zimm12, zcs1, zcd))
                                                | zv__366 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__366, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B1; B0; B0; B0; B0; B1])) && ((eq_list ((subrange (zv__366, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__366, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  let zrd = (subrange (zv__366, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  let zcs2 = (subrange (zv__366, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                                                  let zcs1 = (subrange (zv__366, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  ZCSEQX ((fun (v0, v1, v2) -> (v2, v1, v0)) (zcs2, zcs1, zrd))
                                                | zv__370 when ((eq_list ((subrange (zv__370, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B1; B1])) && (eq_list ((subrange (zv__370, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B0; B0; B0; B1; B1]))) ->
                                                  let zoffset = (subrange (zv__370, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
                                                  let zrs1 = (subrange (zv__370, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  let zoffset = (subrange (zv__370, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
                                                  let zcd = (subrange (zv__370, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  ZLoadCapImm ((fun (v0, v1, v2) -> (v2, v1, v0)) (zoffset, zrs1, zcd))
                                                | zv__373 when ((eq_list ((subrange (zv__373, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B1; B1])) && (eq_list ((subrange (zv__373, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B0; B0; B0; B1; B1]))) ->
                                                  let zoff7 = (subrange (zv__373, (Big_int.of_int (31)), (Big_int.of_int (25)))) in
                                                  let zrs1 = (subrange (zv__373, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                  let zoff7 = (subrange (zv__373, (Big_int.of_int (31)), (Big_int.of_int (25)))) in
                                                  let zoff5 = (subrange (zv__373, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                  let zcs2 = (subrange (zv__373, (Big_int.of_int (24)), (Big_int.of_int (20)))) in
                                                  ZStoreCapImm ((fun (v0, v1, v2) -> (v2, v1, v0)) (append ((zoff7), (zoff5)), zrs1, zcs2))
                                                | zs -> ZILLEGAL zs
                                              end
                                          end
                                      end
                                  end
                              end
                          end
                      end
                  end
              end
          end
      end
  end)

and zencdec_forwards_matches (zargz3 : (zast)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | ZUTYPE ((zimm, zrd, zop)) -> true
    | ZRISCV_JAL ((zv__558, zrd)) when (eq_list ((subrange (zv__558, Big_int.zero, Big_int.zero)), [B0])) ->
      true
    | ZRISCV_JALR ((zimm, zrs1, zrd)) -> true
    | ZBTYPE ((zv__560, zrs2, zrs1, zop)) when (eq_list ((subrange (zv__560, Big_int.zero, Big_int.zero)), [B0])) ->
      true
    | ZITYPE ((zimm, zrs1, zrd, zop)) -> true
    | ZSHIFTIOP ((zshamt, zrs1, zrd, ZRISCV_SLLI)) -> true
    | ZSHIFTIOP ((zshamt, zrs1, zrd, ZRISCV_SRLI)) -> true
    | ZSHIFTIOP ((zshamt, zrs1, zrd, ZRISCV_SRAI)) -> true
    | ZRTYPE ((zrs2, zrs1, zrd, ZRISCV_ADD)) -> true
    | ZRTYPE ((zrs2, zrs1, zrd, ZRISCV_SLT)) -> true
    | ZRTYPE ((zrs2, zrs1, zrd, ZRISCV_SLTU)) -> true
    | ZRTYPE ((zrs2, zrs1, zrd, ZRISCV_AND)) -> true
    | ZRTYPE ((zrs2, zrs1, zrd, ZRISCV_OR)) -> true
    | ZRTYPE ((zrs2, zrs1, zrd, ZRISCV_XOR)) -> true
    | ZRTYPE ((zrs2, zrs1, zrd, ZRISCV_SLL)) -> true
    | ZRTYPE ((zrs2, zrs1, zrd, ZRISCV_SRL)) -> true
    | ZRTYPE ((zrs2, zrs1, zrd, ZRISCV_SUB)) -> true
    | ZRTYPE ((zrs2, zrs1, zrd, ZRISCV_SRA)) -> true
    | ZLOAD ((zimm, zrs1, zrd, zis_unsigned, zsizze, zp0z3, zp1z3)) when ((((lt ((zword_width_bytes zsizze), (Big_int.of_int (4)))) || ((znot zis_unsigned) && (lteq ((zword_width_bytes zsizze), (Big_int.of_int (4)))))) && (eq_bool (zp1z3, false))) && (eq_bool (zp0z3, false))) ->
      true
    | ZSTORE ((zv__562, zrs2, zrs1, zsizze, zp0z3, zp1z3)) when (((lteq ((zword_width_bytes zsizze), (Big_int.of_int (4)))) && (eq_bool (zp1z3, false))) && (eq_bool (zp0z3, false))) ->
      true
    | ZADDIW ((zimm, zrs1, zrd)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZRTYPEW ((zrs2, zrs1, zrd, ZRISCV_ADDW)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZRTYPEW ((zrs2, zrs1, zrd, ZRISCV_SUBW)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZRTYPEW ((zrs2, zrs1, zrd, ZRISCV_SLLW)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZRTYPEW ((zrs2, zrs1, zrd, ZRISCV_SRLW)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZRTYPEW ((zrs2, zrs1, zrd, ZRISCV_SRAW)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZSHIFTIWOP ((zshamt, zrs1, zrd, ZRISCV_SLLIW)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZSHIFTIWOP ((zshamt, zrs1, zrd, ZRISCV_SRLIW)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZSHIFTIWOP ((zshamt, zrs1, zrd, ZRISCV_SRAIW)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZFENCE ((zpred, zsucc)) -> true
    | ZFENCE_TSO ((zpred, zsucc)) -> true
    | ZFENCEI (()) -> true
    | ZECALL (()) -> true
    | ZMRET (()) -> true
    | ZSRET (()) -> true
    | ZEBREAK (()) -> true
    | ZWFI (()) -> true
    | ZSFENCE_VMA ((zrs1, zrs2)) -> true
    | ZMUL ((zrs2, zrs1, zrd, zhigh, zsigned1, zsigned2)) -> true
    | ZDIV ((zrs2, zrs1, zrd, zs)) -> true
    | ZREM ((zrs2, zrs1, zrd, zs)) -> true
    | ZMULW ((zrs2, zrs1, zrd)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZDIVW ((zrs2, zrs1, zrd, zs)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZREMW ((zrs2, zrs1, zrd, zs)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZCSR ((zcsr, zrs1, zrd, zis_imm, zop)) -> true
    | ZFENCE_RESERVED ((zfm, zpred, zsucc, zrs, zrd)) when (((zneq_bits (zfm, [B0; B0; B0; B0])) && (zneq_bits (zfm, [B1; B0; B0; B0]))) || ((zneq_bits (zrs, [B0; B0; B0; B0; B0])) || (zneq_bits (zrd, [B0; B0; B0; B0; B0])))) ->
      true
    | ZFENCEI_RESERVED ((zimm, zrs, zrd)) when ((zneq_bits (zimm, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0])) || ((zneq_bits (zrs, zzzreg)) || (zneq_bits (zrd, zzzreg)))) ->
      true
    | ZAUICGP ((zimm, zcd)) when (zhaveXcheri ()) -> true
    | ZCGetPerm ((zrd, zcs1)) when (zhaveXcheri ()) -> true
    | ZCGetType ((zrd, zcs1)) when (zhaveXcheri ()) -> true
    | ZCGetBase ((zrd, zcs1)) when (zhaveXcheri ()) -> true
    | ZCGetLen ((zrd, zcs1)) when (zhaveXcheri ()) -> true
    | ZCGetTag ((zrd, zcs1)) when (zhaveXcheri ()) -> true
    | ZCGetAddr ((zrd, zcs1)) when (zhaveXcheri ()) -> true
    | ZCGetHigh ((zrd, zcs1)) when (zhaveXcheri ()) -> true
    | ZCGetTop ((zrd, zcs1)) when (zhaveXcheri ()) -> true
    | ZCMove ((zcd, zcs1)) when (zhaveXcheri ()) -> true
    | ZCClearTag ((zcd, zcs1)) when (zhaveXcheri ()) -> true
    | ZCRRL ((zrd, zrs1)) when (zhaveXcheri ()) -> true
    | ZCRAM ((zrd, zrs1)) when (zhaveXcheri ()) -> true
    | ZCSeal ((zcd, zcs1, zcs2)) when (zhaveXcheri ()) -> true
    | ZCUnseal ((zcd, zcs1, zcs2)) when (zhaveXcheri ()) -> true
    | ZCAndPerm ((zcd, zcs1, zrs2)) when (zhaveXcheri ()) -> true
    | ZCSetAddr ((zcd, zcs1, zrs2)) when (zhaveXcheri ()) -> true
    | ZCSetHigh ((zcd, zcs1, zrs2)) when (zhaveXcheri ()) -> true
    | ZCIncAddr ((zcd, zcs1, zrs2)) when (zhaveXcheri ()) -> true
    | ZCSetBounds ((zcd, zcs1, zrs2)) when (zhaveXcheri ()) -> true
    | ZCSetBoundsExact ((zcd, zcs1, zrs2)) when (zhaveXcheri ()) -> true
    | ZCSetBoundsRoundDown ((zcd, zcs1, zrs2)) when (zhaveXcheri ()) -> true
    | ZCSub ((zrd, zcs1, zcs2)) when (zhaveXcheri ()) -> true
    | ZCTestSubset ((zrd, zcs1, zcs2)) when (zhaveXcheri ()) -> true
    | ZCSpecialRW ((zcd, zscr, zcs1)) when (zhaveXcheri ()) -> true
    | ZCIncAddrImmediate ((zcd, zcs1, zimm12)) when (zhaveXcheri ()) -> true
    | ZCSetBoundsImmediate ((zcd, zcs1, zimm12)) when (zhaveXcheri ()) -> true
    | ZCSEQX ((zrd, zcs1, zcs2)) when (zhaveXcheri ()) -> true
    | ZLoadCapImm ((zcd, zrs1, zoffset)) -> true
    | ZStoreCapImm ((zcs2, zrs1, zv__563)) -> true
    | ZILLEGAL (zs) -> true
    | _ -> false
  end)

and zencdec_backwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  let zhead_expz3 = zargz3 in
  begin
    match (begin
      match zhead_expz3 with
      | zv__877 when (let zmapping0z3 = (subrange (zv__877, (Big_int.of_int (6)), Big_int.zero)) in
      zencdec_uop_backwards_matches zmapping0z3) ->
        let zmapping0z3 = (subrange (zv__877, (Big_int.of_int (6)), Big_int.zero)) in
        begin
          match (zencdec_uop_backwards zmapping0z3) with
          | zop -> ZSome true
          | _ -> ZNone ()
        end
      | _ -> ZNone ()
    end) with
    | ZSome (zresult) -> zresult
    | ZNone (()) ->
      begin
        match (begin
          match zhead_expz3 with
          | zv__870 when (eq_list ((subrange (zv__870, (Big_int.of_int (6)), Big_int.zero)), [B1; B1; B0; B1; B1; B1; B1])) ->
            ZSome true
          | zv__872 when ((eq_list ((subrange (zv__872, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__872, (Big_int.of_int (6)), Big_int.zero)), [B1; B1; B0; B0; B1; B1; B1]))) ->
            ZSome true
          | zv__875 when ((let zmapping1z3 = (subrange (zv__875, (Big_int.of_int (14)), (Big_int.of_int (12)))) in
          zencdec_bop_backwards_matches zmapping1z3) && (eq_list ((subrange (zv__875, (Big_int.of_int (6)), Big_int.zero)), [B1; B1; B0; B0; B0; B1; B1]))) ->
            let zmapping1z3 = (subrange (zv__875, (Big_int.of_int (14)), (Big_int.of_int (12)))) in
            begin
              match (zencdec_bop_backwards zmapping1z3) with
              | zop -> ZSome true
              | _ -> ZNone ()
            end
          | _ -> ZNone ()
        end) with
        | ZSome (zresult) -> zresult
        | ZNone (()) ->
          begin
            match (begin
              match zhead_expz3 with
              | zv__868 when ((let zmapping2z3 = (subrange (zv__868, (Big_int.of_int (14)), (Big_int.of_int (12)))) in
              zencdec_iop_backwards_matches zmapping2z3) && (eq_list ((subrange (zv__868, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B1; B0; B0; B1; B1]))) ->
                let zmapping2z3 = (subrange (zv__868, (Big_int.of_int (14)), (Big_int.of_int (12)))) in
                begin
                  match (zencdec_iop_backwards zmapping2z3) with
                  | zop -> ZSome true
                  | _ -> ZNone ()
                end
              | _ -> ZNone ()
            end) with
            | ZSome (zresult) -> zresult
            | ZNone (()) ->
              begin
                match (begin
                  match zhead_expz3 with
                  | zv__814 when ((let zshamt = (subrange (zv__814, (Big_int.of_int (25)), (Big_int.of_int (20)))) in
                  (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) || (eq_bit ((access (zshamt, (Big_int.of_int (5)))), B0))) && ((eq_list ((subrange (zv__814, (Big_int.of_int (31)), (Big_int.of_int (26)))), [B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__814, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B1])) && (eq_list ((subrange (zv__814, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B1; B0; B0; B1; B1]))))) ->
                    ZSome true
                  | zv__818 when ((let zshamt = (subrange (zv__818, (Big_int.of_int (25)), (Big_int.of_int (20)))) in
                  (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) || (eq_bit ((access (zshamt, (Big_int.of_int (5)))), B0))) && ((eq_list ((subrange (zv__818, (Big_int.of_int (31)), (Big_int.of_int (26)))), [B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__818, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B1; B0; B1])) && (eq_list ((subrange (zv__818, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B1; B0; B0; B1; B1]))))) ->
                    ZSome true
                  | zv__822 when ((let zshamt = (subrange (zv__822, (Big_int.of_int (25)), (Big_int.of_int (20)))) in
                  (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) || (eq_bit ((access (zshamt, (Big_int.of_int (5)))), B0))) && ((eq_list ((subrange (zv__822, (Big_int.of_int (31)), (Big_int.of_int (26)))), [B0; B1; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__822, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B1; B0; B1])) && (eq_list ((subrange (zv__822, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B1; B0; B0; B1; B1]))))) ->
                    ZSome true
                  | zv__826 when ((eq_list ((subrange (zv__826, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__826, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__826, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1])))) ->
                    ZSome true
                  | zv__830 when ((eq_list ((subrange (zv__830, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__830, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B1; B0])) && (eq_list ((subrange (zv__830, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1])))) ->
                    ZSome true
                  | zv__834 when ((eq_list ((subrange (zv__834, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__834, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B1; B1])) && (eq_list ((subrange (zv__834, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1])))) ->
                    ZSome true
                  | zv__838 when ((eq_list ((subrange (zv__838, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__838, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B1; B1; B1])) && (eq_list ((subrange (zv__838, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1])))) ->
                    ZSome true
                  | zv__842 when ((eq_list ((subrange (zv__842, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__842, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B1; B1; B0])) && (eq_list ((subrange (zv__842, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1])))) ->
                    ZSome true
                  | zv__846 when ((eq_list ((subrange (zv__846, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__846, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B1; B0; B0])) && (eq_list ((subrange (zv__846, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1])))) ->
                    ZSome true
                  | zv__850 when ((eq_list ((subrange (zv__850, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__850, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B1])) && (eq_list ((subrange (zv__850, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1])))) ->
                    ZSome true
                  | zv__854 when ((eq_list ((subrange (zv__854, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__854, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B1; B0; B1])) && (eq_list ((subrange (zv__854, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1])))) ->
                    ZSome true
                  | zv__858 when ((eq_list ((subrange (zv__858, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B1; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__858, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__858, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1])))) ->
                    ZSome true
                  | zv__862 when ((eq_list ((subrange (zv__862, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B1; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__862, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B1; B0; B1])) && (eq_list ((subrange (zv__862, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1])))) ->
                    ZSome true
                  | zv__866 when ((let zmapping4z3 = (subrange (zv__866, (Big_int.of_int (13)), (Big_int.of_int (12)))) in
                  let zmapping3z3 = (subrange (zv__866, (Big_int.of_int (14)), (Big_int.of_int (14)))) in
                  (zbool_bits_backwards_matches zmapping3z3) && (zsizze_bits_backwards_matches zmapping4z3)) && (eq_list ((subrange (zv__866, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B0; B0; B0; B1; B1]))) ->
                    let zmapping4z3 = (subrange (zv__866, (Big_int.of_int (13)), (Big_int.of_int (12)))) in
                    let zmapping3z3 = (subrange (zv__866, (Big_int.of_int (14)), (Big_int.of_int (14)))) in
                    begin
                      match ((fun (v0, v1) -> (v1, v0)) (zsizze_bits_backwards zmapping4z3, zbool_bits_backwards zmapping3z3)) with
                      | (zis_unsigned, zsizze) when ((lt ((zword_width_bytes zsizze), (Big_int.of_int (4)))) || ((znot zis_unsigned) && (lteq ((zword_width_bytes zsizze), (Big_int.of_int (4)))))) ->
                        ZSome true
                      | _ -> ZNone ()
                    end
                  | _ -> ZNone ()
                end) with
                | ZSome (zresult) -> zresult
                | ZNone (()) ->
                  begin
                    match (begin
                      match zhead_expz3 with
                      | zv__811 when ((let zmapping5z3 = (subrange (zv__811, (Big_int.of_int (13)), (Big_int.of_int (12)))) in
                      zsizze_bits_backwards_matches zmapping5z3) && ((eq_list ((subrange (zv__811, (Big_int.of_int (14)), (Big_int.of_int (14)))), [B0])) && (eq_list ((subrange (zv__811, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B0; B0; B0; B1; B1])))) ->
                        let zmapping5z3 = (subrange (zv__811, (Big_int.of_int (13)), (Big_int.of_int (12)))) in
                        begin
                          match (zsizze_bits_backwards zmapping5z3) with
                          | zsizze when (lteq ((zword_width_bytes zsizze), (Big_int.of_int (4)))) ->
                            ZSome true
                          | _ -> ZNone ()
                        end
                      | _ -> ZNone ()
                    end) with
                    | ZSome (zresult) -> zresult
                    | ZNone (()) ->
                      begin
                        match (begin
                          match zhead_expz3 with
                          | zv__718 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__718, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__718, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B1; B1; B0; B1; B1])))) ->
                            ZSome true
                          | zv__721 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__721, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__721, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__721, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B1; B0; B1; B1]))))) ->
                            ZSome true
                          | zv__725 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__725, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B1; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__725, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__725, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B1; B0; B1; B1]))))) ->
                            ZSome true
                          | zv__729 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__729, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__729, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B1])) && (eq_list ((subrange (zv__729, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B1; B0; B1; B1]))))) ->
                            ZSome true
                          | zv__733 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__733, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__733, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B1; B0; B1])) && (eq_list ((subrange (zv__733, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B1; B0; B1; B1]))))) ->
                            ZSome true
                          | zv__737 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__737, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B1; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__737, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B1; B0; B1])) && (eq_list ((subrange (zv__737, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B1; B0; B1; B1]))))) ->
                            ZSome true
                          | zv__741 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__741, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__741, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B1])) && (eq_list ((subrange (zv__741, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B1; B1; B0; B1; B1]))))) ->
                            ZSome true
                          | zv__745 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__745, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__745, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B1; B0; B1])) && (eq_list ((subrange (zv__745, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B1; B1; B0; B1; B1]))))) ->
                            ZSome true
                          | zv__749 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__749, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B1; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__749, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B1; B0; B1])) && (eq_list ((subrange (zv__749, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B1; B1; B0; B1; B1]))))) ->
                            ZSome true
                          | zv__753 when ((eq_list ((subrange (zv__753, (Big_int.of_int (31)), (Big_int.of_int (28)))), [B0; B0; B0; B0])) && (eq_list ((subrange (zv__753, (Big_int.of_int (19)), Big_int.zero)), [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B1; B1]))) ->
                            ZSome true
                          | zv__759 when ((eq_list ((subrange (zv__759, (Big_int.of_int (31)), (Big_int.of_int (28)))), [B1; B0; B0; B0])) && (eq_list ((subrange (zv__759, (Big_int.of_int (19)), Big_int.zero)), [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B1; B1]))) ->
                            ZSome true
                          | zv__765 when (eq_list (zv__765, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B1; B1])) ->
                            ZSome true
                          | zv__771 when (eq_list (zv__771, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B1; B0; B0; B1; B1])) ->
                            ZSome true
                          | zv__777 when (eq_list (zv__777, [B0; B0; B1; B1; B0; B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B1; B0; B0; B1; B1])) ->
                            ZSome true
                          | zv__784 when (eq_list (zv__784, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B1; B0; B0; B1; B1])) ->
                            ZSome true
                          | zv__791 when (eq_list (zv__791, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B1; B0; B0; B1; B1])) ->
                            ZSome true
                          | zv__797 when (eq_list (zv__797, [B0; B0; B0; B1; B0; B0; B0; B0; B0; B1; B0; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B1; B0; B0; B1; B1])) ->
                            ZSome true
                          | zv__803 when ((eq_list ((subrange (zv__803, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B1; B0; B0; B1])) && (eq_list ((subrange (zv__803, (Big_int.of_int (14)), Big_int.zero)), [B0; B0; B0; B0; B0; B0; B0; B0; B1; B1; B1; B0; B0; B1; B1]))) ->
                            ZSome true
                          | zv__808 when ((let zmapping6z3 = (subrange (zv__808, (Big_int.of_int (14)), (Big_int.of_int (12)))) in
                          zencdec_mul_op_backwards_matches zmapping6z3) && ((eq_list ((subrange (zv__808, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B1])) && (eq_list ((subrange (zv__808, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1])))) ->
                            let zmapping6z3 = (subrange (zv__808, (Big_int.of_int (14)), (Big_int.of_int (12)))) in
                            begin
                              match (zencdec_mul_op_backwards zmapping6z3) with
                              | (zhigh, zsigned1, zsigned2) -> ZSome true
                              | _ -> ZNone ()
                            end
                          | _ -> ZNone ()
                        end) with
                        | ZSome (zresult) -> zresult
                        | ZNone (()) ->
                          begin
                            match (begin
                              match zhead_expz3 with
                              | zv__714 when ((let zmapping7z3 = (subrange (zv__714, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
                              zbool_not_bits_backwards_matches zmapping7z3) && ((eq_list ((subrange (zv__714, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B1])) && ((eq_list ((subrange (zv__714, (Big_int.of_int (14)), (Big_int.of_int (13)))), [B1; B0])) && (eq_list ((subrange (zv__714, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1]))))) ->
                                let zmapping7z3 = (subrange (zv__714, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
                                begin
                                  match (zbool_not_bits_backwards zmapping7z3) with
                                  | zs -> ZSome true
                                  | _ -> ZNone ()
                                end
                              | _ -> ZNone ()
                            end) with
                            | ZSome (zresult) -> zresult
                            | ZNone (()) ->
                              begin
                                match (begin
                                  match zhead_expz3 with
                                  | zv__710 when ((let zmapping8z3 = (subrange (zv__710, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
                                  zbool_not_bits_backwards_matches zmapping8z3) && ((eq_list ((subrange (zv__710, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B1])) && ((eq_list ((subrange (zv__710, (Big_int.of_int (14)), (Big_int.of_int (13)))), [B1; B1])) && (eq_list ((subrange (zv__710, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B0; B0; B1; B1]))))) ->
                                    let zmapping8z3 = (subrange (zv__710, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
                                    begin
                                      match (zbool_not_bits_backwards zmapping8z3) with
                                      | zs -> ZSome true
                                      | _ -> ZNone ()
                                    end
                                  | _ -> ZNone ()
                                end) with
                                | ZSome (zresult) -> zresult
                                | ZNone (()) ->
                                  begin
                                    match (begin
                                      match zhead_expz3 with
                                      | zv__702 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__702, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B1])) && ((eq_list ((subrange (zv__702, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__702, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B1; B0; B1; B1]))))) ->
                                        ZSome true
                                      | zv__706 when ((let zmapping9z3 = (subrange (zv__706, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
                                      zbool_not_bits_backwards_matches zmapping9z3) && ((eq_list ((subrange (zv__706, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B1])) && ((eq_list ((subrange (zv__706, (Big_int.of_int (14)), (Big_int.of_int (13)))), [B1; B0])) && (eq_list ((subrange (zv__706, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B1; B0; B1; B1]))))) ->
                                        let zmapping9z3 = (subrange (zv__706, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
                                        begin
                                          match (zbool_not_bits_backwards zmapping9z3) with
                                          | zs when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
                                            ZSome true
                                          | _ -> ZNone ()
                                        end
                                      | _ -> ZNone ()
                                    end) with
                                    | ZSome (zresult) -> zresult
                                    | ZNone (()) ->
                                      begin
                                        match (begin
                                          match zhead_expz3 with
                                          | zv__698 when ((let zmapping10z3 = (subrange (zv__698, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
                                          zbool_not_bits_backwards_matches zmapping10z3) && ((eq_list ((subrange (zv__698, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B1])) && ((eq_list ((subrange (zv__698, (Big_int.of_int (14)), (Big_int.of_int (13)))), [B1; B1])) && (eq_list ((subrange (zv__698, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B1; B1; B0; B1; B1]))))) ->
                                            let zmapping10z3 = (subrange (zv__698, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
                                            begin
                                              match (zbool_not_bits_backwards zmapping10z3) with
                                              | zs when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
                                                ZSome true
                                              | _ -> ZNone ()
                                            end
                                          | _ -> ZNone ()
                                        end) with
                                        | ZSome (zresult) -> zresult
                                        | ZNone (()) ->
                                          begin
                                            match (begin
                                              match zhead_expz3 with
                                              | zv__696 when ((let zmapping12z3 = (subrange (zv__696, (Big_int.of_int (13)), (Big_int.of_int (12)))) in
                                              let zmapping11z3 = (subrange (zv__696, (Big_int.of_int (14)), (Big_int.of_int (14)))) in
                                              (zbool_bits_backwards_matches zmapping11z3) && (zencdec_csrop_backwards_matches zmapping12z3)) && (eq_list ((subrange (zv__696, (Big_int.of_int (6)), Big_int.zero)), [B1; B1; B1; B0; B0; B1; B1]))) ->
                                                let zmapping12z3 = (subrange (zv__696, (Big_int.of_int (13)), (Big_int.of_int (12)))) in
                                                let zmapping11z3 = (subrange (zv__696, (Big_int.of_int (14)), (Big_int.of_int (14)))) in
                                                begin
                                                  match ((fun (v0, v1) -> (v1, v0)) (zencdec_csrop_backwards zmapping12z3, zbool_bits_backwards zmapping11z3)) with
                                                  | (zis_imm, zop) -> ZSome true
                                                  | _ -> ZNone ()
                                                end
                                              | _ -> ZNone ()
                                            end) with
                                            | ZSome (zresult) -> zresult
                                            | ZNone (()) ->
                                              begin
                                                match zhead_expz3 with
                                                | zv__564 when ((let zfm = (subrange (zv__564, (Big_int.of_int (31)), (Big_int.of_int (28)))) in
                                                let zrs = (subrange (zv__564, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                let zrd = (subrange (zv__564, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                let zfm = (subrange (zv__564, (Big_int.of_int (31)), (Big_int.of_int (28)))) in
                                                ((zneq_bits (zfm, [B0; B0; B0; B0])) && (zneq_bits (zfm, [B1; B0; B0; B0]))) || ((zneq_bits (zrs, [B0; B0; B0; B0; B0])) || (zneq_bits (zrd, [B0; B0; B0; B0; B0])))) && ((eq_list ((subrange (zv__564, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__564, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B0; B1; B1; B1; B1])))) ->
                                                  true
                                                | zv__567 when ((let zimm = (subrange (zv__567, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
                                                let zrs = (subrange (zv__567, (Big_int.of_int (19)), (Big_int.of_int (15)))) in
                                                let zrd = (subrange (zv__567, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
                                                let zimm = (subrange (zv__567, (Big_int.of_int (31)), (Big_int.of_int (20)))) in
                                                (zneq_bits (zimm, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0])) || ((zneq_bits (zrs, zzzreg)) || (zneq_bits (zrd, zzzreg)))) && ((eq_list ((subrange (zv__567, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B1])) && (eq_list ((subrange (zv__567, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B0; B1; B1; B1; B1])))) ->
                                                  true
                                                | zv__570 when ((zhaveXcheri ()) && (eq_list ((subrange (zv__570, (Big_int.of_int (6)), Big_int.zero)), [B1; B1; B1; B1; B0; B1; B1]))) ->
                                                  true
                                                | zv__572 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__572, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__572, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__572, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__577 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__577, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B0; B0; B0; B0; B1])) && ((eq_list ((subrange (zv__577, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__577, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__582 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__582, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B0; B0; B0; B1; B0])) && ((eq_list ((subrange (zv__582, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__582, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__587 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__587, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B0; B0; B0; B1; B1])) && ((eq_list ((subrange (zv__587, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__587, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__592 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__592, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B0; B0; B1; B0; B0])) && ((eq_list ((subrange (zv__592, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__592, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__597 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__597, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B0; B1; B1; B1; B1])) && ((eq_list ((subrange (zv__597, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__597, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__602 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__602, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B1; B0; B1; B1; B1])) && ((eq_list ((subrange (zv__602, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__602, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__607 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__607, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B1; B1; B0; B0; B0])) && ((eq_list ((subrange (zv__607, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__607, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__612 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__612, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B0; B1; B0; B1; B0])) && ((eq_list ((subrange (zv__612, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__612, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__617 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__617, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B0; B1; B0; B1; B1])) && ((eq_list ((subrange (zv__617, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__617, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__622 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__622, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B0; B1; B0; B0; B0])) && ((eq_list ((subrange (zv__622, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__622, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__627 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__627, (Big_int.of_int (31)), (Big_int.of_int (20)))), [B1; B1; B1; B1; B1; B1; B1; B0; B1; B0; B0; B1])) && ((eq_list ((subrange (zv__627, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__627, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__632 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__632, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B1; B0; B1; B1])) && ((eq_list ((subrange (zv__632, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__632, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__636 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__636, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B1; B1; B0; B0])) && ((eq_list ((subrange (zv__636, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__636, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__640 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__640, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B1; B1; B0; B1])) && ((eq_list ((subrange (zv__640, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__640, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__644 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__644, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B1; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__644, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__644, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__648 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__648, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B1; B0; B1; B1; B0])) && ((eq_list ((subrange (zv__648, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__648, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__652 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__652, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B1; B0; B0; B0; B1])) && ((eq_list ((subrange (zv__652, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__652, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__656 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__656, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B1; B0; B0; B0])) && ((eq_list ((subrange (zv__656, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__656, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__660 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__660, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B1; B0; B0; B1])) && ((eq_list ((subrange (zv__660, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__660, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__664 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__664, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B1; B0; B1; B0])) && ((eq_list ((subrange (zv__664, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__664, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__668 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__668, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B1; B0; B1; B0; B0])) && ((eq_list ((subrange (zv__668, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__668, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__672 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__672, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B1; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__672, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__672, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__676 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__676, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B0; B0; B0; B0; B0; B1])) && ((eq_list ((subrange (zv__676, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__676, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__680 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__680, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B1])) && (eq_list ((subrange (zv__680, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1])))) ->
                                                  true
                                                | zv__683 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__683, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B1; B0])) && (eq_list ((subrange (zv__683, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1])))) ->
                                                  true
                                                | zv__686 when ((zhaveXcheri ()) && ((eq_list ((subrange (zv__686, (Big_int.of_int (31)), (Big_int.of_int (25)))), [B0; B1; B0; B0; B0; B0; B1])) && ((eq_list ((subrange (zv__686, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B0; B0])) && (eq_list ((subrange (zv__686, (Big_int.of_int (6)), Big_int.zero)), [B1; B0; B1; B1; B0; B1; B1]))))) ->
                                                  true
                                                | zv__690 when ((eq_list ((subrange (zv__690, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B1; B1])) && (eq_list ((subrange (zv__690, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B0; B0; B0; B1; B1]))) ->
                                                  true
                                                | zv__693 when ((eq_list ((subrange (zv__693, (Big_int.of_int (14)), (Big_int.of_int (12)))), [B0; B1; B1])) && (eq_list ((subrange (zv__693, (Big_int.of_int (6)), Big_int.zero)), [B0; B1; B0; B0; B0; B1; B1]))) ->
                                                  true
                                                | zs -> true
                                                | _ -> false
                                              end
                                          end
                                      end
                                  end
                              end
                          end
                      end
                  end
              end
          end
      end
  end)

and zencdec_compressed_forwards (zargz3 : (zast)) : (bit) list = sail_call (fun r ->
  begin
    match zargz3 with
    | ZC_NOP (()) ->
      append ([B0; B0; B0], (append ([B0], (append ([B0; B0; B0; B0; B0], (append ([B0; B0; B0; B0; B0], [B0; B1])))))))
    | ZC_ADDI4SPN ((zrd, zv__878)) when (let znzz96 = (subrange (zv__878, (Big_int.of_int (7)), (Big_int.of_int (4)))) in
    let znzz96 = (subrange (zv__878, (Big_int.of_int (7)), (Big_int.of_int (4)))) in
    let znzz54 = (subrange (zv__878, (Big_int.of_int (3)), (Big_int.of_int (2)))) in
    let znzz3 = (subrange (zv__878, (Big_int.of_int (1)), (Big_int.of_int (1)))) in
    let znzz2 = (subrange (zv__878, Big_int.zero, Big_int.zero)) in
    zneq_bits ((append (znzz96, (append (znzz54, (append (znzz3, znzz2)))))), [B0; B0; B0; B0; B0; B0; B0; B0])) ->
      let znzz96 = (subrange (zv__878, (Big_int.of_int (7)), (Big_int.of_int (4)))) in
      let znzz96 = (subrange (zv__878, (Big_int.of_int (7)), (Big_int.of_int (4)))) in
      let znzz54 = (subrange (zv__878, (Big_int.of_int (3)), (Big_int.of_int (2)))) in
      let znzz3 = (subrange (zv__878, (Big_int.of_int (1)), (Big_int.of_int (1)))) in
      let znzz2 = (subrange (zv__878, Big_int.zero, Big_int.zero)) in
      append ([B0; B0; B0], (append ((znzz54), (append ((znzz96), (append ((znzz2), (append ((znzz3), (append ((zrd), [B0; B0])))))))))))
    | ZC_LW ((zv__879, zrs1, zrd)) ->
      let zui6 = (subrange (zv__879, (Big_int.of_int (4)), (Big_int.of_int (4)))) in
      let zui6 = (subrange (zv__879, (Big_int.of_int (4)), (Big_int.of_int (4)))) in
      let zui53 = (subrange (zv__879, (Big_int.of_int (3)), (Big_int.of_int (1)))) in
      let zui2 = (subrange (zv__879, Big_int.zero, Big_int.zero)) in
      append ([B0; B1; B0], (append ((zui53), (append ((zrs1), (append ((zui2), (append ((zui6), (append ((zrd), [B0; B0])))))))))))
    | ZC_LD ((zv__880, zrs1, zrd)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      let zui76 = (subrange (zv__880, (Big_int.of_int (4)), (Big_int.of_int (3)))) in
      let zui76 = (subrange (zv__880, (Big_int.of_int (4)), (Big_int.of_int (3)))) in
      let zui53 = (subrange (zv__880, (Big_int.of_int (2)), Big_int.zero)) in
      append ([B0; B1; B1], (append ((zui53), (append ((zrs1), (append ((zui76), (append ((zrd), [B0; B0])))))))))
    | ZC_SW ((zv__881, zrs1, zrs2)) ->
      let zui6 = (subrange (zv__881, (Big_int.of_int (4)), (Big_int.of_int (4)))) in
      let zui6 = (subrange (zv__881, (Big_int.of_int (4)), (Big_int.of_int (4)))) in
      let zui53 = (subrange (zv__881, (Big_int.of_int (3)), (Big_int.of_int (1)))) in
      let zui2 = (subrange (zv__881, Big_int.zero, Big_int.zero)) in
      append ([B1; B1; B0], (append ((zui53), (append ((zrs1), (append ((zui2), (append ((zui6), (append ((zrs2), [B0; B0])))))))))))
    | ZC_SD ((zv__882, zrs1, zrs2)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      let zui76 = (subrange (zv__882, (Big_int.of_int (4)), (Big_int.of_int (3)))) in
      let zui76 = (subrange (zv__882, (Big_int.of_int (4)), (Big_int.of_int (3)))) in
      let zui53 = (subrange (zv__882, (Big_int.of_int (2)), Big_int.zero)) in
      append ([B1; B1; B1], (append ((zui53), (append ((zrs1), (append ((zui76), (append ((zrs2), [B0; B0])))))))))
    | ZC_ADDI ((zv__883, zrsd)) when (let znzzi5 = (subrange (zv__883, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzi5 = (subrange (zv__883, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzi40 = (subrange (zv__883, (Big_int.of_int (4)), Big_int.zero)) in
    (zneq_bits ((append (znzzi5, znzzi40)), [B0; B0; B0; B0; B0; B0])) && (zneq_bits (zrsd, zzzreg))) ->
      let znzzi5 = (subrange (zv__883, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let znzzi5 = (subrange (zv__883, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let znzzi40 = (subrange (zv__883, (Big_int.of_int (4)), Big_int.zero)) in
      append ([B0; B0; B0], (append ((znzzi5), (append ((zrsd), (append ((znzzi40), [B0; B1])))))))
    | ZC_JAL (zv__884) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) ->
      let zi11 = (subrange (zv__884, (Big_int.of_int (10)), (Big_int.of_int (10)))) in
      let zi98 = (subrange (zv__884, (Big_int.of_int (8)), (Big_int.of_int (7)))) in
      let zi7 = (subrange (zv__884, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
      let zi6 = (subrange (zv__884, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let zi5 = (subrange (zv__884, (Big_int.of_int (4)), (Big_int.of_int (4)))) in
      let zi4 = (subrange (zv__884, (Big_int.of_int (3)), (Big_int.of_int (3)))) in
      let zi31 = (subrange (zv__884, (Big_int.of_int (2)), Big_int.zero)) in
      let zi11 = (subrange (zv__884, (Big_int.of_int (10)), (Big_int.of_int (10)))) in
      let zi10 = (subrange (zv__884, (Big_int.of_int (9)), (Big_int.of_int (9)))) in
      append ([B0; B0; B1], (append ((zi11), (append ((zi4), (append ((zi98), (append ((zi10), (append ((zi6), (append ((zi7), (append ((zi31), (append ((zi5), [B0; B1])))))))))))))))))
    | ZC_ADDIW ((zv__885, zrsd)) when ((zneq_bits (zrsd, zzzreg)) && (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64))))) ->
      let zimm5 = (subrange (zv__885, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let zimm5 = (subrange (zv__885, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let zimm40 = (subrange (zv__885, (Big_int.of_int (4)), Big_int.zero)) in
      append ([B0; B0; B1], (append ((zimm5), (append ((zrsd), (append ((zimm40), [B0; B1])))))))
    | ZC_LI ((zv__886, zrd)) when (zneq_bits (zrd, zzzreg)) ->
      let zimm5 = (subrange (zv__886, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let zimm5 = (subrange (zv__886, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let zimm40 = (subrange (zv__886, (Big_int.of_int (4)), Big_int.zero)) in
      append ([B0; B1; B0], (append ((zimm5), (append ((zrd), (append ((zimm40), [B0; B1])))))))
    | ZC_ADDI16SP (zv__887) when (let znzzi9 = (subrange (zv__887, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzi9 = (subrange (zv__887, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzi87 = (subrange (zv__887, (Big_int.of_int (4)), (Big_int.of_int (3)))) in
    let znzzi6 = (subrange (zv__887, (Big_int.of_int (2)), (Big_int.of_int (2)))) in
    let znzzi5 = (subrange (zv__887, (Big_int.of_int (1)), (Big_int.of_int (1)))) in
    let znzzi4 = (subrange (zv__887, Big_int.zero, Big_int.zero)) in
    zneq_bits ((append (znzzi9, (append (znzzi87, (append (znzzi6, (append (znzzi5, znzzi4)))))))), [B0; B0; B0; B0; B0; B0])) ->
      let znzzi9 = (subrange (zv__887, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let znzzi9 = (subrange (zv__887, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let znzzi87 = (subrange (zv__887, (Big_int.of_int (4)), (Big_int.of_int (3)))) in
      let znzzi6 = (subrange (zv__887, (Big_int.of_int (2)), (Big_int.of_int (2)))) in
      let znzzi5 = (subrange (zv__887, (Big_int.of_int (1)), (Big_int.of_int (1)))) in
      let znzzi4 = (subrange (zv__887, Big_int.zero, Big_int.zero)) in
      append ([B0; B1; B1], (append ((znzzi9), (append ([B0; B0; B0; B1; B0], (append ((znzzi4), (append ((znzzi6), (append ((znzzi87), (append ((znzzi5), [B0; B1])))))))))))))
    | ZC_LUI ((zv__888, zrd)) when (let zimm17 = (subrange (zv__888, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let zimm17 = (subrange (zv__888, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let zimm1612 = (subrange (zv__888, (Big_int.of_int (4)), Big_int.zero)) in
    (zneq_bits (zrd, zzzreg)) && ((zneq_bits (zrd, zsp)) && (zneq_bits ((append (zimm17, zimm1612)), [B0; B0; B0; B0; B0; B0])))) ->
      let zimm17 = (subrange (zv__888, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let zimm17 = (subrange (zv__888, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let zimm1612 = (subrange (zv__888, (Big_int.of_int (4)), Big_int.zero)) in
      append ([B0; B1; B1], (append ((zimm17), (append ((zrd), (append ((zimm1612), [B0; B1])))))))
    | ZC_SRLI ((zv__889, zrsd)) when (let znzzui5 = (subrange (zv__889, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzui5 = (subrange (zv__889, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzui40 = (subrange (zv__889, (Big_int.of_int (4)), Big_int.zero)) in
    zneq_bits ((append (znzzui5, znzzui40)), [B0; B0; B0; B0; B0; B0])) ->
      let znzzui5 = (subrange (zv__889, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let znzzui5 = (subrange (zv__889, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let znzzui40 = (subrange (zv__889, (Big_int.of_int (4)), Big_int.zero)) in
      append ([B1; B0; B0], (append ((znzzui5), (append ([B0; B0], (append ((zrsd), (append ((znzzui40), [B0; B1])))))))))
    | ZC_SRAI ((zv__890, zrsd)) when (let znzzui5 = (subrange (zv__890, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzui5 = (subrange (zv__890, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzui40 = (subrange (zv__890, (Big_int.of_int (4)), Big_int.zero)) in
    zneq_bits ((append (znzzui5, znzzui40)), [B0; B0; B0; B0; B0; B0])) ->
      let znzzui5 = (subrange (zv__890, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let znzzui5 = (subrange (zv__890, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let znzzui40 = (subrange (zv__890, (Big_int.of_int (4)), Big_int.zero)) in
      append ([B1; B0; B0], (append ((znzzui5), (append ([B0; B1], (append ((zrsd), (append ((znzzui40), [B0; B1])))))))))
    | ZC_ANDI ((zv__891, zrsd)) ->
      let zi5 = (subrange (zv__891, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let zi5 = (subrange (zv__891, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let zi40 = (subrange (zv__891, (Big_int.of_int (4)), Big_int.zero)) in
      append ([B1; B0; B0], (append ((zi5), (append ([B1; B0], (append ((zrsd), (append ((zi40), [B0; B1])))))))))
    | ZC_SUB ((zrsd, zrs2)) ->
      append ([B1; B0; B0], (append ([B0], (append ([B1; B1], (append ((zrsd), (append ([B0; B0], (append ((zrs2), [B0; B1])))))))))))
    | ZC_XOR ((zrsd, zrs2)) ->
      append ([B1; B0; B0], (append ([B0], (append ([B1; B1], (append ((zrsd), (append ([B0; B1], (append ((zrs2), [B0; B1])))))))))))
    | ZC_OR ((zrsd, zrs2)) ->
      append ([B1; B0; B0], (append ([B0], (append ([B1; B1], (append ((zrsd), (append ([B1; B0], (append ((zrs2), [B0; B1])))))))))))
    | ZC_AND ((zrsd, zrs2)) ->
      append ([B1; B0; B0], (append ([B0], (append ([B1; B1], (append ((zrsd), (append ([B1; B1], (append ((zrs2), [B0; B1])))))))))))
    | ZC_SUBW ((zrsd, zrs2)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      append ([B1; B0; B0], (append ([B1], (append ([B1; B1], (append ((zrsd), (append ([B0; B0], (append ((zrs2), [B0; B1])))))))))))
    | ZC_ADDW ((zrsd, zrs2)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      append ([B1; B0; B0], (append ([B1], (append ([B1; B1], (append ((zrsd), (append ([B0; B1], (append ((zrs2), [B0; B1])))))))))))
    | ZC_J (zv__892) ->
      let zi11 = (subrange (zv__892, (Big_int.of_int (10)), (Big_int.of_int (10)))) in
      let zi98 = (subrange (zv__892, (Big_int.of_int (8)), (Big_int.of_int (7)))) in
      let zi7 = (subrange (zv__892, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
      let zi6 = (subrange (zv__892, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let zi5 = (subrange (zv__892, (Big_int.of_int (4)), (Big_int.of_int (4)))) in
      let zi4 = (subrange (zv__892, (Big_int.of_int (3)), (Big_int.of_int (3)))) in
      let zi31 = (subrange (zv__892, (Big_int.of_int (2)), Big_int.zero)) in
      let zi11 = (subrange (zv__892, (Big_int.of_int (10)), (Big_int.of_int (10)))) in
      let zi10 = (subrange (zv__892, (Big_int.of_int (9)), (Big_int.of_int (9)))) in
      append ([B1; B0; B1], (append ((zi11), (append ((zi4), (append ((zi98), (append ((zi10), (append ((zi6), (append ((zi7), (append ((zi31), (append ((zi5), [B0; B1])))))))))))))))))
    | ZC_BEQZ ((zv__893, zrs)) ->
      let zi8 = (subrange (zv__893, (Big_int.of_int (7)), (Big_int.of_int (7)))) in
      let zi8 = (subrange (zv__893, (Big_int.of_int (7)), (Big_int.of_int (7)))) in
      let zi76 = (subrange (zv__893, (Big_int.of_int (6)), (Big_int.of_int (5)))) in
      let zi5 = (subrange (zv__893, (Big_int.of_int (4)), (Big_int.of_int (4)))) in
      let zi43 = (subrange (zv__893, (Big_int.of_int (3)), (Big_int.of_int (2)))) in
      let zi21 = (subrange (zv__893, (Big_int.of_int (1)), Big_int.zero)) in
      append ([B1; B1; B0], (append ((zi8), (append ((zi43), (append ((zrs), (append ((zi76), (append ((zi21), (append ((zi5), [B0; B1])))))))))))))
    | ZC_BNEZ ((zv__894, zrs)) ->
      let zi8 = (subrange (zv__894, (Big_int.of_int (7)), (Big_int.of_int (7)))) in
      let zi8 = (subrange (zv__894, (Big_int.of_int (7)), (Big_int.of_int (7)))) in
      let zi76 = (subrange (zv__894, (Big_int.of_int (6)), (Big_int.of_int (5)))) in
      let zi5 = (subrange (zv__894, (Big_int.of_int (4)), (Big_int.of_int (4)))) in
      let zi43 = (subrange (zv__894, (Big_int.of_int (3)), (Big_int.of_int (2)))) in
      let zi21 = (subrange (zv__894, (Big_int.of_int (1)), Big_int.zero)) in
      append ([B1; B1; B1], (append ((zi8), (append ((zi43), (append ((zrs), (append ((zi76), (append ((zi21), (append ((zi5), [B0; B1])))))))))))))
    | ZC_SLLI ((zv__895, zrsd)) when (let znzzui5 = (subrange (zv__895, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzui5 = (subrange (zv__895, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzui40 = (subrange (zv__895, (Big_int.of_int (4)), Big_int.zero)) in
    (zneq_bits ((append (znzzui5, znzzui40)), [B0; B0; B0; B0; B0; B0])) && ((zneq_bits (zrsd, zzzreg)) && ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) || (eq_list (znzzui5, [B0]))))) ->
      let znzzui5 = (subrange (zv__895, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let znzzui5 = (subrange (zv__895, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let znzzui40 = (subrange (zv__895, (Big_int.of_int (4)), Big_int.zero)) in
      append ([B0; B0; B0], (append ((znzzui5), (append ((zrsd), (append ((znzzui40), [B1; B0])))))))
    | ZC_LWSP ((zv__896, zrd)) when (zneq_bits (zrd, zzzreg)) ->
      let zui76 = (subrange (zv__896, (Big_int.of_int (5)), (Big_int.of_int (4)))) in
      let zui76 = (subrange (zv__896, (Big_int.of_int (5)), (Big_int.of_int (4)))) in
      let zui5 = (subrange (zv__896, (Big_int.of_int (3)), (Big_int.of_int (3)))) in
      let zui42 = (subrange (zv__896, (Big_int.of_int (2)), Big_int.zero)) in
      append ([B0; B1; B0], (append ((zui5), (append ((zrd), (append ((zui42), (append ((zui76), [B1; B0])))))))))
    | ZC_LDSP ((zv__897, zrd)) when ((zneq_bits (zrd, zzzreg)) && (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64))))) ->
      let zui86 = (subrange (zv__897, (Big_int.of_int (5)), (Big_int.of_int (3)))) in
      let zui86 = (subrange (zv__897, (Big_int.of_int (5)), (Big_int.of_int (3)))) in
      let zui5 = (subrange (zv__897, (Big_int.of_int (2)), (Big_int.of_int (2)))) in
      let zui43 = (subrange (zv__897, (Big_int.of_int (1)), Big_int.zero)) in
      append ([B0; B1; B1], (append ((zui5), (append ((zrd), (append ((zui43), (append ((zui86), [B1; B0])))))))))
    | ZC_SWSP ((zv__898, zrs2)) ->
      let zui76 = (subrange (zv__898, (Big_int.of_int (5)), (Big_int.of_int (4)))) in
      let zui76 = (subrange (zv__898, (Big_int.of_int (5)), (Big_int.of_int (4)))) in
      let zui52 = (subrange (zv__898, (Big_int.of_int (3)), Big_int.zero)) in
      append ([B1; B1; B0], (append ((zui52), (append ((zui76), (append ((zrs2), [B1; B0])))))))
    | ZC_SDSP ((zv__899, zrs2)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      let zui86 = (subrange (zv__899, (Big_int.of_int (5)), (Big_int.of_int (3)))) in
      let zui86 = (subrange (zv__899, (Big_int.of_int (5)), (Big_int.of_int (3)))) in
      let zui53 = (subrange (zv__899, (Big_int.of_int (2)), Big_int.zero)) in
      append ([B1; B1; B1], (append ((zui53), (append ((zui86), (append ((zrs2), [B1; B0])))))))
    | ZC_JR (zrs1) when (zneq_bits (zrs1, zzzreg)) ->
      append ([B1; B0; B0], (append ([B0], (append ((zrs1), (append ([B0; B0; B0; B0; B0], [B1; B0])))))))
    | ZC_JALR (zrs1) when (zneq_bits (zrs1, zzzreg)) ->
      append ([B1; B0; B0], (append ([B1], (append ((zrs1), (append ([B0; B0; B0; B0; B0], [B1; B0])))))))
    | ZC_MV ((zrd, zrs2)) when ((zneq_bits (zrd, zzzreg)) && (zneq_bits (zrs2, zzzreg))) ->
      append ([B1; B0; B0], (append ([B0], (append ((zrd), (append ((zrs2), [B1; B0])))))))
    | ZC_EBREAK (()) ->
      append ([B1; B0; B0], (append ([B1], (append ([B0; B0; B0; B0; B0], (append ([B0; B0; B0; B0; B0], [B1; B0])))))))
    | ZC_ADD ((zrsd, zrs2)) when ((zneq_bits (zrsd, zzzreg)) && (zneq_bits (zrs2, zzzreg))) ->
      append ([B1; B0; B0], (append ([B1], (append ((zrsd), (append ((zrs2), [B1; B0])))))))
    | ZC_NOP_HINT (zv__900) when (let zim5 = (subrange (zv__900, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let zim5 = (subrange (zv__900, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let zim40 = (subrange (zv__900, (Big_int.of_int (4)), Big_int.zero)) in
    zneq_bits ((append (zim5, zim40)), [B0; B0; B0; B0; B0; B0])) ->
      let zim5 = (subrange (zv__900, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let zim5 = (subrange (zv__900, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let zim40 = (subrange (zv__900, (Big_int.of_int (4)), Big_int.zero)) in
      append ([B0; B0; B0], (append ((zim5), (append ([B0; B0; B0; B0; B0], (append ((zim40), [B0; B1])))))))
    | ZC_ADDI_HINT (zrsd) when (zneq_bits (zrsd, zzzreg)) ->
      append ([B0; B0; B0], (append ([B0], (append ((zrsd), (append ([B0; B0; B0; B0; B0], [B0; B1])))))))
    | ZC_LI_HINT (zv__901) ->
      let zimm5 = (subrange (zv__901, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let zimm5 = (subrange (zv__901, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let zimm40 = (subrange (zv__901, (Big_int.of_int (4)), Big_int.zero)) in
      append ([B0; B1; B0], (append ((zimm5), (append ([B0; B0; B0; B0; B0], (append ((zimm40), [B0; B1])))))))
    | ZC_LUI_HINT (zv__902) when (let zimm17 = (subrange (zv__902, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let zimm17 = (subrange (zv__902, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let zimm1612 = (subrange (zv__902, (Big_int.of_int (4)), Big_int.zero)) in
    zneq_bits ((append (zimm17, zimm1612)), [B0; B0; B0; B0; B0; B0])) ->
      let zimm17 = (subrange (zv__902, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let zimm17 = (subrange (zv__902, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let zimm1612 = (subrange (zv__902, (Big_int.of_int (4)), Big_int.zero)) in
      append ([B0; B1; B1], (append ((zimm17), (append ([B0; B0; B0; B0; B0], (append ((zimm1612), [B0; B1])))))))
    | ZC_MV_HINT (zrs2) when (zneq_bits (zrs2, zzzreg)) ->
      append ([B1; B0; B0], (append ([B0], (append ([B0; B0; B0; B0; B0], (append ((zrs2), [B1; B0])))))))
    | ZC_ADD_HINT (zrs2) when (zneq_bits (zrs2, zzzreg)) ->
      append ([B1; B0; B0], (append ([B1], (append ([B0; B0; B0; B0; B0], (append ((zrs2), [B1; B0])))))))
    | ZC_SLLI_HINT ((zv__903, zrsd)) when (let znzzui5 = (subrange (zv__903, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzui5 = (subrange (zv__903, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzui40 = (subrange (zv__903, (Big_int.of_int (4)), Big_int.zero)) in
    ((eq_list ((append (znzzui5, znzzui40)), [B0; B0; B0; B0; B0; B0])) || (eq_list (zrsd, zzzreg))) && ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) || (eq_list (znzzui5, [B0])))) ->
      let znzzui5 = (subrange (zv__903, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let znzzui5 = (subrange (zv__903, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let znzzui40 = (subrange (zv__903, (Big_int.of_int (4)), Big_int.zero)) in
      append ([B0; B0; B0], (append ((znzzui5), (append ((zrsd), (append ((znzzui40), [B1; B0])))))))
    | ZC_SRLI_HINT (zrsd) ->
      append ([B1; B0; B0], (append ([B0], (append ([B0; B0], (append ((zrsd), (append ([B0; B0; B0; B0; B0], [B0; B1])))))))))
    | ZC_SRAI_HINT (zrsd) ->
      append ([B1; B0; B0], (append ([B0], (append ([B0; B1], (append ((zrsd), (append ([B0; B0; B0; B0; B0], [B0; B1])))))))))
    | ZC_ILLEGAL (zs) -> zs
  end)

and zencdec_compressed_backwards (zargz3 : ((bit) list)) : zast = sail_call (fun r ->
  begin
    match zargz3 with
    | zv__904 when (eq_list (zv__904, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1])) ->
      ZC_NOP ()
    | zv__910 when ((let znzz96 = (subrange (zv__910, (Big_int.of_int (10)), (Big_int.of_int (7)))) in
    let znzz54 = (subrange (zv__910, (Big_int.of_int (12)), (Big_int.of_int (11)))) in
    let znzz3 = (subrange (zv__910, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzz2 = (subrange (zv__910, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
    zneq_bits ((append (znzz96, (append (znzz54, (append (znzz3, znzz2)))))), [B0; B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__910, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B0])) && (eq_list ((subrange (zv__910, (Big_int.of_int (1)), Big_int.zero)), [B0; B0])))) ->
      let zrd = (subrange (zv__910, (Big_int.of_int (4)), (Big_int.of_int (2)))) in
      let znzz96 = (subrange (zv__910, (Big_int.of_int (10)), (Big_int.of_int (7)))) in
      let znzz54 = (subrange (zv__910, (Big_int.of_int (12)), (Big_int.of_int (11)))) in
      let znzz3 = (subrange (zv__910, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let znzz2 = (subrange (zv__910, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
      ZC_ADDI4SPN ((fun (v0, v1) -> (v1, v0)) (append ((znzz96), (append ((znzz54), (append ((znzz3), (znzz2)))))), zrd))
    | zv__913 when ((eq_list ((subrange (zv__913, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B0])) && (eq_list ((subrange (zv__913, (Big_int.of_int (1)), Big_int.zero)), [B0; B0]))) ->
      let zui6 = (subrange (zv__913, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let zui53 = (subrange (zv__913, (Big_int.of_int (12)), (Big_int.of_int (10)))) in
      let zui2 = (subrange (zv__913, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
      let zrs1 = (subrange (zv__913, (Big_int.of_int (9)), (Big_int.of_int (7)))) in
      let zrd = (subrange (zv__913, (Big_int.of_int (4)), (Big_int.of_int (2)))) in
      ZC_LW ((fun (v0, v1, v2) -> (v2, v1, v0)) (zrd, zrs1, append ((zui6), (append ((zui53), (zui2))))))
    | zv__916 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__916, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B1])) && (eq_list ((subrange (zv__916, (Big_int.of_int (1)), Big_int.zero)), [B0; B0])))) ->
      let zui76 = (subrange (zv__916, (Big_int.of_int (6)), (Big_int.of_int (5)))) in
      let zui53 = (subrange (zv__916, (Big_int.of_int (12)), (Big_int.of_int (10)))) in
      let zrs1 = (subrange (zv__916, (Big_int.of_int (9)), (Big_int.of_int (7)))) in
      let zrd = (subrange (zv__916, (Big_int.of_int (4)), (Big_int.of_int (2)))) in
      ZC_LD ((fun (v0, v1, v2) -> (v2, v1, v0)) (zrd, zrs1, append ((zui76), (zui53))))
    | zv__919 when ((eq_list ((subrange (zv__919, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B1; B0])) && (eq_list ((subrange (zv__919, (Big_int.of_int (1)), Big_int.zero)), [B0; B0]))) ->
      let zui6 = (subrange (zv__919, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let zui53 = (subrange (zv__919, (Big_int.of_int (12)), (Big_int.of_int (10)))) in
      let zui2 = (subrange (zv__919, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
      let zrs2 = (subrange (zv__919, (Big_int.of_int (4)), (Big_int.of_int (2)))) in
      let zrs1 = (subrange (zv__919, (Big_int.of_int (9)), (Big_int.of_int (7)))) in
      ZC_SW ((fun (v0, v1, v2) -> (v2, v1, v0)) (zrs2, zrs1, append ((zui6), (append ((zui53), (zui2))))))
    | zv__922 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__922, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B1; B1])) && (eq_list ((subrange (zv__922, (Big_int.of_int (1)), Big_int.zero)), [B0; B0])))) ->
      let zui76 = (subrange (zv__922, (Big_int.of_int (6)), (Big_int.of_int (5)))) in
      let zui53 = (subrange (zv__922, (Big_int.of_int (12)), (Big_int.of_int (10)))) in
      let zrs2 = (subrange (zv__922, (Big_int.of_int (4)), (Big_int.of_int (2)))) in
      let zrs1 = (subrange (zv__922, (Big_int.of_int (9)), (Big_int.of_int (7)))) in
      ZC_SD ((fun (v0, v1, v2) -> (v2, v1, v0)) (zrs2, zrs1, append ((zui76), (zui53))))
    | zv__925 when ((let zrsd = (subrange (zv__925, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    let znzzi5 = (subrange (zv__925, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
    let znzzi40 = (subrange (zv__925, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    (zneq_bits ((append (znzzi5, znzzi40)), [B0; B0; B0; B0; B0; B0])) && (zneq_bits (zrsd, zzzreg))) && ((eq_list ((subrange (zv__925, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B0])) && (eq_list ((subrange (zv__925, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      let zrsd = (subrange (zv__925, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
      let znzzi5 = (subrange (zv__925, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let znzzi40 = (subrange (zv__925, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
      ZC_ADDI ((fun (v0, v1) -> (v1, v0)) (zrsd, append ((znzzi5), (znzzi40))))
    | zv__928 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && ((eq_list ((subrange (zv__928, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B1])) && (eq_list ((subrange (zv__928, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      let zi98 = (subrange (zv__928, (Big_int.of_int (10)), (Big_int.of_int (9)))) in
      let zi7 = (subrange (zv__928, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
      let zi6 = (subrange (zv__928, (Big_int.of_int (7)), (Big_int.of_int (7)))) in
      let zi5 = (subrange (zv__928, (Big_int.of_int (2)), (Big_int.of_int (2)))) in
      let zi4 = (subrange (zv__928, (Big_int.of_int (11)), (Big_int.of_int (11)))) in
      let zi31 = (subrange (zv__928, (Big_int.of_int (5)), (Big_int.of_int (3)))) in
      let zi11 = (subrange (zv__928, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let zi10 = (subrange (zv__928, (Big_int.of_int (8)), (Big_int.of_int (8)))) in
      ZC_JAL (append ((zi11), (append ((zi10), (append ((zi98), (append ((zi7), (append ((zi6), (append ((zi5), (append ((zi4), (zi31)))))))))))))))
    | zv__931 when ((let zrsd = (subrange (zv__931, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    (zneq_bits (zrsd, zzzreg)) && (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64))))) && ((eq_list ((subrange (zv__931, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B1])) && (eq_list ((subrange (zv__931, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      let zrsd = (subrange (zv__931, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
      let zimm5 = (subrange (zv__931, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let zimm40 = (subrange (zv__931, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
      ZC_ADDIW ((fun (v0, v1) -> (v1, v0)) (zrsd, append ((zimm5), (zimm40))))
    | zv__934 when ((let zrd = (subrange (zv__934, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    zneq_bits (zrd, zzzreg)) && ((eq_list ((subrange (zv__934, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B0])) && (eq_list ((subrange (zv__934, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      let zrd = (subrange (zv__934, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
      let zimm5 = (subrange (zv__934, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let zimm40 = (subrange (zv__934, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
      ZC_LI ((fun (v0, v1) -> (v1, v0)) (zrd, append ((zimm5), (zimm40))))
    | zv__937 when ((let znzzi9 = (subrange (zv__937, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
    let znzzi87 = (subrange (zv__937, (Big_int.of_int (4)), (Big_int.of_int (3)))) in
    let znzzi6 = (subrange (zv__937, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzi5 = (subrange (zv__937, (Big_int.of_int (2)), (Big_int.of_int (2)))) in
    let znzzi4 = (subrange (zv__937, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
    zneq_bits ((append (znzzi9, (append (znzzi87, (append (znzzi6, (append (znzzi5, znzzi4)))))))), [B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__937, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B1])) && ((eq_list ((subrange (zv__937, (Big_int.of_int (11)), (Big_int.of_int (7)))), [B0; B0; B0; B1; B0])) && (eq_list ((subrange (zv__937, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))))) ->
      let znzzi9 = (subrange (zv__937, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let znzzi87 = (subrange (zv__937, (Big_int.of_int (4)), (Big_int.of_int (3)))) in
      let znzzi6 = (subrange (zv__937, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
      let znzzi5 = (subrange (zv__937, (Big_int.of_int (2)), (Big_int.of_int (2)))) in
      let znzzi4 = (subrange (zv__937, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
      ZC_ADDI16SP (append ((znzzi9), (append ((znzzi87), (append ((znzzi6), (append ((znzzi5), (znzzi4)))))))))
    | zv__941 when ((let zrd = (subrange (zv__941, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    let zimm17 = (subrange (zv__941, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
    let zimm1612 = (subrange (zv__941, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    (zneq_bits (zrd, zzzreg)) && ((zneq_bits (zrd, zsp)) && (zneq_bits ((append (zimm17, zimm1612)), [B0; B0; B0; B0; B0; B0])))) && ((eq_list ((subrange (zv__941, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B1])) && (eq_list ((subrange (zv__941, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      let zrd = (subrange (zv__941, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
      let zimm17 = (subrange (zv__941, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let zimm1612 = (subrange (zv__941, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
      ZC_LUI ((fun (v0, v1) -> (v1, v0)) (zrd, append ((zimm17), (zimm1612))))
    | zv__944 when ((let znzzui5 = (subrange (zv__944, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
    let znzzui40 = (subrange (zv__944, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    zneq_bits ((append (znzzui5, znzzui40)), [B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__944, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B0; B0])) && ((eq_list ((subrange (zv__944, (Big_int.of_int (11)), (Big_int.of_int (10)))), [B0; B0])) && (eq_list ((subrange (zv__944, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))))) ->
      let zrsd = (subrange (zv__944, (Big_int.of_int (9)), (Big_int.of_int (7)))) in
      let znzzui5 = (subrange (zv__944, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let znzzui40 = (subrange (zv__944, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
      ZC_SRLI ((fun (v0, v1) -> (v1, v0)) (zrsd, append ((znzzui5), (znzzui40))))
    | zv__948 when ((let znzzui5 = (subrange (zv__948, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
    let znzzui40 = (subrange (zv__948, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    zneq_bits ((append (znzzui5, znzzui40)), [B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__948, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B0; B0])) && ((eq_list ((subrange (zv__948, (Big_int.of_int (11)), (Big_int.of_int (10)))), [B0; B1])) && (eq_list ((subrange (zv__948, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))))) ->
      let zrsd = (subrange (zv__948, (Big_int.of_int (9)), (Big_int.of_int (7)))) in
      let znzzui5 = (subrange (zv__948, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let znzzui40 = (subrange (zv__948, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
      ZC_SRAI ((fun (v0, v1) -> (v1, v0)) (zrsd, append ((znzzui5), (znzzui40))))
    | zv__952 when ((eq_list ((subrange (zv__952, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B0; B0])) && ((eq_list ((subrange (zv__952, (Big_int.of_int (11)), (Big_int.of_int (10)))), [B1; B0])) && (eq_list ((subrange (zv__952, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      let zrsd = (subrange (zv__952, (Big_int.of_int (9)), (Big_int.of_int (7)))) in
      let zi5 = (subrange (zv__952, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let zi40 = (subrange (zv__952, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
      ZC_ANDI ((fun (v0, v1) -> (v1, v0)) (zrsd, append ((zi5), (zi40))))
    | zv__956 when ((eq_list ((subrange (zv__956, (Big_int.of_int (15)), (Big_int.of_int (10)))), [B1; B0; B0; B0; B1; B1])) && ((eq_list ((subrange (zv__956, (Big_int.of_int (6)), (Big_int.of_int (5)))), [B0; B0])) && (eq_list ((subrange (zv__956, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      let zrsd = (subrange (zv__956, (Big_int.of_int (9)), (Big_int.of_int (7)))) in
      let zrs2 = (subrange (zv__956, (Big_int.of_int (4)), (Big_int.of_int (2)))) in
      ZC_SUB ((fun (v0, v1) -> (v1, v0)) (zrs2, zrsd))
    | zv__962 when ((eq_list ((subrange (zv__962, (Big_int.of_int (15)), (Big_int.of_int (10)))), [B1; B0; B0; B0; B1; B1])) && ((eq_list ((subrange (zv__962, (Big_int.of_int (6)), (Big_int.of_int (5)))), [B0; B1])) && (eq_list ((subrange (zv__962, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      let zrsd = (subrange (zv__962, (Big_int.of_int (9)), (Big_int.of_int (7)))) in
      let zrs2 = (subrange (zv__962, (Big_int.of_int (4)), (Big_int.of_int (2)))) in
      ZC_XOR ((fun (v0, v1) -> (v1, v0)) (zrs2, zrsd))
    | zv__968 when ((eq_list ((subrange (zv__968, (Big_int.of_int (15)), (Big_int.of_int (10)))), [B1; B0; B0; B0; B1; B1])) && ((eq_list ((subrange (zv__968, (Big_int.of_int (6)), (Big_int.of_int (5)))), [B1; B0])) && (eq_list ((subrange (zv__968, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      let zrsd = (subrange (zv__968, (Big_int.of_int (9)), (Big_int.of_int (7)))) in
      let zrs2 = (subrange (zv__968, (Big_int.of_int (4)), (Big_int.of_int (2)))) in
      ZC_OR ((fun (v0, v1) -> (v1, v0)) (zrs2, zrsd))
    | zv__974 when ((eq_list ((subrange (zv__974, (Big_int.of_int (15)), (Big_int.of_int (10)))), [B1; B0; B0; B0; B1; B1])) && ((eq_list ((subrange (zv__974, (Big_int.of_int (6)), (Big_int.of_int (5)))), [B1; B1])) && (eq_list ((subrange (zv__974, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      let zrsd = (subrange (zv__974, (Big_int.of_int (9)), (Big_int.of_int (7)))) in
      let zrs2 = (subrange (zv__974, (Big_int.of_int (4)), (Big_int.of_int (2)))) in
      ZC_AND ((fun (v0, v1) -> (v1, v0)) (zrs2, zrsd))
    | zv__980 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__980, (Big_int.of_int (15)), (Big_int.of_int (10)))), [B1; B0; B0; B1; B1; B1])) && ((eq_list ((subrange (zv__980, (Big_int.of_int (6)), (Big_int.of_int (5)))), [B0; B0])) && (eq_list ((subrange (zv__980, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))))) ->
      let zrsd = (subrange (zv__980, (Big_int.of_int (9)), (Big_int.of_int (7)))) in
      let zrs2 = (subrange (zv__980, (Big_int.of_int (4)), (Big_int.of_int (2)))) in
      ZC_SUBW ((fun (v0, v1) -> (v1, v0)) (zrs2, zrsd))
    | zv__986 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__986, (Big_int.of_int (15)), (Big_int.of_int (10)))), [B1; B0; B0; B1; B1; B1])) && ((eq_list ((subrange (zv__986, (Big_int.of_int (6)), (Big_int.of_int (5)))), [B0; B1])) && (eq_list ((subrange (zv__986, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))))) ->
      let zrsd = (subrange (zv__986, (Big_int.of_int (9)), (Big_int.of_int (7)))) in
      let zrs2 = (subrange (zv__986, (Big_int.of_int (4)), (Big_int.of_int (2)))) in
      ZC_ADDW ((fun (v0, v1) -> (v1, v0)) (zrs2, zrsd))
    | zv__992 when ((eq_list ((subrange (zv__992, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B0; B1])) && (eq_list ((subrange (zv__992, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))) ->
      let zi98 = (subrange (zv__992, (Big_int.of_int (10)), (Big_int.of_int (9)))) in
      let zi7 = (subrange (zv__992, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
      let zi6 = (subrange (zv__992, (Big_int.of_int (7)), (Big_int.of_int (7)))) in
      let zi5 = (subrange (zv__992, (Big_int.of_int (2)), (Big_int.of_int (2)))) in
      let zi4 = (subrange (zv__992, (Big_int.of_int (11)), (Big_int.of_int (11)))) in
      let zi31 = (subrange (zv__992, (Big_int.of_int (5)), (Big_int.of_int (3)))) in
      let zi11 = (subrange (zv__992, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let zi10 = (subrange (zv__992, (Big_int.of_int (8)), (Big_int.of_int (8)))) in
      ZC_J (append ((zi11), (append ((zi10), (append ((zi98), (append ((zi7), (append ((zi6), (append ((zi5), (append ((zi4), (zi31)))))))))))))))
    | zv__995 when ((eq_list ((subrange (zv__995, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B1; B0])) && (eq_list ((subrange (zv__995, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))) ->
      let zrs = (subrange (zv__995, (Big_int.of_int (9)), (Big_int.of_int (7)))) in
      let zi8 = (subrange (zv__995, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let zi76 = (subrange (zv__995, (Big_int.of_int (6)), (Big_int.of_int (5)))) in
      let zi5 = (subrange (zv__995, (Big_int.of_int (2)), (Big_int.of_int (2)))) in
      let zi43 = (subrange (zv__995, (Big_int.of_int (11)), (Big_int.of_int (10)))) in
      let zi21 = (subrange (zv__995, (Big_int.of_int (4)), (Big_int.of_int (3)))) in
      ZC_BEQZ ((fun (v0, v1) -> (v1, v0)) (zrs, append ((zi8), (append ((zi76), (append ((zi5), (append ((zi43), (zi21))))))))))
    | zv__998 when ((eq_list ((subrange (zv__998, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B1; B1])) && (eq_list ((subrange (zv__998, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))) ->
      let zrs = (subrange (zv__998, (Big_int.of_int (9)), (Big_int.of_int (7)))) in
      let zi8 = (subrange (zv__998, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let zi76 = (subrange (zv__998, (Big_int.of_int (6)), (Big_int.of_int (5)))) in
      let zi5 = (subrange (zv__998, (Big_int.of_int (2)), (Big_int.of_int (2)))) in
      let zi43 = (subrange (zv__998, (Big_int.of_int (11)), (Big_int.of_int (10)))) in
      let zi21 = (subrange (zv__998, (Big_int.of_int (4)), (Big_int.of_int (3)))) in
      ZC_BNEZ ((fun (v0, v1) -> (v1, v0)) (zrs, append ((zi8), (append ((zi76), (append ((zi5), (append ((zi43), (zi21))))))))))
    | zv__1001 when ((let zrsd = (subrange (zv__1001, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    let znzzui5 = (subrange (zv__1001, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
    let znzzui40 = (subrange (zv__1001, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    (zneq_bits ((append (znzzui5, znzzui40)), [B0; B0; B0; B0; B0; B0])) && ((zneq_bits (zrsd, zzzreg)) && ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) || (eq_list (znzzui5, [B0]))))) && ((eq_list ((subrange (zv__1001, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B0])) && (eq_list ((subrange (zv__1001, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      let zrsd = (subrange (zv__1001, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
      let znzzui5 = (subrange (zv__1001, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let znzzui40 = (subrange (zv__1001, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
      ZC_SLLI ((fun (v0, v1) -> (v1, v0)) (zrsd, append ((znzzui5), (znzzui40))))
    | zv__1004 when ((let zrd = (subrange (zv__1004, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    zneq_bits (zrd, zzzreg)) && ((eq_list ((subrange (zv__1004, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B0])) && (eq_list ((subrange (zv__1004, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      let zui76 = (subrange (zv__1004, (Big_int.of_int (3)), (Big_int.of_int (2)))) in
      let zui5 = (subrange (zv__1004, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let zui42 = (subrange (zv__1004, (Big_int.of_int (6)), (Big_int.of_int (4)))) in
      let zrd = (subrange (zv__1004, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
      ZC_LWSP ((fun (v0, v1) -> (v1, v0)) (zrd, append ((zui76), (append ((zui5), (zui42))))))
    | zv__1007 when ((let zrd = (subrange (zv__1007, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    (zneq_bits (zrd, zzzreg)) && (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64))))) && ((eq_list ((subrange (zv__1007, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B1])) && (eq_list ((subrange (zv__1007, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      let zui86 = (subrange (zv__1007, (Big_int.of_int (4)), (Big_int.of_int (2)))) in
      let zui5 = (subrange (zv__1007, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let zui43 = (subrange (zv__1007, (Big_int.of_int (6)), (Big_int.of_int (5)))) in
      let zrd = (subrange (zv__1007, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
      ZC_LDSP ((fun (v0, v1) -> (v1, v0)) (zrd, append ((zui86), (append ((zui5), (zui43))))))
    | zv__1010 when ((eq_list ((subrange (zv__1010, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B1; B0])) && (eq_list ((subrange (zv__1010, (Big_int.of_int (1)), Big_int.zero)), [B1; B0]))) ->
      let zui76 = (subrange (zv__1010, (Big_int.of_int (8)), (Big_int.of_int (7)))) in
      let zui52 = (subrange (zv__1010, (Big_int.of_int (12)), (Big_int.of_int (9)))) in
      let zrs2 = (subrange (zv__1010, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
      ZC_SWSP ((fun (v0, v1) -> (v1, v0)) (zrs2, append ((zui76), (zui52))))
    | zv__1013 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__1013, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B1; B1])) && (eq_list ((subrange (zv__1013, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      let zui86 = (subrange (zv__1013, (Big_int.of_int (9)), (Big_int.of_int (7)))) in
      let zui53 = (subrange (zv__1013, (Big_int.of_int (12)), (Big_int.of_int (10)))) in
      let zrs2 = (subrange (zv__1013, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
      ZC_SDSP ((fun (v0, v1) -> (v1, v0)) (zrs2, append ((zui86), (zui53))))
    | zv__1016 when ((let zrs1 = (subrange (zv__1016, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    zneq_bits (zrs1, zzzreg)) && ((eq_list ((subrange (zv__1016, (Big_int.of_int (15)), (Big_int.of_int (12)))), [B1; B0; B0; B0])) && (eq_list ((subrange (zv__1016, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B0; B0; B0; B1; B0])))) ->
      let zrs1 = (subrange (zv__1016, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
      ZC_JR zrs1
    | zv__1021 when ((let zrs1 = (subrange (zv__1021, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    zneq_bits (zrs1, zzzreg)) && ((eq_list ((subrange (zv__1021, (Big_int.of_int (15)), (Big_int.of_int (12)))), [B1; B0; B0; B1])) && (eq_list ((subrange (zv__1021, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B0; B0; B0; B1; B0])))) ->
      let zrs1 = (subrange (zv__1021, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
      ZC_JALR zrs1
    | zv__1026 when ((let zrs2 = (subrange (zv__1026, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    let zrd = (subrange (zv__1026, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    (zneq_bits (zrd, zzzreg)) && (zneq_bits (zrs2, zzzreg))) && ((eq_list ((subrange (zv__1026, (Big_int.of_int (15)), (Big_int.of_int (12)))), [B1; B0; B0; B0])) && (eq_list ((subrange (zv__1026, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      let zrs2 = (subrange (zv__1026, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
      let zrd = (subrange (zv__1026, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
      ZC_MV ((fun (v0, v1) -> (v1, v0)) (zrs2, zrd))
    | zv__1030 when (eq_list (zv__1030, [B1; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      ZC_EBREAK ()
    | zv__1036 when ((let zrsd = (subrange (zv__1036, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    let zrs2 = (subrange (zv__1036, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    (zneq_bits (zrsd, zzzreg)) && (zneq_bits (zrs2, zzzreg))) && ((eq_list ((subrange (zv__1036, (Big_int.of_int (15)), (Big_int.of_int (12)))), [B1; B0; B0; B1])) && (eq_list ((subrange (zv__1036, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      let zrsd = (subrange (zv__1036, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
      let zrs2 = (subrange (zv__1036, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
      ZC_ADD ((fun (v0, v1) -> (v1, v0)) (zrs2, zrsd))
    | zv__1040 when ((let zim5 = (subrange (zv__1040, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
    let zim40 = (subrange (zv__1040, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    zneq_bits ((append (zim5, zim40)), [B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__1040, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B0])) && ((eq_list ((subrange (zv__1040, (Big_int.of_int (11)), (Big_int.of_int (7)))), [B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__1040, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))))) ->
      let zim5 = (subrange (zv__1040, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let zim40 = (subrange (zv__1040, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
      ZC_NOP_HINT (append ((zim5), (zim40)))
    | zv__1044 when ((let zrsd = (subrange (zv__1044, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    zneq_bits (zrsd, zzzreg)) && ((eq_list ((subrange (zv__1044, (Big_int.of_int (15)), (Big_int.of_int (12)))), [B0; B0; B0; B0])) && (eq_list ((subrange (zv__1044, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B0; B0; B0; B0; B1])))) ->
      let zrsd = (subrange (zv__1044, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
      ZC_ADDI_HINT zrsd
    | zv__1049 when ((eq_list ((subrange (zv__1049, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B0])) && ((eq_list ((subrange (zv__1049, (Big_int.of_int (11)), (Big_int.of_int (7)))), [B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__1049, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      let zimm5 = (subrange (zv__1049, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let zimm40 = (subrange (zv__1049, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
      ZC_LI_HINT (append ((zimm5), (zimm40)))
    | zv__1053 when ((let zimm17 = (subrange (zv__1053, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
    let zimm1612 = (subrange (zv__1053, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    zneq_bits ((append (zimm17, zimm1612)), [B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__1053, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B1])) && ((eq_list ((subrange (zv__1053, (Big_int.of_int (11)), (Big_int.of_int (7)))), [B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__1053, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))))) ->
      let zimm17 = (subrange (zv__1053, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let zimm1612 = (subrange (zv__1053, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
      ZC_LUI_HINT (append ((zimm17), (zimm1612)))
    | zv__1057 when ((let zrs2 = (subrange (zv__1057, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    zneq_bits (zrs2, zzzreg)) && ((eq_list ((subrange (zv__1057, (Big_int.of_int (15)), (Big_int.of_int (7)))), [B1; B0; B0; B0; B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__1057, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      let zrs2 = (subrange (zv__1057, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
      ZC_MV_HINT zrs2
    | zv__1062 when ((let zrs2 = (subrange (zv__1062, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    zneq_bits (zrs2, zzzreg)) && ((eq_list ((subrange (zv__1062, (Big_int.of_int (15)), (Big_int.of_int (7)))), [B1; B0; B0; B1; B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__1062, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      let zrs2 = (subrange (zv__1062, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
      ZC_ADD_HINT zrs2
    | zv__1067 when ((let zrsd = (subrange (zv__1067, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    let znzzui5 = (subrange (zv__1067, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
    let znzzui40 = (subrange (zv__1067, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    ((eq_list ((append (znzzui5, znzzui40)), [B0; B0; B0; B0; B0; B0])) || (eq_list (zrsd, zzzreg))) && ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) || (eq_list (znzzui5, [B0])))) && ((eq_list ((subrange (zv__1067, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B0])) && (eq_list ((subrange (zv__1067, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      let zrsd = (subrange (zv__1067, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
      let znzzui5 = (subrange (zv__1067, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
      let znzzui40 = (subrange (zv__1067, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
      ZC_SLLI_HINT ((fun (v0, v1) -> (v1, v0)) (zrsd, append ((znzzui5), (znzzui40))))
    | zv__1070 when ((eq_list ((subrange (zv__1070, (Big_int.of_int (15)), (Big_int.of_int (10)))), [B1; B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__1070, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B0; B0; B0; B0; B1]))) ->
      let zrsd = (subrange (zv__1070, (Big_int.of_int (9)), (Big_int.of_int (7)))) in
      ZC_SRLI_HINT zrsd
    | zv__1076 when ((eq_list ((subrange (zv__1076, (Big_int.of_int (15)), (Big_int.of_int (10)))), [B1; B0; B0; B0; B0; B1])) && (eq_list ((subrange (zv__1076, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B0; B0; B0; B0; B1]))) ->
      let zrsd = (subrange (zv__1076, (Big_int.of_int (9)), (Big_int.of_int (7)))) in
      ZC_SRAI_HINT zrsd
    | zs -> ZC_ILLEGAL zs
  end)

and zencdec_compressed_forwards_matches (zargz3 : (zast)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | ZC_NOP (()) -> true
    | ZC_ADDI4SPN ((zrd, zv__1082)) when (let znzz96 = (subrange (zv__1082, (Big_int.of_int (7)), (Big_int.of_int (4)))) in
    let znzz96 = (subrange (zv__1082, (Big_int.of_int (7)), (Big_int.of_int (4)))) in
    let znzz54 = (subrange (zv__1082, (Big_int.of_int (3)), (Big_int.of_int (2)))) in
    let znzz3 = (subrange (zv__1082, (Big_int.of_int (1)), (Big_int.of_int (1)))) in
    let znzz2 = (subrange (zv__1082, Big_int.zero, Big_int.zero)) in
    zneq_bits ((append (znzz96, (append (znzz54, (append (znzz3, znzz2)))))), [B0; B0; B0; B0; B0; B0; B0; B0])) ->
      true
    | ZC_LW ((zv__1083, zrs1, zrd)) -> true
    | ZC_LD ((zv__1084, zrs1, zrd)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZC_SW ((zv__1085, zrs1, zrs2)) -> true
    | ZC_SD ((zv__1086, zrs1, zrs2)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZC_ADDI ((zv__1087, zrsd)) when (let znzzi5 = (subrange (zv__1087, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzi5 = (subrange (zv__1087, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzi40 = (subrange (zv__1087, (Big_int.of_int (4)), Big_int.zero)) in
    (zneq_bits ((append (znzzi5, znzzi40)), [B0; B0; B0; B0; B0; B0])) && (zneq_bits (zrsd, zzzreg))) ->
      true
    | ZC_JAL (zv__1088) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) ->
      true
    | ZC_ADDIW ((zv__1089, zrsd)) when ((zneq_bits (zrsd, zzzreg)) && (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64))))) ->
      true
    | ZC_LI ((zv__1090, zrd)) when (zneq_bits (zrd, zzzreg)) -> true
    | ZC_ADDI16SP (zv__1091) when (let znzzi9 = (subrange (zv__1091, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzi9 = (subrange (zv__1091, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzi87 = (subrange (zv__1091, (Big_int.of_int (4)), (Big_int.of_int (3)))) in
    let znzzi6 = (subrange (zv__1091, (Big_int.of_int (2)), (Big_int.of_int (2)))) in
    let znzzi5 = (subrange (zv__1091, (Big_int.of_int (1)), (Big_int.of_int (1)))) in
    let znzzi4 = (subrange (zv__1091, Big_int.zero, Big_int.zero)) in
    zneq_bits ((append (znzzi9, (append (znzzi87, (append (znzzi6, (append (znzzi5, znzzi4)))))))), [B0; B0; B0; B0; B0; B0])) ->
      true
    | ZC_LUI ((zv__1092, zrd)) when (let zimm17 = (subrange (zv__1092, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let zimm17 = (subrange (zv__1092, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let zimm1612 = (subrange (zv__1092, (Big_int.of_int (4)), Big_int.zero)) in
    (zneq_bits (zrd, zzzreg)) && ((zneq_bits (zrd, zsp)) && (zneq_bits ((append (zimm17, zimm1612)), [B0; B0; B0; B0; B0; B0])))) ->
      true
    | ZC_SRLI ((zv__1093, zrsd)) when (let znzzui5 = (subrange (zv__1093, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzui5 = (subrange (zv__1093, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzui40 = (subrange (zv__1093, (Big_int.of_int (4)), Big_int.zero)) in
    zneq_bits ((append (znzzui5, znzzui40)), [B0; B0; B0; B0; B0; B0])) ->
      true
    | ZC_SRAI ((zv__1094, zrsd)) when (let znzzui5 = (subrange (zv__1094, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzui5 = (subrange (zv__1094, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzui40 = (subrange (zv__1094, (Big_int.of_int (4)), Big_int.zero)) in
    zneq_bits ((append (znzzui5, znzzui40)), [B0; B0; B0; B0; B0; B0])) ->
      true
    | ZC_ANDI ((zv__1095, zrsd)) -> true
    | ZC_SUB ((zrsd, zrs2)) -> true
    | ZC_XOR ((zrsd, zrs2)) -> true
    | ZC_OR ((zrsd, zrs2)) -> true
    | ZC_AND ((zrsd, zrs2)) -> true
    | ZC_SUBW ((zrsd, zrs2)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZC_ADDW ((zrsd, zrs2)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZC_J (zv__1096) -> true
    | ZC_BEQZ ((zv__1097, zrs)) -> true
    | ZC_BNEZ ((zv__1098, zrs)) -> true
    | ZC_SLLI ((zv__1099, zrsd)) when (let znzzui5 = (subrange (zv__1099, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzui5 = (subrange (zv__1099, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzui40 = (subrange (zv__1099, (Big_int.of_int (4)), Big_int.zero)) in
    (zneq_bits ((append (znzzui5, znzzui40)), [B0; B0; B0; B0; B0; B0])) && ((zneq_bits (zrsd, zzzreg)) && ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) || (eq_list (znzzui5, [B0]))))) ->
      true
    | ZC_LWSP ((zv__1100, zrd)) when (zneq_bits (zrd, zzzreg)) -> true
    | ZC_LDSP ((zv__1101, zrd)) when ((zneq_bits (zrd, zzzreg)) && (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64))))) ->
      true
    | ZC_SWSP ((zv__1102, zrs2)) -> true
    | ZC_SDSP ((zv__1103, zrs2)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZC_JR (zrs1) when (zneq_bits (zrs1, zzzreg)) -> true
    | ZC_JALR (zrs1) when (zneq_bits (zrs1, zzzreg)) -> true
    | ZC_MV ((zrd, zrs2)) when ((zneq_bits (zrd, zzzreg)) && (zneq_bits (zrs2, zzzreg))) ->
      true
    | ZC_EBREAK (()) -> true
    | ZC_ADD ((zrsd, zrs2)) when ((zneq_bits (zrsd, zzzreg)) && (zneq_bits (zrs2, zzzreg))) ->
      true
    | ZC_NOP_HINT (zv__1104) when (let zim5 = (subrange (zv__1104, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let zim5 = (subrange (zv__1104, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let zim40 = (subrange (zv__1104, (Big_int.of_int (4)), Big_int.zero)) in
    zneq_bits ((append (zim5, zim40)), [B0; B0; B0; B0; B0; B0])) ->
      true
    | ZC_ADDI_HINT (zrsd) when (zneq_bits (zrsd, zzzreg)) -> true
    | ZC_LI_HINT (zv__1105) -> true
    | ZC_LUI_HINT (zv__1106) when (let zimm17 = (subrange (zv__1106, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let zimm17 = (subrange (zv__1106, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let zimm1612 = (subrange (zv__1106, (Big_int.of_int (4)), Big_int.zero)) in
    zneq_bits ((append (zimm17, zimm1612)), [B0; B0; B0; B0; B0; B0])) ->
      true
    | ZC_MV_HINT (zrs2) when (zneq_bits (zrs2, zzzreg)) -> true
    | ZC_ADD_HINT (zrs2) when (zneq_bits (zrs2, zzzreg)) -> true
    | ZC_SLLI_HINT ((zv__1107, zrsd)) when (let znzzui5 = (subrange (zv__1107, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzui5 = (subrange (zv__1107, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzui40 = (subrange (zv__1107, (Big_int.of_int (4)), Big_int.zero)) in
    ((eq_list ((append (znzzui5, znzzui40)), [B0; B0; B0; B0; B0; B0])) || (eq_list (zrsd, zzzreg))) && ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) || (eq_list (znzzui5, [B0])))) ->
      true
    | ZC_SRLI_HINT (zrsd) -> true
    | ZC_SRAI_HINT (zrsd) -> true
    | ZC_ILLEGAL (zs) -> true
    | _ -> false
  end)

and zencdec_compressed_backwards_matches (zargz3 : ((bit) list)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | zv__1108 when (eq_list (zv__1108, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1])) ->
      true
    | zv__1114 when ((let znzz96 = (subrange (zv__1114, (Big_int.of_int (10)), (Big_int.of_int (7)))) in
    let znzz54 = (subrange (zv__1114, (Big_int.of_int (12)), (Big_int.of_int (11)))) in
    let znzz3 = (subrange (zv__1114, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzz2 = (subrange (zv__1114, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
    zneq_bits ((append (znzz96, (append (znzz54, (append (znzz3, znzz2)))))), [B0; B0; B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__1114, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B0])) && (eq_list ((subrange (zv__1114, (Big_int.of_int (1)), Big_int.zero)), [B0; B0])))) ->
      true
    | zv__1117 when ((eq_list ((subrange (zv__1117, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B0])) && (eq_list ((subrange (zv__1117, (Big_int.of_int (1)), Big_int.zero)), [B0; B0]))) ->
      true
    | zv__1120 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__1120, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B1])) && (eq_list ((subrange (zv__1120, (Big_int.of_int (1)), Big_int.zero)), [B0; B0])))) ->
      true
    | zv__1123 when ((eq_list ((subrange (zv__1123, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B1; B0])) && (eq_list ((subrange (zv__1123, (Big_int.of_int (1)), Big_int.zero)), [B0; B0]))) ->
      true
    | zv__1126 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__1126, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B1; B1])) && (eq_list ((subrange (zv__1126, (Big_int.of_int (1)), Big_int.zero)), [B0; B0])))) ->
      true
    | zv__1129 when ((let zrsd = (subrange (zv__1129, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    let znzzi5 = (subrange (zv__1129, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
    let znzzi40 = (subrange (zv__1129, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    (zneq_bits ((append (znzzi5, znzzi40)), [B0; B0; B0; B0; B0; B0])) && (zneq_bits (zrsd, zzzreg))) && ((eq_list ((subrange (zv__1129, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B0])) && (eq_list ((subrange (zv__1129, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      true
    | zv__1132 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) && ((eq_list ((subrange (zv__1132, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B1])) && (eq_list ((subrange (zv__1132, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      true
    | zv__1135 when ((let zrsd = (subrange (zv__1135, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    (zneq_bits (zrsd, zzzreg)) && (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64))))) && ((eq_list ((subrange (zv__1135, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B1])) && (eq_list ((subrange (zv__1135, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      true
    | zv__1138 when ((let zrd = (subrange (zv__1138, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    zneq_bits (zrd, zzzreg)) && ((eq_list ((subrange (zv__1138, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B0])) && (eq_list ((subrange (zv__1138, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      true
    | zv__1141 when ((let znzzi9 = (subrange (zv__1141, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
    let znzzi87 = (subrange (zv__1141, (Big_int.of_int (4)), (Big_int.of_int (3)))) in
    let znzzi6 = (subrange (zv__1141, (Big_int.of_int (5)), (Big_int.of_int (5)))) in
    let znzzi5 = (subrange (zv__1141, (Big_int.of_int (2)), (Big_int.of_int (2)))) in
    let znzzi4 = (subrange (zv__1141, (Big_int.of_int (6)), (Big_int.of_int (6)))) in
    zneq_bits ((append (znzzi9, (append (znzzi87, (append (znzzi6, (append (znzzi5, znzzi4)))))))), [B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__1141, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B1])) && ((eq_list ((subrange (zv__1141, (Big_int.of_int (11)), (Big_int.of_int (7)))), [B0; B0; B0; B1; B0])) && (eq_list ((subrange (zv__1141, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))))) ->
      true
    | zv__1145 when ((let zrd = (subrange (zv__1145, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    let zimm17 = (subrange (zv__1145, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
    let zimm1612 = (subrange (zv__1145, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    (zneq_bits (zrd, zzzreg)) && ((zneq_bits (zrd, zsp)) && (zneq_bits ((append (zimm17, zimm1612)), [B0; B0; B0; B0; B0; B0])))) && ((eq_list ((subrange (zv__1145, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B1])) && (eq_list ((subrange (zv__1145, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      true
    | zv__1148 when ((let znzzui5 = (subrange (zv__1148, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
    let znzzui40 = (subrange (zv__1148, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    zneq_bits ((append (znzzui5, znzzui40)), [B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__1148, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B0; B0])) && ((eq_list ((subrange (zv__1148, (Big_int.of_int (11)), (Big_int.of_int (10)))), [B0; B0])) && (eq_list ((subrange (zv__1148, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))))) ->
      true
    | zv__1152 when ((let znzzui5 = (subrange (zv__1152, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
    let znzzui40 = (subrange (zv__1152, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    zneq_bits ((append (znzzui5, znzzui40)), [B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__1152, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B0; B0])) && ((eq_list ((subrange (zv__1152, (Big_int.of_int (11)), (Big_int.of_int (10)))), [B0; B1])) && (eq_list ((subrange (zv__1152, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))))) ->
      true
    | zv__1156 when ((eq_list ((subrange (zv__1156, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B0; B0])) && ((eq_list ((subrange (zv__1156, (Big_int.of_int (11)), (Big_int.of_int (10)))), [B1; B0])) && (eq_list ((subrange (zv__1156, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      true
    | zv__1160 when ((eq_list ((subrange (zv__1160, (Big_int.of_int (15)), (Big_int.of_int (10)))), [B1; B0; B0; B0; B1; B1])) && ((eq_list ((subrange (zv__1160, (Big_int.of_int (6)), (Big_int.of_int (5)))), [B0; B0])) && (eq_list ((subrange (zv__1160, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      true
    | zv__1166 when ((eq_list ((subrange (zv__1166, (Big_int.of_int (15)), (Big_int.of_int (10)))), [B1; B0; B0; B0; B1; B1])) && ((eq_list ((subrange (zv__1166, (Big_int.of_int (6)), (Big_int.of_int (5)))), [B0; B1])) && (eq_list ((subrange (zv__1166, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      true
    | zv__1172 when ((eq_list ((subrange (zv__1172, (Big_int.of_int (15)), (Big_int.of_int (10)))), [B1; B0; B0; B0; B1; B1])) && ((eq_list ((subrange (zv__1172, (Big_int.of_int (6)), (Big_int.of_int (5)))), [B1; B0])) && (eq_list ((subrange (zv__1172, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      true
    | zv__1178 when ((eq_list ((subrange (zv__1178, (Big_int.of_int (15)), (Big_int.of_int (10)))), [B1; B0; B0; B0; B1; B1])) && ((eq_list ((subrange (zv__1178, (Big_int.of_int (6)), (Big_int.of_int (5)))), [B1; B1])) && (eq_list ((subrange (zv__1178, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      true
    | zv__1184 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__1184, (Big_int.of_int (15)), (Big_int.of_int (10)))), [B1; B0; B0; B1; B1; B1])) && ((eq_list ((subrange (zv__1184, (Big_int.of_int (6)), (Big_int.of_int (5)))), [B0; B0])) && (eq_list ((subrange (zv__1184, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))))) ->
      true
    | zv__1190 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__1190, (Big_int.of_int (15)), (Big_int.of_int (10)))), [B1; B0; B0; B1; B1; B1])) && ((eq_list ((subrange (zv__1190, (Big_int.of_int (6)), (Big_int.of_int (5)))), [B0; B1])) && (eq_list ((subrange (zv__1190, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))))) ->
      true
    | zv__1196 when ((eq_list ((subrange (zv__1196, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B0; B1])) && (eq_list ((subrange (zv__1196, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))) ->
      true
    | zv__1199 when ((eq_list ((subrange (zv__1199, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B1; B0])) && (eq_list ((subrange (zv__1199, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))) ->
      true
    | zv__1202 when ((eq_list ((subrange (zv__1202, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B1; B1])) && (eq_list ((subrange (zv__1202, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))) ->
      true
    | zv__1205 when ((let zrsd = (subrange (zv__1205, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    let znzzui5 = (subrange (zv__1205, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
    let znzzui40 = (subrange (zv__1205, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    (zneq_bits ((append (znzzui5, znzzui40)), [B0; B0; B0; B0; B0; B0])) && ((zneq_bits (zrsd, zzzreg)) && ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) || (eq_list (znzzui5, [B0]))))) && ((eq_list ((subrange (zv__1205, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B0])) && (eq_list ((subrange (zv__1205, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      true
    | zv__1208 when ((let zrd = (subrange (zv__1208, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    zneq_bits (zrd, zzzreg)) && ((eq_list ((subrange (zv__1208, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B0])) && (eq_list ((subrange (zv__1208, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      true
    | zv__1211 when ((let zrd = (subrange (zv__1211, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    (zneq_bits (zrd, zzzreg)) && (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64))))) && ((eq_list ((subrange (zv__1211, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B1])) && (eq_list ((subrange (zv__1211, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      true
    | zv__1214 when ((eq_list ((subrange (zv__1214, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B1; B0])) && (eq_list ((subrange (zv__1214, (Big_int.of_int (1)), Big_int.zero)), [B1; B0]))) ->
      true
    | zv__1217 when ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) && ((eq_list ((subrange (zv__1217, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B1; B1; B1])) && (eq_list ((subrange (zv__1217, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      true
    | zv__1220 when ((let zrs1 = (subrange (zv__1220, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    zneq_bits (zrs1, zzzreg)) && ((eq_list ((subrange (zv__1220, (Big_int.of_int (15)), (Big_int.of_int (12)))), [B1; B0; B0; B0])) && (eq_list ((subrange (zv__1220, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B0; B0; B0; B1; B0])))) ->
      true
    | zv__1225 when ((let zrs1 = (subrange (zv__1225, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    zneq_bits (zrs1, zzzreg)) && ((eq_list ((subrange (zv__1225, (Big_int.of_int (15)), (Big_int.of_int (12)))), [B1; B0; B0; B1])) && (eq_list ((subrange (zv__1225, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B0; B0; B0; B1; B0])))) ->
      true
    | zv__1230 when ((let zrs2 = (subrange (zv__1230, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    let zrd = (subrange (zv__1230, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    (zneq_bits (zrd, zzzreg)) && (zneq_bits (zrs2, zzzreg))) && ((eq_list ((subrange (zv__1230, (Big_int.of_int (15)), (Big_int.of_int (12)))), [B1; B0; B0; B0])) && (eq_list ((subrange (zv__1230, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      true
    | zv__1234 when (eq_list (zv__1234, [B1; B0; B0; B1; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B1; B0])) ->
      true
    | zv__1240 when ((let zrsd = (subrange (zv__1240, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    let zrs2 = (subrange (zv__1240, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    (zneq_bits (zrsd, zzzreg)) && (zneq_bits (zrs2, zzzreg))) && ((eq_list ((subrange (zv__1240, (Big_int.of_int (15)), (Big_int.of_int (12)))), [B1; B0; B0; B1])) && (eq_list ((subrange (zv__1240, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      true
    | zv__1244 when ((let zim5 = (subrange (zv__1244, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
    let zim40 = (subrange (zv__1244, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    zneq_bits ((append (zim5, zim40)), [B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__1244, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B0])) && ((eq_list ((subrange (zv__1244, (Big_int.of_int (11)), (Big_int.of_int (7)))), [B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__1244, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))))) ->
      true
    | zv__1248 when ((let zrsd = (subrange (zv__1248, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    zneq_bits (zrsd, zzzreg)) && ((eq_list ((subrange (zv__1248, (Big_int.of_int (15)), (Big_int.of_int (12)))), [B0; B0; B0; B0])) && (eq_list ((subrange (zv__1248, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B0; B0; B0; B0; B1])))) ->
      true
    | zv__1253 when ((eq_list ((subrange (zv__1253, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B0])) && ((eq_list ((subrange (zv__1253, (Big_int.of_int (11)), (Big_int.of_int (7)))), [B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__1253, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])))) ->
      true
    | zv__1257 when ((let zimm17 = (subrange (zv__1257, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
    let zimm1612 = (subrange (zv__1257, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    zneq_bits ((append (zimm17, zimm1612)), [B0; B0; B0; B0; B0; B0])) && ((eq_list ((subrange (zv__1257, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B1; B1])) && ((eq_list ((subrange (zv__1257, (Big_int.of_int (11)), (Big_int.of_int (7)))), [B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__1257, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))))) ->
      true
    | zv__1261 when ((let zrs2 = (subrange (zv__1261, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    zneq_bits (zrs2, zzzreg)) && ((eq_list ((subrange (zv__1261, (Big_int.of_int (15)), (Big_int.of_int (7)))), [B1; B0; B0; B0; B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__1261, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      true
    | zv__1266 when ((let zrs2 = (subrange (zv__1266, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    zneq_bits (zrs2, zzzreg)) && ((eq_list ((subrange (zv__1266, (Big_int.of_int (15)), (Big_int.of_int (7)))), [B1; B0; B0; B1; B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__1266, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      true
    | zv__1271 when ((let zrsd = (subrange (zv__1271, (Big_int.of_int (11)), (Big_int.of_int (7)))) in
    let znzzui5 = (subrange (zv__1271, (Big_int.of_int (12)), (Big_int.of_int (12)))) in
    let znzzui40 = (subrange (zv__1271, (Big_int.of_int (6)), (Big_int.of_int (2)))) in
    ((eq_list ((append (znzzui5, znzzui40)), [B0; B0; B0; B0; B0; B0])) || (eq_list (zrsd, zzzreg))) && ((eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) || (eq_list (znzzui5, [B0])))) && ((eq_list ((subrange (zv__1271, (Big_int.of_int (15)), (Big_int.of_int (13)))), [B0; B0; B0])) && (eq_list ((subrange (zv__1271, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])))) ->
      true
    | zv__1274 when ((eq_list ((subrange (zv__1274, (Big_int.of_int (15)), (Big_int.of_int (10)))), [B1; B0; B0; B0; B0; B0])) && (eq_list ((subrange (zv__1274, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B0; B0; B0; B0; B1]))) ->
      true
    | zv__1280 when ((eq_list ((subrange (zv__1280, (Big_int.of_int (15)), (Big_int.of_int (10)))), [B1; B0; B0; B0; B0; B1])) && (eq_list ((subrange (zv__1280, (Big_int.of_int (6)), Big_int.zero)), [B0; B0; B0; B0; B0; B0; B1]))) ->
      true
    | zs -> true
    | _ -> false
  end)

and zexecute (gs8413 : (zast)) = sail_call (fun r ->
  match gs8413 with
  | ZUTYPE ((zimm, zrd, zop)) ->
    let zoff = (zsign_extend ((Big_int.of_int (32)), (append (zimm, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0])))) in
    let zret = (begin
      match zop with
      | ZRISCV_LUI -> zoff
      | ZRISCV_AUIPC -> add_vec ((zget_arch_pc ()), zoff)
    end) in
    begin zwX_bits (zrd, zret); ZRETIRE_SUCCESS end
  | ZRISCV_JAL ((zimm, zrd)) ->
    let zt = (add_vec (!zPC, (zsign_extend ((Big_int.of_int (32)), zimm)))) in
    begin
      match (zext_control_check_pc zt) with
      | ZExt_ControlAddr_Error (ze) ->
        begin zext_handle_control_check_error ze; ZRETIRE_FAIL end
      | ZExt_ControlAddr_OK (ztarget) ->
        (if ((zbit_to_bool (access (ztarget, (Big_int.of_int (1))))) && (znot (zhaveRVC ()))) then (begin
          zhandle_mem_exception (ztarget, (ZE_Fetch_Addr_Align ()));
          ZRETIRE_FAIL
        end) else (begin
          zwX_bits (zrd, (zget_next_pc ()));
          zset_next_pc ztarget;
          ZRETIRE_SUCCESS
        end))
    end
  | ZBTYPE ((zimm, zrs2, zrs1, zop)) ->
    let zrs1_val = (zrX_bits zrs1) in
    let zrs2_val = (zrX_bits zrs2) in
    let ztaken = (begin
      match zop with
      | ZRISCV_BEQ -> eq_list (zrs1_val, zrs2_val)
      | ZRISCV_BNE -> zneq_bits (zrs1_val, zrs2_val)
      | ZRISCV_BLT -> zz8operatorz0zI_sz9 (zrs1_val, zrs2_val)
      | ZRISCV_BGE -> zz8operatorz0zKzJ_sz9 (zrs1_val, zrs2_val)
      | ZRISCV_BLTU -> zz8operatorz0zI_uz9 (zrs1_val, zrs2_val)
      | ZRISCV_BGEU -> zz8operatorz0zKzJ_uz9 (zrs1_val, zrs2_val)
    end) in
    let zt = (add_vec (!zPC, (zsign_extend ((Big_int.of_int (32)), zimm)))) in
    (if ztaken then (begin
      match (zext_control_check_pc zt) with
      | ZExt_ControlAddr_Error (ze) ->
        begin zext_handle_control_check_error ze; ZRETIRE_FAIL end
      | ZExt_ControlAddr_OK (ztarget) ->
        (if ((zbit_to_bool (access (ztarget, (Big_int.of_int (1))))) && (znot (zhaveRVC ()))) then (begin
          zhandle_mem_exception (ztarget, (ZE_Fetch_Addr_Align ()));
          ZRETIRE_FAIL
        end) else (begin zset_next_pc ztarget; ZRETIRE_SUCCESS end))
    end) else ZRETIRE_SUCCESS)
  | ZITYPE ((zimm, zrs1, zrd, zop)) ->
    let zrs1_val = (zrX_bits zrs1) in
    let zimmext = (zsign_extend ((Big_int.of_int (32)), zimm)) in
    let zresult = (begin
      match zop with
      | ZRISCV_ADDI -> add_vec (zrs1_val, zimmext)
      | ZRISCV_SLTI ->
        zzzero_extend ((Big_int.of_int (32)), (zbool_to_bits (zz8operatorz0zI_sz9 (zrs1_val, zimmext))))
      | ZRISCV_SLTIU ->
        zzzero_extend ((Big_int.of_int (32)), (zbool_to_bits (zz8operatorz0zI_uz9 (zrs1_val, zimmext))))
      | ZRISCV_ANDI -> and_vec (zrs1_val, zimmext)
      | ZRISCV_ORI -> or_vec (zrs1_val, zimmext)
      | ZRISCV_XORI -> xor_vec (zrs1_val, zimmext)
    end) in
    begin zwX_bits (zrd, zresult); ZRETIRE_SUCCESS end
  | ZSHIFTIOP ((zshamt, zrs1, zrd, zop)) ->
    let zrs1_val = (zrX_bits zrs1) in
    let zresult = (begin
      match zop with
      | ZRISCV_SLLI ->
        (if (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) then (shift_bits_left (zrs1_val, (subrange (zshamt, (Big_int.of_int (4)), Big_int.zero)))) else (shift_bits_left (zrs1_val, zshamt)))
      | ZRISCV_SRLI ->
        (if (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) then (shift_bits_right (zrs1_val, (subrange (zshamt, (Big_int.of_int (4)), Big_int.zero)))) else (shift_bits_right (zrs1_val, zshamt)))
      | ZRISCV_SRAI ->
        (if (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) then (zshift_right_arith32 (zrs1_val, (subrange (zshamt, (Big_int.of_int (4)), Big_int.zero)))) else (zshift_right_arith64 (zrs1_val, zshamt)))
    end) in
    begin zwX_bits (zrd, zresult); ZRETIRE_SUCCESS end
  | ZRTYPE ((zrs2, zrs1, zrd, zop)) ->
    let zrs1_val = (zrX_bits zrs1) in
    let zrs2_val = (zrX_bits zrs2) in
    let zresult = (begin
      match zop with
      | ZRISCV_ADD -> add_vec (zrs1_val, zrs2_val)
      | ZRISCV_SLT ->
        zzzero_extend ((Big_int.of_int (32)), (zbool_to_bits (zz8operatorz0zI_sz9 (zrs1_val, zrs2_val))))
      | ZRISCV_SLTU ->
        zzzero_extend ((Big_int.of_int (32)), (zbool_to_bits (zz8operatorz0zI_uz9 (zrs1_val, zrs2_val))))
      | ZRISCV_AND -> and_vec (zrs1_val, zrs2_val)
      | ZRISCV_OR -> or_vec (zrs1_val, zrs2_val)
      | ZRISCV_XOR -> xor_vec (zrs1_val, zrs2_val)
      | ZRISCV_SLL ->
        (if (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) then (shift_bits_left (zrs1_val, (subrange (zrs2_val, (Big_int.of_int (4)), Big_int.zero)))) else (shift_bits_left (zrs1_val, (subrange (zrs2_val, (Big_int.of_int (5)), Big_int.zero)))))
      | ZRISCV_SRL ->
        (if (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) then (shift_bits_right (zrs1_val, (subrange (zrs2_val, (Big_int.of_int (4)), Big_int.zero)))) else (shift_bits_right (zrs1_val, (subrange (zrs2_val, (Big_int.of_int (5)), Big_int.zero)))))
      | ZRISCV_SUB -> sub_vec (zrs1_val, zrs2_val)
      | ZRISCV_SRA ->
        (if (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) then (zshift_right_arith32 (zrs1_val, (subrange (zrs2_val, (Big_int.of_int (4)), Big_int.zero)))) else (zshift_right_arith64 (zrs1_val, (subrange (zrs2_val, (Big_int.of_int (5)), Big_int.zero)))))
    end) in
    begin zwX_bits (zrd, zresult); ZRETIRE_SUCCESS end
  | ZLOAD ((zimm, zrs1, zrd, zis_unsigned, zwidth, zaq, zrl)) ->
    let zoffset = (zsign_extend ((Big_int.of_int (32)), zimm)) in
    begin
      match (zext_data_get_addr (zrs1, zoffset, (ZRead ZData), zwidth)) with
      | ZExt_DataAddr_Error (ze) ->
        begin zext_handle_data_check_error ze; ZRETIRE_FAIL end
      | ZExt_DataAddr_OK (zvaddr) ->
        (if (zcheck_misaligned (zvaddr, zwidth)) then (begin
          zhandle_mem_exception (zvaddr, (ZE_Load_Addr_Align ()));
          ZRETIRE_FAIL
        end) else (begin
          match (ztranslateAddr (zvaddr, (ZRead ZData))) with
          | ZTR_Failure ((ze, _)) ->
            begin zhandle_mem_exception (zvaddr, ze); ZRETIRE_FAIL end
          | ZTR_Address ((zpaddr, _)) ->
            begin
              match zwidth with
              | ZBYTE ->
                zprocess_load (zrd, zvaddr, (zmem_read ((ZRead ZData), zpaddr, (Big_int.of_int (1)), zaq, zrl, false)), zis_unsigned)
              | ZHALF ->
                zprocess_load (zrd, zvaddr, (zmem_read ((ZRead ZData), zpaddr, (Big_int.of_int (2)), zaq, zrl, false)), zis_unsigned)
              | ZWORD ->
                zprocess_load (zrd, zvaddr, (zmem_read ((ZRead ZData), zpaddr, (Big_int.of_int (4)), zaq, zrl, false)), zis_unsigned)
              | ZDOUBLE when (gteq ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
                zprocess_load (zrd, zvaddr, (zmem_read ((ZRead ZData), zpaddr, (Big_int.of_int (8)), zaq, zrl, false)), zis_unsigned)
              | _ ->
                zreport_invalid_width ("sail-riscv/model/riscv_insts_base.sail", (Big_int.of_int (346)), zwidth, "load")
            end
        end))
    end
  | ZSTORE ((zimm, zrs2, zrs1, zwidth, zaq, zrl)) ->
    let zoffset = (zsign_extend ((Big_int.of_int (32)), zimm)) in
    begin
      match (zext_data_get_addr (zrs1, zoffset, (ZWrite ZData), zwidth)) with
      | ZExt_DataAddr_Error (ze) ->
        begin zext_handle_data_check_error ze; ZRETIRE_FAIL end
      | ZExt_DataAddr_OK (zvaddr) ->
        (if (zcheck_misaligned (zvaddr, zwidth)) then (begin
          zhandle_mem_exception (zvaddr, (ZE_SAMO_Addr_Align ()));
          ZRETIRE_FAIL
        end) else (begin
          match (ztranslateAddr (zvaddr, (ZWrite ZData))) with
          | ZTR_Failure ((ze, _)) ->
            begin zhandle_mem_exception (zvaddr, ze); ZRETIRE_FAIL end
          | ZTR_Address ((zpaddr, _)) ->
            let zeares = (begin
              match zwidth with
              | ZBYTE ->
                zmem_write_ea (zpaddr, (Big_int.of_int (1)), zaq, zrl, false)
              | ZHALF ->
                zmem_write_ea (zpaddr, (Big_int.of_int (2)), zaq, zrl, false)
              | ZWORD ->
                zmem_write_ea (zpaddr, (Big_int.of_int (4)), zaq, zrl, false)
              | ZDOUBLE ->
                zmem_write_ea (zpaddr, (Big_int.of_int (8)), zaq, zrl, false)
            end) in
            begin
              match zeares with
              | ZMemException (ze) ->
                begin zhandle_mem_exception (zvaddr, ze); ZRETIRE_FAIL end
              | ZMemValue (_) ->
                let zrs2_val = (zrX_bits zrs2) in
                let zres = (begin
                  match zwidth with
                  | ZBYTE ->
                    zmem_write_value (zpaddr, (Big_int.of_int (1)), (subrange (zrs2_val, (Big_int.of_int (7)), Big_int.zero)), zaq, zrl, false)
                  | ZHALF ->
                    zmem_write_value (zpaddr, (Big_int.of_int (2)), (subrange (zrs2_val, (Big_int.of_int (15)), Big_int.zero)), zaq, zrl, false)
                  | ZWORD ->
                    zmem_write_value (zpaddr, (Big_int.of_int (4)), (subrange (zrs2_val, (Big_int.of_int (31)), Big_int.zero)), zaq, zrl, false)
                  | ZDOUBLE when (gteq ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
                    zmem_write_value (zpaddr, (Big_int.of_int (8)), zrs2_val, zaq, zrl, false)
                  | _ ->
                    zreport_invalid_width ("sail-riscv/model/riscv_insts_base.sail", (Big_int.of_int (409)), zwidth, "store")
                end) in
                begin
                  match zres with
                  | ZMemValue (zp0z3) when (eq_bool (zp0z3, true)) ->
                    ZRETIRE_SUCCESS
                  | ZMemValue (zp0z3) when (eq_bool (zp0z3, false)) ->
                    zinternal_error ("sail-riscv/model/riscv_insts_base.sail", (Big_int.of_int (413)), "store got false from mem_write_value")
                  | ZMemException (ze) ->
                    begin zhandle_mem_exception (zvaddr, ze); ZRETIRE_FAIL end
                end
            end
        end))
    end
  | ZADDIW ((zimm, zrs1, zrd)) ->
    let zresult = (add_vec ((zsign_extend ((Big_int.of_int (32)), zimm)), (zrX_bits zrs1))) in
    begin
      zwX_bits (zrd, (zsign_extend ((Big_int.of_int (32)), (subrange (zresult, (Big_int.of_int (31)), Big_int.zero)))));
      ZRETIRE_SUCCESS
    end
  | ZRTYPEW ((zrs2, zrs1, zrd, zop)) ->
    let zrs1_val = (subrange ((zrX_bits zrs1), (Big_int.of_int (31)), Big_int.zero)) in
    let zrs2_val = (subrange ((zrX_bits zrs2), (Big_int.of_int (31)), Big_int.zero)) in
    let zresult = (begin
      match zop with
      | ZRISCV_ADDW -> add_vec (zrs1_val, zrs2_val)
      | ZRISCV_SUBW -> sub_vec (zrs1_val, zrs2_val)
      | ZRISCV_SLLW ->
        shift_bits_left (zrs1_val, (subrange (zrs2_val, (Big_int.of_int (4)), Big_int.zero)))
      | ZRISCV_SRLW ->
        shift_bits_right (zrs1_val, (subrange (zrs2_val, (Big_int.of_int (4)), Big_int.zero)))
      | ZRISCV_SRAW ->
        zshift_right_arith32 (zrs1_val, (subrange (zrs2_val, (Big_int.of_int (4)), Big_int.zero)))
    end) in
    begin
      zwX_bits (zrd, (zsign_extend ((Big_int.of_int (32)), zresult)));
      ZRETIRE_SUCCESS
    end
  | ZSHIFTIWOP ((zshamt, zrs1, zrd, zop)) ->
    let zrs1_val = (subrange ((zrX_bits zrs1), (Big_int.of_int (31)), Big_int.zero)) in
    let zresult = (begin
      match zop with
      | ZRISCV_SLLIW -> shift_bits_left (zrs1_val, zshamt)
      | ZRISCV_SRLIW -> shift_bits_right (zrs1_val, zshamt)
      | ZRISCV_SRAIW -> zshift_right_arith32 (zrs1_val, zshamt)
    end) in
    begin
      zwX_bits (zrd, (zsign_extend ((Big_int.of_int (32)), zresult)));
      ZRETIRE_SUCCESS
    end
  | ZFENCE ((zpred, zsucc)) ->
    let zfiom = (zis_fiom_active ()) in
    let zpred = (zeffective_fence_set (zpred, zfiom)) in
    let zsucc = (zeffective_fence_set (zsucc, zfiom)) in
    begin
      begin
        match ((fun (v0, v1) -> (v1, v0)) (zsucc, zpred)) with
        | (zv__1286, zv__1287) when ((eq_list ((subrange (zv__1286, (Big_int.of_int (1)), Big_int.zero)), [B1; B1])) && (eq_list ((subrange (zv__1287, (Big_int.of_int (1)), Big_int.zero)), [B1; B1]))) ->
          Platform.barrier (ZBarrier_RISCV_rw_rw ())
        | (zv__1290, zv__1291) when ((eq_list ((subrange (zv__1290, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])) && (eq_list ((subrange (zv__1291, (Big_int.of_int (1)), Big_int.zero)), [B1; B1]))) ->
          Platform.barrier (ZBarrier_RISCV_r_rw ())
        | (zv__1294, zv__1295) when ((eq_list ((subrange (zv__1294, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])) && (eq_list ((subrange (zv__1295, (Big_int.of_int (1)), Big_int.zero)), [B1; B0]))) ->
          Platform.barrier (ZBarrier_RISCV_r_r ())
        | (zv__1298, zv__1299) when ((eq_list ((subrange (zv__1298, (Big_int.of_int (1)), Big_int.zero)), [B1; B1])) && (eq_list ((subrange (zv__1299, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))) ->
          Platform.barrier (ZBarrier_RISCV_rw_w ())
        | (zv__1302, zv__1303) when ((eq_list ((subrange (zv__1302, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])) && (eq_list ((subrange (zv__1303, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))) ->
          Platform.barrier (ZBarrier_RISCV_w_w ())
        | (zv__1306, zv__1307) when ((eq_list ((subrange (zv__1306, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])) && (eq_list ((subrange (zv__1307, (Big_int.of_int (1)), Big_int.zero)), [B1; B1]))) ->
          Platform.barrier (ZBarrier_RISCV_w_rw ())
        | (zv__1310, zv__1311) when ((eq_list ((subrange (zv__1310, (Big_int.of_int (1)), Big_int.zero)), [B1; B1])) && (eq_list ((subrange (zv__1311, (Big_int.of_int (1)), Big_int.zero)), [B1; B0]))) ->
          Platform.barrier (ZBarrier_RISCV_rw_r ())
        | (zv__1314, zv__1315) when ((eq_list ((subrange (zv__1314, (Big_int.of_int (1)), Big_int.zero)), [B1; B0])) && (eq_list ((subrange (zv__1315, (Big_int.of_int (1)), Big_int.zero)), [B0; B1]))) ->
          Platform.barrier (ZBarrier_RISCV_r_w ())
        | (zv__1318, zv__1319) when ((eq_list ((subrange (zv__1318, (Big_int.of_int (1)), Big_int.zero)), [B0; B1])) && (eq_list ((subrange (zv__1319, (Big_int.of_int (1)), Big_int.zero)), [B1; B0]))) ->
          Platform.barrier (ZBarrier_RISCV_w_r ())
        | (_, zv__1322) when (eq_list ((subrange (zv__1322, (Big_int.of_int (1)), Big_int.zero)), [B0; B0])) ->
          ()
        | (zv__1324, _) when (eq_list ((subrange (zv__1324, (Big_int.of_int (1)), Big_int.zero)), [B0; B0])) ->
          ()
        | _ -> begin print_endline "FIXME: unsupported fence"; () end
      end;
      ZRETIRE_SUCCESS
    end
  | ZFENCE_TSO ((zpred, zsucc)) ->
    begin
      begin
        match ((fun (v0, v1) -> (v1, v0)) (zsucc, zpred)) with
        | (zv__1326, zv__1327) when ((eq_list ((subrange (zv__1326, (Big_int.of_int (1)), Big_int.zero)), [B1; B1])) && (eq_list ((subrange (zv__1327, (Big_int.of_int (1)), Big_int.zero)), [B1; B1]))) ->
          Platform.barrier (ZBarrier_RISCV_tso ())
        | (zv__1330, zv__1331) when ((eq_list ((subrange (zv__1330, (Big_int.of_int (1)), Big_int.zero)), [B0; B0])) && (eq_list ((subrange (zv__1331, (Big_int.of_int (1)), Big_int.zero)), [B0; B0]))) ->
          ()
        | _ -> begin print_endline "FIXME: unsupported fence"; () end
      end;
      ZRETIRE_SUCCESS
    end
  | ZFENCEI (()) -> ZRETIRE_SUCCESS
  | ZECALL (()) ->
    let zt = ({Zsync_exception.ztrap = begin
      match !zcur_privilege with
      | ZUser -> ZE_U_EnvCall ()
      | ZSupervisor -> ZE_S_EnvCall ()
      | ZMachine -> ZE_M_EnvCall ()
    end;
    Zsync_exception.zexcinfo = ZNone ();
    Zsync_exception.zext = ZNone ()}) in
    begin
      zset_next_pc (zexception_handler (!zcur_privilege, (ZCTL_TRAP zt), !zPC));
      ZRETIRE_FAIL
    end
  | ZMRET (()) ->
    (if (zneq_anything (!zcur_privilege, ZMachine)) then (begin
      zhandle_illegal ();
      ZRETIRE_FAIL
    end) else ((if (znot (zext_check_xret_priv ZMachine)) then (begin
      zext_fail_xret_priv ();
      ZRETIRE_FAIL
    end) else (begin
      zset_next_pc (zexception_handler (!zcur_privilege, (ZCTL_MRET ()), !zPC));
      ZRETIRE_SUCCESS
    end))))
  | ZSRET (()) ->
    let zsret_illegal = (begin
      match !zcur_privilege with
      | ZUser -> true
      | ZSupervisor ->
        (znot (zhaveSupMode ())) || (eq_list ((z_get_Mstatus_TSR !zmstatus), [B1]))
      | ZMachine -> znot (zhaveSupMode ())
    end) in
    (if zsret_illegal then (begin zhandle_illegal (); ZRETIRE_FAIL end) else ((if (znot (zext_check_xret_priv ZSupervisor)) then (begin
      zext_fail_xret_priv ();
      ZRETIRE_FAIL
    end) else (begin
      zset_next_pc (zexception_handler (!zcur_privilege, (ZCTL_SRET ()), !zPC));
      ZRETIRE_SUCCESS
    end))))
  | ZEBREAK (()) ->
    begin zhandle_mem_exception (!zPC, (ZE_Breakpoint ())); ZRETIRE_FAIL end
  | ZWFI (()) ->
    begin
      match !zcur_privilege with
      | ZMachine -> begin zplatform_wfi (); ZRETIRE_SUCCESS end
      | ZSupervisor ->
        (if (eq_list ((z_get_Mstatus_TW !zmstatus), [B1])) then (begin
          zhandle_illegal ();
          ZRETIRE_FAIL
        end) else (begin zplatform_wfi (); ZRETIRE_SUCCESS end))
      | ZUser -> begin zhandle_illegal (); ZRETIRE_FAIL end
    end
  | ZSFENCE_VMA ((zrs1, zrs2)) ->
    let zaddr = ((if (eq_list (zrs1, [B0; B0; B0; B0; B0])) then (ZNone ()) else (ZSome (zrX_bits zrs1)))) in
    let zasid = ((if (eq_list (zrs2, [B0; B0; B0; B0; B0])) then (ZNone ()) else (ZSome (zrX_bits zrs2)))) in
    begin
      match !zcur_privilege with
      | ZUser -> begin zhandle_illegal (); ZRETIRE_FAIL end
      | ZSupervisor ->
        begin
          match ((fun (v0, v1) -> (v1, v0)) (z_get_Mstatus_TVM !zmstatus, zarchitecture (zget_mstatus_SXL !zmstatus))) with
          | (ZSome (_), zb__0) when (eq_list (zb__0, [B1])) ->
            begin zhandle_illegal (); ZRETIRE_FAIL end
          | (ZSome (_), zb__1) when (eq_list (zb__1, [B0])) ->
            begin zflush_TLB (zasid, zaddr); ZRETIRE_SUCCESS end
          | (_, _) ->
            zinternal_error ("sail-riscv/model/riscv_insts_base.sail", (Big_int.of_int (789)), "unimplemented sfence architecture")
        end
      | ZMachine -> begin zflush_TLB (zasid, zaddr); ZRETIRE_SUCCESS end
    end
  | ZC_NOP (()) -> ZRETIRE_SUCCESS
  | ZC_ADDI4SPN ((zrdc, znzzimm)) ->
    let zimm = (append ([B0; B0], (append (znzzimm, [B0; B0])))) in
    let zrd = (zcreg2reg_idx zrdc) in
    zexecute (ZITYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_ADDI, zrd, zsp, zimm)))
  | ZC_LW ((zuimm, zrsc, zrdc)) ->
    let zimm = (zzzero_extend ((Big_int.of_int (12)), (append (zuimm, [B0; B0])))) in
    let zrd = (zcreg2reg_idx zrdc) in
    let zrs = (zcreg2reg_idx zrsc) in
    zexecute (ZLOAD ((fun (v0, v1, v2, v3, v4, v5, v6) -> (v6, v5, v4, v3, v2, v1, v0)) (false, false, ZWORD, false, zrd, zrs, zimm)))
  | ZC_LD ((zuimm, zrsc, zrdc)) ->
    let zimm = (zzzero_extend ((Big_int.of_int (12)), (append (zuimm, [B0; B0; B0])))) in
    let zrd = (zcreg2reg_idx zrdc) in
    let zrs = (zcreg2reg_idx zrsc) in
    zexecute (ZLOAD ((fun (v0, v1, v2, v3, v4, v5, v6) -> (v6, v5, v4, v3, v2, v1, v0)) (false, false, ZDOUBLE, false, zrd, zrs, zimm)))
  | ZC_SW ((zuimm, zrsc1, zrsc2)) ->
    let zimm = (zzzero_extend ((Big_int.of_int (12)), (append (zuimm, [B0; B0])))) in
    let zrs1 = (zcreg2reg_idx zrsc1) in
    let zrs2 = (zcreg2reg_idx zrsc2) in
    zexecute (ZSTORE ((fun (v0, v1, v2, v3, v4, v5) -> (v5, v4, v3, v2, v1, v0)) (false, false, ZWORD, zrs1, zrs2, zimm)))
  | ZC_SD ((zuimm, zrsc1, zrsc2)) ->
    let zimm = (zzzero_extend ((Big_int.of_int (12)), (append (zuimm, [B0; B0; B0])))) in
    let zrs1 = (zcreg2reg_idx zrsc1) in
    let zrs2 = (zcreg2reg_idx zrsc2) in
    zexecute (ZSTORE ((fun (v0, v1, v2, v3, v4, v5) -> (v5, v4, v3, v2, v1, v0)) (false, false, ZDOUBLE, zrs1, zrs2, zimm)))
  | ZC_ADDI ((znzzi, zrsd)) ->
    let zimm = (zsign_extend ((Big_int.of_int (12)), znzzi)) in
    zexecute (ZITYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_ADDI, zrsd, zrsd, zimm)))
  | ZC_JAL (zimm) ->
    zexecute (ZRISCV_JAL ((fun (v0, v1) -> (v1, v0)) (zra, zsign_extend ((Big_int.of_int (21)), (append (zimm, [B0]))))))
  | ZC_ADDIW ((zimm, zrsd)) ->
    zexecute (ZADDIW ((fun (v0, v1, v2) -> (v2, v1, v0)) (zrsd, zrsd, zsign_extend ((Big_int.of_int (12)), zimm))))
  | ZC_LI ((zimm, zrd)) ->
    let zimm = (zsign_extend ((Big_int.of_int (12)), zimm)) in
    zexecute (ZITYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_ADDI, zrd, zzzreg, zimm)))
  | ZC_ADDI16SP (zimm) ->
    let zimm = (zsign_extend ((Big_int.of_int (12)), (append (zimm, [B0; B0; B0; B0])))) in
    zexecute (ZITYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_ADDI, zsp, zsp, zimm)))
  | ZC_LUI ((zimm, zrd)) ->
    let zres = (zsign_extend ((Big_int.of_int (20)), zimm)) in
    zexecute (ZUTYPE ((fun (v0, v1, v2) -> (v2, v1, v0)) (ZRISCV_LUI, zrd, zres)))
  | ZC_SRLI ((zshamt, zrsd)) ->
    let zrsd = (zcreg2reg_idx zrsd) in
    zexecute (ZSHIFTIOP ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_SRLI, zrsd, zrsd, zshamt)))
  | ZC_SRAI ((zshamt, zrsd)) ->
    let zrsd = (zcreg2reg_idx zrsd) in
    zexecute (ZSHIFTIOP ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_SRAI, zrsd, zrsd, zshamt)))
  | ZC_ANDI ((zimm, zrsd)) ->
    let zrsd = (zcreg2reg_idx zrsd) in
    zexecute (ZITYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_ANDI, zrsd, zrsd, zsign_extend ((Big_int.of_int (12)), zimm))))
  | ZC_SUB ((zrsd, zrs2)) ->
    let zrsd = (zcreg2reg_idx zrsd) in
    let zrs2 = (zcreg2reg_idx zrs2) in
    zexecute (ZRTYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_SUB, zrsd, zrsd, zrs2)))
  | ZC_XOR ((zrsd, zrs2)) ->
    let zrsd = (zcreg2reg_idx zrsd) in
    let zrs2 = (zcreg2reg_idx zrs2) in
    zexecute (ZRTYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_XOR, zrsd, zrsd, zrs2)))
  | ZC_OR ((zrsd, zrs2)) ->
    let zrsd = (zcreg2reg_idx zrsd) in
    let zrs2 = (zcreg2reg_idx zrs2) in
    zexecute (ZRTYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_OR, zrsd, zrsd, zrs2)))
  | ZC_AND ((zrsd, zrs2)) ->
    let zrsd = (zcreg2reg_idx zrsd) in
    let zrs2 = (zcreg2reg_idx zrs2) in
    zexecute (ZRTYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_AND, zrsd, zrsd, zrs2)))
  | ZC_SUBW ((zrsd, zrs2)) ->
    let zrsd = (zcreg2reg_idx zrsd) in
    let zrs2 = (zcreg2reg_idx zrs2) in
    zexecute (ZRTYPEW ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_SUBW, zrsd, zrsd, zrs2)))
  | ZC_ADDW ((zrsd, zrs2)) ->
    let zrsd = (zcreg2reg_idx zrsd) in
    let zrs2 = (zcreg2reg_idx zrs2) in
    zexecute (ZRTYPEW ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_ADDW, zrsd, zrsd, zrs2)))
  | ZC_J (zimm) ->
    zexecute (ZRISCV_JAL ((fun (v0, v1) -> (v1, v0)) (zzzreg, zsign_extend ((Big_int.of_int (21)), (append (zimm, [B0]))))))
  | ZC_BEQZ ((zimm, zrs)) ->
    zexecute (ZBTYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_BEQ, zcreg2reg_idx zrs, zzzreg, zsign_extend ((Big_int.of_int (13)), (append (zimm, [B0]))))))
  | ZC_BNEZ ((zimm, zrs)) ->
    zexecute (ZBTYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_BNE, zcreg2reg_idx zrs, zzzreg, zsign_extend ((Big_int.of_int (13)), (append (zimm, [B0]))))))
  | ZC_SLLI ((zshamt, zrsd)) ->
    zexecute (ZSHIFTIOP ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_SLLI, zrsd, zrsd, zshamt)))
  | ZC_LWSP ((zuimm, zrd)) ->
    let zimm = (zzzero_extend ((Big_int.of_int (12)), (append (zuimm, [B0; B0])))) in
    zexecute (ZLOAD ((fun (v0, v1, v2, v3, v4, v5, v6) -> (v6, v5, v4, v3, v2, v1, v0)) (false, false, ZWORD, false, zrd, zsp, zimm)))
  | ZC_LDSP ((zuimm, zrd)) ->
    let zimm = (zzzero_extend ((Big_int.of_int (12)), (append (zuimm, [B0; B0; B0])))) in
    zexecute (ZLOAD ((fun (v0, v1, v2, v3, v4, v5, v6) -> (v6, v5, v4, v3, v2, v1, v0)) (false, false, ZDOUBLE, false, zrd, zsp, zimm)))
  | ZC_SWSP ((zuimm, zrs2)) ->
    let zimm = (zzzero_extend ((Big_int.of_int (12)), (append (zuimm, [B0; B0])))) in
    zexecute (ZSTORE ((fun (v0, v1, v2, v3, v4, v5) -> (v5, v4, v3, v2, v1, v0)) (false, false, ZWORD, zsp, zrs2, zimm)))
  | ZC_SDSP ((zuimm, zrs2)) ->
    let zimm = (zzzero_extend ((Big_int.of_int (12)), (append (zuimm, [B0; B0; B0])))) in
    zexecute (ZSTORE ((fun (v0, v1, v2, v3, v4, v5) -> (v5, v4, v3, v2, v1, v0)) (false, false, ZDOUBLE, zsp, zrs2, zimm)))
  | ZC_JR (zrs1) ->
    zexecute (ZRISCV_JALR ((fun (v0, v1, v2) -> (v2, v1, v0)) (zzzreg, zrs1, zzzero_extend ((Big_int.of_int (12)), [B0]))))
  | ZC_JALR (zrs1) ->
    zexecute (ZRISCV_JALR ((fun (v0, v1, v2) -> (v2, v1, v0)) (zra, zrs1, zzzero_extend ((Big_int.of_int (12)), [B0]))))
  | ZC_MV ((zrd, zrs2)) ->
    zexecute (ZRTYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_ADD, zrd, zzzreg, zrs2)))
  | ZC_EBREAK (()) -> zexecute (ZEBREAK ())
  | ZC_ADD ((zrsd, zrs2)) ->
    zexecute (ZRTYPE ((fun (v0, v1, v2, v3) -> (v3, v2, v1, v0)) (ZRISCV_ADD, zrsd, zrsd, zrs2)))
  | ZMUL ((zrs2, zrs1, zrd, zhigh, zsigned1, zsigned2)) ->
    (if ((zhaveMulDiv ()) || (zhaveZmmul ())) then (let zrs1_val = (zrX_bits zrs1) in
    let zrs2_val = (zrX_bits zrs2) in
    let zrs1_int = ((if zsigned1 then (sint zrs1_val) else (uint zrs1_val))) in
    let zrs2_int = ((if zsigned2 then (sint zrs2_val) else (uint zrs2_val))) in
    let zresult_wide = (zto_bits ((mult ((Big_int.of_int (2)), (Big_int.of_int (32)))), (mult (zrs1_int, zrs2_int)))) in
    let zresult = ((if zhigh then (subrange (zresult_wide, (sub_int ((mult ((Big_int.of_int (2)), (Big_int.of_int (32)))), (Big_int.of_int (1)))), (Big_int.of_int (32)))) else (subrange (zresult_wide, (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero)))) in
    begin zwX_bits (zrd, zresult); ZRETIRE_SUCCESS end) else (begin
      zhandle_illegal ();
      ZRETIRE_FAIL
    end))
  | ZDIV ((zrs2, zrs1, zrd, zs)) ->
    (if (zhaveMulDiv ()) then (let zrs1_val = (zrX_bits zrs1) in
    let zrs2_val = (zrX_bits zrs2) in
    let zrs1_int = ((if zs then (sint zrs1_val) else (uint zrs1_val))) in
    let zrs2_int = ((if zs then (sint zrs2_val) else (uint zrs2_val))) in
    let zq = ((if (eq_int (zrs2_int, Big_int.zero)) then (Big_int.of_int (-1)) else (quot_round_zero (zrs1_int, zrs2_int)))) in
    let zqz7 = ((if (zs && (gt (zq, zxlen_max_signed))) then zxlen_min_signed else zq)) in
    begin
      zwX_bits (zrd, (zto_bits ((Big_int.of_int (32)), zqz7)));
      ZRETIRE_SUCCESS
    end) else (begin zhandle_illegal (); ZRETIRE_FAIL end))
  | ZREM ((zrs2, zrs1, zrd, zs)) ->
    (if (zhaveMulDiv ()) then (let zrs1_val = (zrX_bits zrs1) in
    let zrs2_val = (zrX_bits zrs2) in
    let zrs1_int = ((if zs then (sint zrs1_val) else (uint zrs1_val))) in
    let zrs2_int = ((if zs then (sint zrs2_val) else (uint zrs2_val))) in
    let zr = ((if (eq_int (zrs2_int, Big_int.zero)) then zrs1_int else (rem_round_zero (zrs1_int, zrs2_int)))) in
    begin
      zwX_bits (zrd, (zto_bits ((Big_int.of_int (32)), zr)));
      ZRETIRE_SUCCESS
    end) else (begin zhandle_illegal (); ZRETIRE_FAIL end))
  | ZMULW ((zrs2, zrs1, zrd)) ->
    (if ((zhaveMulDiv ()) || (zhaveZmmul ())) then (let zrs1_val = (subrange ((zrX_bits zrs1), (Big_int.of_int (31)), Big_int.zero)) in
    let zrs2_val = (subrange ((zrX_bits zrs2), (Big_int.of_int (31)), Big_int.zero)) in
    let zrs1_int = (sint zrs1_val) in
    let zrs2_int = (sint zrs2_val) in
    let zresult32 = (subrange ((zto_bits ((Big_int.of_int (64)), (mult (zrs1_int, zrs2_int)))), (Big_int.of_int (31)), Big_int.zero)) in
    let zresult = (zsign_extend ((Big_int.of_int (32)), zresult32)) in
    begin zwX_bits (zrd, zresult); ZRETIRE_SUCCESS end) else (begin
      zhandle_illegal ();
      ZRETIRE_FAIL
    end))
  | ZDIVW ((zrs2, zrs1, zrd, zs)) ->
    (if (zhaveMulDiv ()) then (let zrs1_val = (subrange ((zrX_bits zrs1), (Big_int.of_int (31)), Big_int.zero)) in
    let zrs2_val = (subrange ((zrX_bits zrs2), (Big_int.of_int (31)), Big_int.zero)) in
    let zrs1_int = ((if zs then (sint zrs1_val) else (uint zrs1_val))) in
    let zrs2_int = ((if zs then (sint zrs2_val) else (uint zrs2_val))) in
    let zq = ((if (eq_int (zrs2_int, Big_int.zero)) then (Big_int.of_int (-1)) else (quot_round_zero (zrs1_int, zrs2_int)))) in
    let zqz7 = ((if (zs && (gt (zq, (sub_int ((pow2 (Big_int.of_int (31))), (Big_int.of_int (1))))))) then (sub_int (Big_int.zero, (pow2 (Big_int.of_int (31))))) else zq)) in
    begin
      zwX_bits (zrd, (zsign_extend ((Big_int.of_int (32)), (zto_bits ((Big_int.of_int (32)), zqz7)))));
      ZRETIRE_SUCCESS
    end) else (begin zhandle_illegal (); ZRETIRE_FAIL end))
  | ZREMW ((zrs2, zrs1, zrd, zs)) ->
    (if (zhaveMulDiv ()) then (let zrs1_val = (subrange ((zrX_bits zrs1), (Big_int.of_int (31)), Big_int.zero)) in
    let zrs2_val = (subrange ((zrX_bits zrs2), (Big_int.of_int (31)), Big_int.zero)) in
    let zrs1_int = ((if zs then (sint zrs1_val) else (uint zrs1_val))) in
    let zrs2_int = ((if zs then (sint zrs2_val) else (uint zrs2_val))) in
    let zr = ((if (eq_int (zrs2_int, Big_int.zero)) then zrs1_int else (rem_round_zero (zrs1_int, zrs2_int)))) in
    begin
      zwX_bits (zrd, (zsign_extend ((Big_int.of_int (32)), (zto_bits ((Big_int.of_int (32)), zr)))));
      ZRETIRE_SUCCESS
    end) else (begin zhandle_illegal (); ZRETIRE_FAIL end))
  | ZCSR ((zcsr, zrs1, zrd, zis_imm, zop)) ->
    let zrs1_val = ((if zis_imm then (zzzero_extend ((Big_int.of_int (32)), zrs1)) else (zrX_bits zrs1))) in
    let zisWrite = (begin
      match zop with
      | ZCSRRW -> true
      | _ ->
        (if zis_imm then (zneq_int ((uint zrs1_val), Big_int.zero)) else (zneq_int ((uint zrs1), Big_int.zero)))
    end) in
    (if (znot (zcheck_CSR (zcsr, !zcur_privilege, zisWrite))) then (begin
      zhandle_illegal ();
      ZRETIRE_FAIL
    end) else ((if (znot (zext_check_CSR (zcsr, !zcur_privilege, zisWrite))) then (begin
      zext_check_CSR_fail ();
      ZRETIRE_FAIL
    end) else (let zcsr_val = (zreadCSR zcsr) in
    begin
      (if zisWrite then (let znew_val = (begin
        match zop with
        | ZCSRRW -> zrs1_val
        | ZCSRRS -> or_vec (zcsr_val, zrs1_val)
        | ZCSRRC -> and_vec (zcsr_val, (not_vec zrs1_val))
      end) in
      zwriteCSR (zcsr, znew_val)) else ());
      zwX_bits (zrd, zcsr_val);
      ZRETIRE_SUCCESS
    end))))
  | ZC_NOP_HINT (zimm) -> ZRETIRE_SUCCESS
  | ZC_ADDI_HINT (zrsd) -> ZRETIRE_SUCCESS
  | ZC_LI_HINT (zimm) -> ZRETIRE_SUCCESS
  | ZC_LUI_HINT (zimm) -> ZRETIRE_SUCCESS
  | ZC_MV_HINT (zrs2) -> ZRETIRE_SUCCESS
  | ZC_ADD_HINT (zrs2) -> ZRETIRE_SUCCESS
  | ZC_SLLI_HINT ((zshamt, zrsd)) -> ZRETIRE_SUCCESS
  | ZC_SRLI_HINT (zrsd) -> ZRETIRE_SUCCESS
  | ZC_SRAI_HINT (zrsd) -> ZRETIRE_SUCCESS
  | ZFENCE_RESERVED ((zfm, zpred, zsucc, zrs, zrd)) -> ZRETIRE_SUCCESS
  | ZFENCEI_RESERVED ((zimm, zrs, zrd)) -> ZRETIRE_SUCCESS
  | ZAUIPCC ((zimm, zcd)) ->
    let zoff = (shiftl ((zsign_extend ((Big_int.of_int (32)), zimm)), (Big_int.of_int (11)))) in
    let (zrepresentable, znewCap) = (zsetCapAddr (!zPCC, (add_vec (!zPC, zoff)))) in
    begin
      zwC_bits (zcd, (zclearTagIf (znewCap, (znot zrepresentable))));
      ZRETIRE_SUCCESS
    end
  | ZAUICGP ((zimm, zcd)) ->
    let zoff = (shiftl ((zsign_extend ((Big_int.of_int (32)), zimm)), (Big_int.of_int (11)))) in
    let zcgp_val = (zrC_bits zCGP_IDX) in
    let (zrepresentable, znewCap) = (zincCapAddr (zcgp_val, zoff)) in
    begin
      zwC_bits (zcd, (zclearTagIf (znewCap, ((zisCapSealed zcgp_val) || (znot zrepresentable)))));
      ZRETIRE_SUCCESS
    end
  | ZCJAL ((zimm, zcd)) ->
    let zoff = (zsign_extend ((Big_int.of_int (32)), zimm)) in
    let znewPC = (add_vec (!zPC, zoff)) in
    (if ((eq_bit ((access (znewPC, (Big_int.of_int (1)))), B1)) && (not (zhaveRVC ()))) then (begin
      zhandle_mem_exception (znewPC, (ZE_Fetch_Addr_Align ()));
      ZRETIRE_FAIL
    end) else (let (zsuccess, zlinkCap) = (zsetCapAddr (!zPCC, !znextPC)) in
    begin
      assert zsuccess;
      assert (znot (zisCapSealed zlinkCap));
      (if (eq_list (zcd, zra)) then (let zsentry_type = ((if (eq_list ((z_get_Mstatus_MIE !zmstatus), [B1])) then zotype_sentry_bie else zotype_sentry_bid)) in
      zwC_bits (zcd, (zsealCap (zlinkCap, (zto_bits (zcap_otype_width, zsentry_type)))))) else (zwC_bits (zcd, zlinkCap)));
      (znextPC := znewPC);
      ZRETIRE_SUCCESS
    end))
  | ZCJALR ((zimm, zcs1, zcd)) ->
    let zcs1_val = (zrC_bits zcs1) in
    let zoff = (zsign_extend ((Big_int.of_int (32)), zimm)) in
    let znewPC = (update ((add_vec ((zcs1_val.zaddress), zoff)), Big_int.zero, B0)) in
    (if (znot (zcs1_val.ztag)) then (begin
      zhandle_cheri_reg_exception (ZCapEx_TagViolation, zcs1);
      ZRETIRE_FAIL
    end) else ((if (((zisCapSealed zcs1_val) && (zneq_bits (zimm, (zzzeros_implicit (Big_int.of_int (12)))))) || (znot (((eq_list (zcd, zzzreg)) && ((eq_list (zcs1, zra)) && (zisCapBackwardSentry zcs1_val))) || (((eq_list (zcd, zzzreg)) && ((zneq_bits (zcs1, zra)) && ((znot (zisCapSealed zcs1_val)) || (zisCapForwardInheritSentry zcs1_val)))) || (((zneq_bits (zcd, zzzreg)) && ((znot (zisCapSealed zcs1_val)) || (zisCapForwardInheritSentry zcs1_val))) || ((eq_list (zcd, zra)) && ((znot (zisCapSealed zcs1_val)) || (zisCapForwardSentry zcs1_val)))))))) then (begin
      zhandle_cheri_reg_exception (ZCapEx_SealViolation, zcs1);
      ZRETIRE_FAIL
    end) else ((if (znot (zcs1_val.zpermit_execute)) then (begin
      zhandle_cheri_reg_exception (ZCapEx_PermitExecuteViolation, zcs1);
      ZRETIRE_FAIL
    end) else ((if ((eq_bit ((access (znewPC, (Big_int.of_int (1)))), B1)) && (not (zhaveRVC ()))) then (begin
      zhandle_mem_exception (znewPC, (ZE_Fetch_Addr_Align ()));
      ZRETIRE_FAIL
    end) else (let (zsuccess, zlinkCap) = (zsetCapAddr (!zPCC, !znextPC)) in
    begin
      assert zsuccess;
      assert (znot (zisCapSealed zlinkCap));
      (if (eq_list (zcd, zra)) then (let zsentry_type = ((if (eq_list ((z_get_Mstatus_MIE !zmstatus), [B1])) then zotype_sentry_bie else zotype_sentry_bid)) in
      zwC_bits (zcd, (zsealCap (zlinkCap, (zto_bits (zcap_otype_width, zsentry_type)))))) else (zwC_bits (zcd, zlinkCap)));
      (znextPC := znewPC);
      (znextPCC := (zunsealCap zcs1_val));
      (if ((eq_int ((uint (zcs1_val.zotype)), zotype_sentry_id)) || (eq_int ((uint (zcs1_val.zotype)), zotype_sentry_bid))) then (z_set_Mstatus_MIE (zmstatus, [B0])) else ());
      (if ((eq_int ((uint (zcs1_val.zotype)), zotype_sentry_ie)) || (eq_int ((uint (zcs1_val.zotype)), zotype_sentry_bie))) then (z_set_Mstatus_MIE (zmstatus, [B1])) else ());
      ZRETIRE_SUCCESS
    end))))))))
  | ZCGetPerm ((zrd, zcs1)) ->
    let zcapVal = (zrC_bits zcs1) in
    begin
      zwX_bits (zrd, (zzzero_extend ((Big_int.of_int (32)), (zgetCapPerms zcapVal))));
      ZRETIRE_SUCCESS
    end
  | ZCGetType ((zrd, zcs1)) ->
    let zcapVal = (zrC_bits zcs1) in
    begin
      zwX_bits (zrd, (zzzero_extend ((Big_int.of_int (32)), (zcapVal.zotype))));
      ZRETIRE_SUCCESS
    end
  | ZCGetBase ((zrd, zcs1)) ->
    let zcapVal = (zrC_bits zcs1) in
    begin zwX_bits (zrd, (zgetCapBaseBits zcapVal)); ZRETIRE_SUCCESS end
  | ZCGetHigh ((zrd, zcs1)) ->
    let zcapVal = (zrC_bits zcs1) in
    begin
      zwX_bits (zrd, (subrange ((zcapToBits zcapVal), (sub_int ((mult ((Big_int.of_int (32)), (Big_int.of_int (2)))), (Big_int.of_int (1)))), (Big_int.of_int (32)))));
      ZRETIRE_SUCCESS
    end
  | ZCSetHigh ((zcd, zcs1, zrs2)) ->
    let zcapVal = (zrC_bits zcs1) in
    let zintVal = (zrX_bits zrs2) in
    let zcapLow = (subrange ((zcapToBits zcapVal), (sub_int ((Big_int.of_int (32)), (Big_int.of_int (1)))), Big_int.zero)) in
    let znewCap = (zcapBitsToCapability (false, (append (zintVal, zcapLow)))) in
    begin zwC_bits (zcd, znewCap); ZRETIRE_SUCCESS end
  | ZCGetTop ((zrd, zcs1)) ->
    let zcapVal = (zrC_bits zcs1) in
    let ztop = (zgetCapTop zcapVal) in
    begin
      zwX_bits (zrd, (zto_bits ((Big_int.of_int (32)), ((if (gt (ztop, zcap_max_addr)) then zcap_max_addr else ztop)))));
      ZRETIRE_SUCCESS
    end
  | ZCGetLen ((zrd, zcs1)) ->
    let zcapVal = (zrC_bits zcs1) in
    let zlen = (zgetCapLength zcapVal) in
    begin
      zwX_bits (zrd, (zto_bits ((Big_int.of_int (32)), ((if (gt (zlen, zcap_max_addr)) then zcap_max_addr else zlen)))));
      ZRETIRE_SUCCESS
    end
  | ZCGetTag ((zrd, zcs1)) ->
    let zcapVal = (zrC_bits zcs1) in
    begin
      zwX_bits (zrd, (zzzero_extend ((Big_int.of_int (32)), (zbool_to_bits (zcapVal.ztag)))));
      ZRETIRE_SUCCESS
    end
  | ZCGetAddr ((zrd, zcs1)) ->
    let zcapVal = (zrC_bits zcs1) in
    begin zwX_bits (zrd, (zcapVal.zaddress)); ZRETIRE_SUCCESS end
  | ZCSpecialRW ((zcd, zscr, zcs1)) ->
    let zspecialExists = (begin
      match (uint zscr) with
      | zl__8 when (eq_int (zl__8, (Big_int.of_int (28)))) -> true
      | zl__9 when (eq_int (zl__9, (Big_int.of_int (29)))) -> true
      | zl__10 when (eq_int (zl__10, (Big_int.of_int (30)))) -> true
      | zl__11 when (eq_int (zl__11, (Big_int.of_int (31)))) -> true
      | _ -> false
    end) in
    (if (znot zspecialExists) then (begin zhandle_illegal (); ZRETIRE_FAIL end) else ((if (znot (!zPCC.zaccess_system_regs)) then (begin
      zhandle_cheri_cap_exception (ZCapEx_AccessSystemRegsViolation, (append ([B1], zscr)));
      ZRETIRE_FAIL
    end) else (let zcs1_val = ref ((zrC_bits zcs1) : ZCapability.zCapability) in
    begin
      zwC_bits (zcd, (begin
        match (uint zscr) with
        | zl__0 when (eq_int (zl__0, (Big_int.of_int (28)))) -> !zMTCC
        | zl__1 when (eq_int (zl__1, (Big_int.of_int (29)))) -> !zMTDC
        | zl__2 when (eq_int (zl__2, (Big_int.of_int (30)))) -> !zMScratchC
        | zl__3 when (eq_int (zl__3, (Big_int.of_int (31)))) -> !zMEPCC
        | _ -> begin assert false; exit 0 end
      end));
      (if (zneq_bits (zcs1, (zzzeros_implicit (Big_int.of_int (5))))) then (begin
        match (uint zscr) with
        | zl__4 when (eq_int (zl__4, (Big_int.of_int (28)))) ->
          let zinvalid = ((zneq_bits ((subrange ((!zcs1_val.zaddress), (Big_int.of_int (1)), Big_int.zero)), [B0; B0])) || ((zisCapSealed !zcs1_val) || (znot (!zcs1_val.zpermit_execute)))) in
          begin
            (zcs1_val := ({!zcs1_val with ZCapability.zaddress = update_subrange ((!zcs1_val.zaddress), (Big_int.of_int (1)), Big_int.zero, [B0; B0])}));
            (zMTCC := (zclearTagIf (!zcs1_val, zinvalid)))
          end
        | zl__5 when (eq_int (zl__5, (Big_int.of_int (29)))) ->
          (zMTDC := !zcs1_val)
        | zl__6 when (eq_int (zl__6, (Big_int.of_int (30)))) ->
          (zMScratchC := !zcs1_val)
        | zl__7 when (eq_int (zl__7, (Big_int.of_int (31)))) ->
          let zinvalid = ((zneq_anything ((access ((!zcs1_val.zaddress), Big_int.zero)), B0)) || ((zisCapSealed !zcs1_val) || (znot (!zcs1_val.zpermit_execute)))) in
          begin
            (zcs1_val := ({!zcs1_val with ZCapability.zaddress = update ((!zcs1_val.zaddress), Big_int.zero, B0)}));
            (zMEPCC := (zclearTagIf (!zcs1_val, zinvalid)))
          end
        | _ -> assert false
      end) else ());
      ZRETIRE_SUCCESS
    end))))
  | ZCAndPerm ((zcd, zcs1, zrs2)) ->
    let zcs1_val = (zrC_bits zcs1) in
    let zrs2_val = (zrX_bits zrs2) in
    let zperms = (zgetCapPerms zcs1_val) in
    let zmask = (vector_truncate (zrs2_val, zcap_perms_width)) in
    let znewperms = (and_vec (zperms, zmask)) in
    let zperm_global = (zgetCapPerms ({znull_cap with ZCapability.zglobal = true})) in
    let zinCap = (zclearTagIf (zcs1_val, ((zisCapSealed zcs1_val) && (zneq_bits ((or_vec (zmask, zperm_global)), (zones (Big_int.of_int (12)))))))) in
    let znewCap = (zsetCapPerms (zinCap, znewperms)) in
    begin zwC_bits (zcd, znewCap); ZRETIRE_SUCCESS end
  | ZCSub ((zrd, zcs1, zcs2)) ->
    let zcs2_val = (zrC_bits zcs2) in
    let zcs1_val = (zrC_bits zcs1) in
    begin
      zwX_bits (zrd, (sub_vec ((zcs1_val.zaddress), (zcs2_val.zaddress))));
      ZRETIRE_SUCCESS
    end
  | ZCIncAddr ((zcd, zcs1, zrs2)) ->
    let zcs1_val = (zrC_bits zcs1) in
    let zrs2_val = (zrX_bits zrs2) in
    let zinCap = (zclearTagIfSealed zcs1_val) in
    let (zsuccess, znewCap) = (zincCapAddr (zinCap, zrs2_val)) in
    begin
      zwC_bits (zcd, (zclearTagIf (znewCap, (znot zsuccess))));
      ZRETIRE_SUCCESS
    end
  | ZCIncAddrImmediate ((zcd, zcs1, zimm)) ->
    let zcs1_val = (zrC_bits zcs1) in
    let zimmBits = (zsign_extend ((Big_int.of_int (32)), zimm)) in
    let zinCap = (zclearTagIfSealed zcs1_val) in
    let (zsuccess, znewCap) = (zincCapAddr (zinCap, zimmBits)) in
    begin
      zwC_bits (zcd, (zclearTagIf (znewCap, (znot zsuccess))));
      ZRETIRE_SUCCESS
    end
  | ZCSetAddr ((zcd, zcs1, zrs2)) ->
    let zcs1_val = (zrC_bits zcs1) in
    let zrs2_val = (zrX_bits zrs2) in
    let zinCap = (zclearTagIfSealed zcs1_val) in
    let (zrepresentable, znewCap) = (zsetCapAddr (zinCap, zrs2_val)) in
    begin
      zwC_bits (zcd, (zclearTagIf (znewCap, (znot zrepresentable))));
      ZRETIRE_SUCCESS
    end
  | ZCSetBounds ((zcd, zcs1, zrs2)) ->
    let zcs1_val = (zrC_bits zcs1) in
    let zrs2_val = (zrX_bits zrs2) in
    let znewBase = (zcs1_val.zaddress) in
    let znewLen = zrs2_val in
    let zinBounds = (zinCapBounds (zcs1_val, znewBase, (uint znewLen))) in
    let zinCap = (zclearTagIfSealed zcs1_val) in
    let (_, znewCap) = (zsetCapBounds (zinCap, znewBase, znewLen)) in
    begin
      zwC_bits (zcd, (zclearTagIf (znewCap, (znot zinBounds))));
      ZRETIRE_SUCCESS
    end
  | ZCSetBoundsImmediate ((zcd, zcs1, zuimm)) ->
    let zcs1_val = (zrC_bits zcs1) in
    let znewBase = (zcs1_val.zaddress) in
    let znewLen = (zzzero_extend ((Big_int.of_int (32)), zuimm)) in
    let zinBounds = (zinCapBounds (zcs1_val, znewBase, (uint znewLen))) in
    let zinCap = (zclearTagIfSealed zcs1_val) in
    let (_, znewCap) = (zsetCapBounds (zinCap, znewBase, znewLen)) in
    begin
      zwC_bits (zcd, (zclearTagIf (znewCap, (znot zinBounds))));
      ZRETIRE_SUCCESS
    end
  | ZCSetBoundsExact ((zcd, zcs1, zrs2)) ->
    let zcs1_val = (zrC_bits zcs1) in
    let zrs2_val = (zrX_bits zrs2) in
    let znewBase = (zcs1_val.zaddress) in
    let znewLen = (zrX_bits zrs2) in
    let zinBounds = (zinCapBounds (zcs1_val, znewBase, (uint znewLen))) in
    let zinCap = (zclearTagIfSealed zcs1_val) in
    let (zexact, znewCap) = (zsetCapBounds (zinCap, znewBase, znewLen)) in
    begin
      zwC_bits (zcd, (zclearTagIf (znewCap, (znot (zinBounds && zexact)))));
      ZRETIRE_SUCCESS
    end
  | ZCSetBoundsRoundDown ((zcd, zcs1, zrs2)) ->
    let zcs1_val = (zrC_bits zcs1) in
    let zrs2_val = (zrX_bits zrs2) in
    let znewBase = (zcs1_val.zaddress) in
    let znewLen = zrs2_val in
    let zinBounds = (zinCapBounds (zcs1_val, znewBase, (uint znewLen))) in
    let zinCap = (zclearTagIfSealed zcs1_val) in
    let znewCap = (zsetCapBoundsRoundDown (zinCap, znewBase, znewLen)) in
    begin
      zwC_bits (zcd, (zclearTagIf (znewCap, (znot zinBounds))));
      ZRETIRE_SUCCESS
    end
  | ZCClearTag ((zcd, zcs1)) ->
    let zcs1_val = (zrC_bits zcs1) in
    begin zwC_bits (zcd, (zclearTag zcs1_val)); ZRETIRE_SUCCESS end
  | ZCMove ((zcd, zcs1)) ->
    begin zwC_bits (zcd, (zrC_bits zcs1)); ZRETIRE_SUCCESS end
  | ZCRRL ((zrd, zrs1)) ->
    let zlen = (zrX_bits zrs1) in
    begin zwX_bits (zrd, (zgetRepresentableLength zlen)); ZRETIRE_SUCCESS end
  | ZCRAM ((zrd, zrs1)) ->
    let zlen = (zrX_bits zrs1) in
    begin
      zwX_bits (zrd, (zgetRepresentableAlignmentMask zlen));
      ZRETIRE_SUCCESS
    end
  | ZCTestSubset ((zrd, zcs1, zcs2)) ->
    let zcs1_val = (zrC_bits zcs1) in
    let zcs2_val = (zrC_bits zcs2) in
    let (zcs2_base, zcs2_top) = (zgetCapBounds zcs2_val) in
    let (zcs1_base, zcs1_top) = (zgetCapBounds zcs1_val) in
    let zcs2_perms = (zgetCapPerms zcs2_val) in
    let zcs1_perms = (zgetCapPerms zcs1_val) in
    let zresult = ((if (zneq_bool ((zcs1_val.ztag), (zcs2_val.ztag))) then [B0] else ((if (lt (zcs2_base, zcs1_base)) then [B0] else ((if (gt (zcs2_top, zcs1_top)) then [B0] else ((if (zneq_bits ((and_vec (zcs2_perms, zcs1_perms)), zcs2_perms)) then [B0] else [B1])))))))) in
    begin
      zwX_bits (zrd, (zzzero_extend ((Big_int.of_int (32)), zresult)));
      ZRETIRE_SUCCESS
    end
  | ZCSEQX ((zrd, zcs1, zcs2)) ->
    let zcs1_val = (zrC_bits zcs1) in
    let zcs2_val = (zrC_bits zcs2) in
    begin
      zwX_bits (zrd, (zzzero_extend ((Big_int.of_int (32)), (zbool_to_bits ((fun (x, y) -> x = y) (zcs1_val, zcs2_val))))));
      ZRETIRE_SUCCESS
    end
  | ZCSeal ((zcd, zcs1, zcs2)) ->
    let zcs1_val = (zrC_bits zcs1) in
    let zcs2_val = (zrC_bits zcs2) in
    let zcs2_addr = (uint (zcs2_val.zaddress)) in
    let (zcs2_base, zcs2_top) = (zgetCapBounds zcs2_val) in
    let zisPermittedOtype = ((if (zcs1_val.zpermit_execute) then (begin
      match zcs2_addr with
      | zl__12 when (eq_int (zl__12, (Big_int.of_int (1)))) -> true
      | zl__13 when (eq_int (zl__13, (Big_int.of_int (2)))) -> true
      | zl__14 when (eq_int (zl__14, (Big_int.of_int (3)))) -> true
      | zl__15 when (eq_int (zl__15, (Big_int.of_int (4)))) -> true
      | zl__16 when (eq_int (zl__16, (Big_int.of_int (5)))) -> true
      | zl__17 when (eq_int (zl__17, (Big_int.of_int (6)))) -> true
      | zl__18 when (eq_int (zl__18, (Big_int.of_int (7)))) -> true
      | _ -> false
    end) else ((lt ((Big_int.of_int (8)), zcs2_addr)) && (lteq (zcs2_addr, (Big_int.of_int (15))))))) in
    let zpermitted = ((zcs2_val.ztag) && ((znot (zisCapSealed zcs2_val)) && ((zcs2_val.zpermit_seal) && ((gteq (zcs2_addr, zcs2_base)) && ((lt (zcs2_addr, zcs2_top)) && zisPermittedOtype))))) in
    let zinCap = (zclearTagIfSealed zcs1_val) in
    let znewCap = (zsealCap (zinCap, (zto_bits (zcap_otype_width, zcs2_addr)))) in
    begin
      zwC_bits (zcd, (zclearTagIf (znewCap, (znot zpermitted))));
      ZRETIRE_SUCCESS
    end
  | ZCUnseal ((zcd, zcs1, zcs2)) ->
    let zcs1_val = (zrC_bits zcs1) in
    let zcs2_val = (zrC_bits zcs2) in
    let zcs2_addr = (uint (zcs2_val.zaddress)) in
    let zpermitted = ((zcs2_val.ztag) && ((zisCapSealed zcs1_val) && ((znot (zisCapSealed zcs2_val)) && ((zinCapBounds (zcs2_val, (zzzero_extend ((Big_int.of_int (32)), (zcs1_val.zotype))), (Big_int.of_int (1)))) && (zcs2_val.zpermit_unseal))))) in
    let znew_global = ((zcs1_val.zglobal) && (zcs2_val.zglobal)) in
    let znewCap = ({(zunsealCap zcs1_val) with ZCapability.zglobal = znew_global}) in
    begin
      zwC_bits (zcd, (zclearTagIf (znewCap, (znot zpermitted))));
      ZRETIRE_SUCCESS
    end
  | ZLoadCapImm ((zcd, zcs1, zimm)) ->
    let zoffset = (zsign_extend ((Big_int.of_int (32)), zimm)) in
    let zauth_val = (zrC_bits zcs1) in
    let zvaddrBits = (add_vec ((zauth_val.zaddress), zoffset)) in
    (if (znot (zauth_val.ztag)) then (begin
      zhandle_cheri_reg_exception (ZCapEx_TagViolation, zcs1);
      ZRETIRE_FAIL
    end) else ((if (zisCapSealed zauth_val) then (begin
      zhandle_cheri_reg_exception (ZCapEx_SealViolation, zcs1);
      ZRETIRE_FAIL
    end) else ((if (znot (zauth_val.zpermit_load)) then (begin
      zhandle_cheri_reg_exception (ZCapEx_PermitLoadViolation, zcs1);
      ZRETIRE_FAIL
    end) else ((if (znot (zinCapBounds (zauth_val, zvaddrBits, zcap_sizze))) then (begin
      zhandle_cheri_reg_exception (ZCapEx_BoundsViolation, zcs1);
      ZRETIRE_FAIL
    end) else ((if (znot (zis_aligned_addr (zvaddrBits, zcap_sizze))) then (begin
      zhandle_mem_exception (zvaddrBits, (ZE_Load_Addr_Align ()));
      ZRETIRE_FAIL
    end) else (begin
      match (ztranslateAddr (zvaddrBits, (ZRead ZCap))) with
      | ZTR_Failure ((ZE_Extension (_), _)) ->
        zinternal_error ("src/cheri_insts.sail", (Big_int.of_int (877)), "unexpected cheri exception for cap load")
      | ZTR_Failure ((ze, _)) ->
        begin zhandle_mem_exception (zvaddrBits, ze); ZRETIRE_FAIL end
      | ZTR_Address ((zaddr, zptw_info)) ->
        let zc = (zmem_read_cap (zaddr, false, false, false)) in
        begin
          match zc with
          | ZMemValue (zv) ->
            let zcr = ref (zv : ZCapability.zCapability) in
            begin
              (if (((fun (x, y) -> x = y) ((zptw_info.zptw_lc), ZPTW_LC_CLEAR)) || (znot (zauth_val.zpermit_load_store_cap))) then ((zcr := ({!zcr with ZCapability.ztag = false}))) else ());
              (if ((!zcr.ztag) && (znot (zauth_val.zpermit_load_global))) then (begin
                (zcr := ({!zcr with ZCapability.zglobal = false}));
                (if (znot (zisCapSealed !zcr)) then ((zcr := ({!zcr with ZCapability.zpermit_load_global = false}))) else ())
              end) else ());
              (if ((!zcr.ztag) && ((znot (zauth_val.zpermit_load_mutable)) && (znot (zisCapSealed !zcr)))) then (begin
                (zcr := ({!zcr with ZCapability.zpermit_store = false}));
                (zcr := ({!zcr with ZCapability.zpermit_load_mutable = false}))
              end) else ());
              let zisSealingCap = ((!zcr.zpermit_seal) || ((!zcr.zpermit_unseal) || (!zcr.zperm_user0))) in
              begin
                (if ((!zcr.ztag) && (znot zisSealingCap)) then (let zbase = (zgetCapBaseBits !zcr) in
                let zgranule_addr = (zalign_down (zlog2_revocation_granule_sizze, zbase)) in
                let zrevoked = (zmem_read_cap_revoked zgranule_addr) in
                (zcr := ({!zcr with ZCapability.ztag = (!zcr.ztag) && (znot zrevoked)}))) else ());
                zwC_bits (zcd, !zcr);
                ZRETIRE_SUCCESS
              end
            end
          | ZMemException (ze) ->
            begin zhandle_mem_exception (zvaddrBits, ze); ZRETIRE_FAIL end
        end
    end))))))))))
  | ZStoreCapImm ((zcs2, zcs1, zimm)) ->
    let zoffset = (zsign_extend ((Big_int.of_int (32)), zimm)) in
    let zauth_val = (zrC_bits zcs1) in
    let zvaddrBits = (add_vec ((zauth_val.zaddress), zoffset)) in
    let zcs2_val = (zrC_bits zcs2) in
    (if (znot (zauth_val.ztag)) then (begin
      zhandle_cheri_reg_exception (ZCapEx_TagViolation, zcs1);
      ZRETIRE_FAIL
    end) else ((if (zisCapSealed zauth_val) then (begin
      zhandle_cheri_reg_exception (ZCapEx_SealViolation, zcs1);
      ZRETIRE_FAIL
    end) else ((if (znot (zauth_val.zpermit_store)) then (begin
      zhandle_cheri_reg_exception (ZCapEx_PermitStoreViolation, zcs1);
      ZRETIRE_FAIL
    end) else ((if ((znot (zauth_val.zpermit_load_store_cap)) && (zcs2_val.ztag)) then (begin
      zhandle_cheri_reg_exception (ZCapEx_PermitStoreCapViolation, zcs1);
      ZRETIRE_FAIL
    end) else ((if (znot (zinCapBounds (zauth_val, zvaddrBits, zcap_sizze))) then (begin
      zhandle_cheri_reg_exception (ZCapEx_BoundsViolation, zcs1);
      ZRETIRE_FAIL
    end) else ((if (znot (zis_aligned_addr (zvaddrBits, zcap_sizze))) then (begin
      zhandle_mem_exception (zvaddrBits, (ZE_SAMO_Addr_Align ()));
      ZRETIRE_FAIL
    end) else (begin
      match (ztranslateAddr (zvaddrBits, (ZWrite ((if (zcs2_val.ztag) then ZCap else ZData))))) with
      | ZTR_Failure ((ze, _)) ->
        begin zhandle_mem_exception (zvaddrBits, ze); ZRETIRE_FAIL end
      | ZTR_Address ((zaddr, _)) ->
        let zeares = (zmem_write_ea_cap (zaddr, false, false, false)) in
        begin
          match zeares with
          | ZMemException (ze) ->
            begin zhandle_mem_exception (zvaddrBits, ze); ZRETIRE_FAIL end
          | ZMemValue (_) ->
            let zstored_val = (zclearTagIf (zcs2_val, ((znot (zauth_val.zpermit_store_local_cap)) && (znot (zcs2_val.zglobal))))) in
            let zres = (zmem_write_cap (zaddr, zstored_val, false, false, false)) in
            begin
              match zres with
              | ZMemValue (zp0z3) when (eq_bool (zp0z3, true)) ->
                ZRETIRE_SUCCESS
              | ZMemValue (zp0z3) when (eq_bool (zp0z3, false)) ->
                zinternal_error ("src/cheri_insts.sail", (Big_int.of_int (986)), "store got false from mem_write_value")
              | ZMemException (ze) ->
                begin zhandle_mem_exception (zvaddrBits, ze); ZRETIRE_FAIL end
            end
        end
    end))))))))))))
  | ZC_CLC ((zcdc, zcsc1, zuimm)) ->
    let zcd = (zcreg2reg_idx zcdc) in
    let zcs1 = (zcreg2reg_idx zcsc1) in
    zexecute (ZLoadCapImm ((fun (v0, v1, v2) -> (v2, v1, v0)) (zzzero_extend ((Big_int.of_int (12)), zuimm), zcs1, zcd)))
  | ZC_CLCSP ((zcd, zuimm)) ->
    zexecute (ZLoadCapImm ((fun (v0, v1, v2) -> (v2, v1, v0)) (zzzero_extend ((Big_int.of_int (12)), zuimm), zsp, zcd)))
  | ZC_CSC ((zcsc2, zcsc1, zuimm)) ->
    let zcs2 = (zcreg2reg_idx zcsc2) in
    let zcs1 = (zcreg2reg_idx zcsc1) in
    zexecute (ZStoreCapImm ((fun (v0, v1, v2) -> (v2, v1, v0)) (zzzero_extend ((Big_int.of_int (12)), zuimm), zcs1, zcs2)))
  | ZC_CSCSP ((zcs2, zuimm)) ->
    zexecute (ZStoreCapImm ((fun (v0, v1, v2) -> (v2, v1, v0)) (zzzero_extend ((Big_int.of_int (12)), zuimm), zsp, zcs2)))
  | ZC_CIncAddr16CSP (znzzimm) ->
    zexecute (ZCIncAddrImmediate ((fun (v0, v1, v2) -> (v2, v1, v0)) (zsign_extend ((Big_int.of_int (12)), znzzimm), zsp, zsp)))
  | ZC_CIncAddr4CSPN ((zcdc, znzzuimm)) ->
    let zcd = (zcreg2reg_idx zcdc) in
    zexecute (ZCIncAddrImmediate ((fun (v0, v1, v2) -> (v2, v1, v0)) (zzzero_extend ((Big_int.of_int (12)), znzzuimm), zsp, zcd)))
  | ZC_CJALR (zcs1) ->
    zexecute (ZCJALR ((fun (v0, v1, v2) -> (v2, v1, v0)) (zra, zcs1, zzzeros_implicit (Big_int.of_int (12)))))
  | ZC_CJR (zcs1) ->
    zexecute (ZCJALR ((fun (v0, v1, v2) -> (v2, v1, v0)) (zzzreg, zcs1, zzzeros_implicit (Big_int.of_int (12)))))
  | ZC_CJAL (zimm) ->
    zexecute (ZCJAL ((fun (v0, v1) -> (v1, v0)) (zra, zsign_extend ((Big_int.of_int (21)), zimm))))
  | ZNOT_CAPMODE (zs) ->
    begin
      zinternal_error ("src/cheri_insts_end.sail", (Big_int.of_int (68)), (concat_str ("should be unreachable: execute(NOT_CAPMODE(", (concat_str ((string_of_bits zs), "))")))));
      ZRETIRE_FAIL
    end
  | ZNOT_C_CAPMODE (zs) ->
    begin
      zinternal_error ("src/cheri_insts_end.sail", (Big_int.of_int (77)), (concat_str ("should be unreachable: execute(NOT_C_CAPMODE(", (concat_str ((string_of_bits zs), "))")))));
      ZRETIRE_FAIL
    end
  | ZRISCV_JALR ((zimm, zrs1, zrd)) ->
    let zt = (add_vec ((zrX_bits zrs1), (zsign_extend ((Big_int.of_int (32)), zimm)))) in
    begin
      match (zext_control_check_addr zt) with
      | ZExt_ControlAddr_Error (ze) ->
        begin zext_handle_control_check_error ze; ZRETIRE_FAIL end
      | ZExt_ControlAddr_OK (zaddr) ->
        let ztarget = (update (zaddr, Big_int.zero, B0)) in
        (if ((zbit_to_bool (access (ztarget, (Big_int.of_int (1))))) && (znot (zhaveRVC ()))) then (begin
          zhandle_mem_exception (ztarget, (ZE_Fetch_Addr_Align ()));
          ZRETIRE_FAIL
        end) else (begin
          zwX_bits (zrd, (zget_next_pc ()));
          zset_next_pc ztarget;
          ZRETIRE_SUCCESS
        end))
    end
  | ZILLEGAL (zs) -> begin zhandle_illegal (); ZRETIRE_FAIL end
  | ZC_ILLEGAL (zs) -> begin zhandle_illegal (); ZRETIRE_FAIL end)

and zassembly_backwards (zargz3 : (string)) : zast = sail_call (fun r ->
  begin
    match zargz3 with
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | "fence.i" -> ZFENCEI ()
    | "ecall" -> ZECALL ()
    | "mret" -> ZMRET ()
    | "sret" -> ZSRET ()
    | "ebreak" -> ZEBREAK ()
    | "wfi" -> ZWFI ()
    | _ -> exit 0
    | "c.nop" -> ZC_NOP ()
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | "c.ebreak" -> ZC_EBREAK ()
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
  end)

and zassembly_forwards_matches (zargz3 : (zast)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | ZUTYPE ((zimm, zrd, zop)) -> true
    | ZRISCV_JAL ((zimm, zrd)) -> true
    | ZRISCV_JALR ((zimm, zrs1, zrd)) -> true
    | ZBTYPE ((zimm, zrs2, zrs1, zop)) -> true
    | ZITYPE ((zimm, zrs1, zrd, zop)) -> true
    | ZSHIFTIOP ((zshamt, zrs1, zrd, zop)) -> true
    | ZRTYPE ((zrs2, zrs1, zrd, zop)) -> true
    | ZLOAD ((zimm, zrs1, zrd, zis_unsigned, zsizze, zaq, zrl)) -> true
    | ZSTORE ((zimm, zrs2, zrs1, zsizze, zaq, zrl)) -> true
    | ZADDIW ((zimm, zrs1, zrd)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZRTYPEW ((zrs2, zrs1, zrd, zop)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZSHIFTIWOP ((zshamt, zrs1, zrd, zop)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZFENCE ((zpred, zsucc)) -> true
    | ZFENCE_TSO ((zpred, zsucc)) -> true
    | ZFENCEI (()) -> true
    | ZECALL (()) -> true
    | ZMRET (()) -> true
    | ZSRET (()) -> true
    | ZEBREAK (()) -> true
    | ZWFI (()) -> true
    | ZSFENCE_VMA ((zrs1, zrs2)) -> true
    | ZC_NOP (()) -> true
    | ZC_ADDI4SPN ((zrdc, znzzimm)) when (zneq_bits (znzzimm, [B0; B0; B0; B0; B0; B0; B0; B0])) ->
      true
    | ZC_LW ((zuimm, zrsc, zrdc)) -> true
    | ZC_LD ((zuimm, zrsc, zrdc)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZC_SW ((zuimm, zrsc1, zrsc2)) -> true
    | ZC_SD ((zuimm, zrsc1, zrsc2)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZC_ADDI ((znzzi, zrsd)) when ((zneq_bits (znzzi, [B0; B0; B0; B0; B0; B0])) && (zneq_bits (zrsd, zzzreg))) ->
      true
    | ZC_JAL (zimm) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) ->
      true
    | ZC_ADDIW ((zimm, zrsd)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZC_LI ((zimm, zrd)) when (zneq_bits (zrd, zzzreg)) -> true
    | ZC_ADDI16SP (zimm) when (zneq_bits (zimm, [B0; B0; B0; B0; B0; B0])) ->
      true
    | ZC_LUI ((zimm, zrd)) when ((zneq_bits (zrd, zzzreg)) && ((zneq_bits (zrd, zsp)) && (zneq_bits (zimm, [B0; B0; B0; B0; B0; B0])))) ->
      true
    | ZC_SRLI ((zshamt, zrsd)) when (zneq_bits (zshamt, [B0; B0; B0; B0; B0; B0])) ->
      true
    | ZC_SRAI ((zshamt, zrsd)) when (zneq_bits (zshamt, [B0; B0; B0; B0; B0; B0])) ->
      true
    | ZC_ANDI ((zimm, zrsd)) -> true
    | ZC_SUB ((zrsd, zrs2)) -> true
    | ZC_XOR ((zrsd, zrs2)) -> true
    | ZC_OR ((zrsd, zrs2)) -> true
    | ZC_AND ((zrsd, zrs2)) -> true
    | ZC_SUBW ((zrsd, zrs2)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZC_ADDW ((zrsd, zrs2)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZC_J (zimm) -> true
    | ZC_BEQZ ((zimm, zrs)) -> true
    | ZC_BNEZ ((zimm, zrs)) -> true
    | ZC_SLLI ((zshamt, zrsd)) when ((zneq_bits (zshamt, [B0; B0; B0; B0; B0; B0])) && (zneq_bits (zrsd, zzzreg))) ->
      true
    | ZC_LWSP ((zuimm, zrd)) when (zneq_bits (zrd, zzzreg)) -> true
    | ZC_LDSP ((zuimm, zrd)) when ((zneq_bits (zrd, zzzreg)) && (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64))))) ->
      true
    | ZC_SWSP ((zuimm, zrs2)) -> true
    | ZC_SDSP ((zuimm, zrs2)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZC_JR (zrs1) when (zneq_bits (zrs1, zzzreg)) -> true
    | ZC_JALR (zrs1) when (zneq_bits (zrs1, zzzreg)) -> true
    | ZC_MV ((zrd, zrs2)) when ((zneq_bits (zrd, zzzreg)) && (zneq_bits (zrs2, zzzreg))) ->
      true
    | ZC_EBREAK (()) -> true
    | ZC_ADD ((zrsd, zrs2)) when ((zneq_bits (zrsd, zzzreg)) && (zneq_bits (zrs2, zzzreg))) ->
      true
    | ZMUL ((zrs2, zrs1, zrd, zhigh, zsigned1, zsigned2)) -> true
    | ZDIV ((zrs2, zrs1, zrd, zs)) -> true
    | ZREM ((zrs2, zrs1, zrd, zs)) -> true
    | ZMULW ((zrs2, zrs1, zrd)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZDIVW ((zrs2, zrs1, zrd, zs)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZREMW ((zrs2, zrs1, zrd, zs)) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (64)))) ->
      true
    | ZCSR ((zcsr, zrs1, zrd, zp0z3, zop)) when (eq_bool (zp0z3, true)) -> true
    | ZCSR ((zcsr, zrs1, zrd, zp0z3, zop)) when (eq_bool (zp0z3, false)) -> true
    | ZC_NOP_HINT (zimm) -> true
    | ZC_ADDI_HINT (zrsd) when (zneq_bits (zrsd, zzzreg)) -> true
    | ZC_LI_HINT (zimm) -> true
    | ZC_LUI_HINT (zimm) when (zneq_bits (zimm, [B0; B0; B0; B0; B0; B0])) ->
      true
    | ZC_MV_HINT (zrs2) when (zneq_bits (zrs2, zzzreg)) -> true
    | ZC_ADD_HINT (zrs2) when (zneq_bits (zrs2, zzzreg)) -> true
    | ZC_SLLI_HINT ((zshamt, zrsd)) when ((eq_list (zshamt, [B0; B0; B0; B0; B0; B0])) || (eq_list (zrsd, zzzreg))) ->
      true
    | ZC_SRLI_HINT (zrsd) -> true
    | ZC_SRAI_HINT (zrsd) -> true
    | ZFENCE_RESERVED ((zfm, zpred, zsucc, zrs, zrd)) when (((zneq_bits (zfm, [B0; B0; B0; B0])) && (zneq_bits (zfm, [B1; B0; B0; B0]))) || ((zneq_bits (zrs, [B0; B0; B0; B0; B0])) || (zneq_bits (zrd, [B0; B0; B0; B0; B0])))) ->
      true
    | ZFENCEI_RESERVED ((zimm, zrs, zrd)) when ((zneq_bits (zimm, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0; B0])) || ((zneq_bits (zrs, zzzreg)) || (zneq_bits (zrd, zzzreg)))) ->
      true
    | ZAUICGP ((zimm, zcd)) -> true
    | ZAUIPCC ((zimm, zcd)) -> true
    | ZCGetPerm ((zrd, zcs1)) -> true
    | ZCGetType ((zrd, zcs1)) -> true
    | ZCGetBase ((zrd, zcs1)) -> true
    | ZCGetLen ((zrd, zcs1)) -> true
    | ZCGetTag ((zrd, zcs1)) -> true
    | ZCGetAddr ((zrd, zcs1)) -> true
    | ZCGetHigh ((zrd, zcs1)) -> true
    | ZCGetTop ((zrd, zcs1)) -> true
    | ZCMove ((zcd, zcs1)) -> true
    | ZCClearTag ((zcd, zcs1)) -> true
    | ZCRRL ((zrd, zrs1)) -> true
    | ZCRAM ((zrd, zrs1)) -> true
    | ZCSeal ((zcd, zcs1, zcs2)) -> true
    | ZCUnseal ((zcd, zcs1, zcs2)) -> true
    | ZCAndPerm ((zcd, zcs1, zrs2)) -> true
    | ZCSetAddr ((zcd, zcs1, zrs2)) -> true
    | ZCSetHigh ((zcd, zcs1, zrs2)) -> true
    | ZCIncAddr ((zcd, zcs1, zrs2)) -> true
    | ZCSetBounds ((zcd, zcs1, zrs2)) -> true
    | ZCSetBoundsExact ((zcd, zcs1, zrs2)) -> true
    | ZCSetBoundsRoundDown ((zcd, zcs1, zrs2)) -> true
    | ZCSub ((zrd, zcs1, zcs2)) -> true
    | ZCTestSubset ((zrd, zcs1, zcs2)) -> true
    | ZCSpecialRW ((zcd, zscr, zcs1)) -> true
    | ZCIncAddrImmediate ((zcd, zcs1, zimm12)) -> true
    | ZCSetBoundsImmediate ((zcd, zcs1, zimm12)) -> true
    | ZCSEQX ((zrd, zcs1, zcs2)) -> true
    | ZLoadCapImm ((zcd, zrs1, zoffset)) -> true
    | ZStoreCapImm ((zcs2, zrs1, zoffset)) -> true
    | ZAUIPCC ((zimm, zcd)) -> true
    | ZCJALR ((zimm, zcs1, zcd)) -> true
    | ZCJAL ((zimm, zcd)) -> true
    | ZC_CLC ((zcdc, zcsc1, zuimm)) -> true
    | ZC_CLCSP ((zcd, zuimm)) -> true
    | ZC_CSC ((zcsc2, zcsc1, zuimm)) -> true
    | ZC_CSCSP ((zcs2, zuimm)) -> true
    | ZC_CIncAddr16CSP (znzzimm) when (zneq_bits (znzzimm, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      true
    | ZC_CIncAddr4CSPN ((zcdc, znzzuimm)) when (zneq_bits (znzzuimm, [B0; B0; B0; B0; B0; B0; B0; B0; B0; B0])) ->
      true
    | ZC_CJALR (zcs1) when (zneq_bits (zcs1, zzzreg)) -> true
    | ZC_CJR (zcs1) when (zneq_bits (zcs1, zzzreg)) -> true
    | ZC_CJAL (zimm) when (eq_int ((Big_int.of_int (32)), (Big_int.of_int (32)))) ->
      true
    | ZILLEGAL (zs) -> true
    | ZC_ILLEGAL (zs) -> true
    | _ -> false
  end)

and zassembly_backwards_matches (zargz3 : (string)) : bool = sail_call (fun r ->
  begin
    match zargz3 with
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | "fence.i" -> true
    | "ecall" -> true
    | "mret" -> true
    | "sret" -> true
    | "ebreak" -> true
    | "wfi" -> true
    | _ -> exit 0
    | "c.nop" -> true
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | "c.ebreak" -> true
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> exit 0
    | _ -> false
  end)

type  zFetchResult =
  | ZF_Ext_Error of zext_fetch_addr_error
  | ZF_Base of zword
  | ZF_RVC of zhalf
  | ZF_Error of (zExceptionType * zxlenbits);;

let string_of_zFetchResult _ = "VARIANT";;

let rec zext_init (() : (unit)) : unit = sail_call (fun r ->
  begin
    z_set_Misa_X (zmisa, [B1]);
    z_set_ccsr_d (zmccsr, [B1]);
    z_set_ccsr_e (zmccsr, [B1]);
    z_set_ccsr_d (zsccsr, [B1]);
    z_set_ccsr_e (zsccsr, [B1]);
    z_set_ccsr_d (zuccsr, [B1]);
    z_set_ccsr_e (zuccsr, [B1])
  end)

and zext_fetch_hook (zf : (zFetchResult)) : zFetchResult = sail_call (fun r ->
  zf)

and zext_pre_step_hook (() : (unit)) : unit = sail_call (fun r -> ())

and zext_post_step_hook (() : (unit)) : unit = sail_call (fun r -> ())

and zext_decode_compressed (zbv : ((bit) list)) : zast = sail_call (fun r ->
  begin
    match (zencdec_compressed_capmode_backwards zbv) with
    | ZNOT_C_CAPMODE (_) -> zencdec_compressed_backwards zbv
    | zC_CAPMODE_AST -> zC_CAPMODE_AST
  end)

and zext_decode (zbv : ((bit) list)) : zast = sail_call (fun r ->
  begin
    match (zencdec_capmode_backwards zbv) with
    | ZNOT_CAPMODE (_) -> zencdec_backwards zbv
    | zCAPMODE_AST -> zCAPMODE_AST
  end)

and zisRVC (zh : ((bit) list)) : bool = sail_call (fun r ->
  znot (eq_list ((subrange (zh, (Big_int.of_int (1)), Big_int.zero)), [B1; B1])))

and zfetch (() : (unit)) : zFetchResult = sail_call (fun r ->
  begin
    match (zext_fetch_check_pc (!zPC, !zPC)) with
    | ZExt_FetchAddr_Error (ze) -> ZF_Ext_Error ze
    | ZExt_FetchAddr_OK (zuse_pc) ->
      (if ((zneq_anything ((access (zuse_pc, Big_int.zero)), B0)) || ((zneq_anything ((access (zuse_pc, (Big_int.of_int (1)))), B0)) && (znot (zhaveRVC ())))) then (ZF_Error ((fun (v0, v1) -> (v1, v0)) (!zPC, ZE_Fetch_Addr_Align ()))) else (begin
        match (ztranslateAddr (zuse_pc, (ZExecute ()))) with
        | ZTR_Failure ((ze, _)) ->
          ZF_Error ((fun (v0, v1) -> (v1, v0)) (!zPC, ze))
        | ZTR_Address ((zppclo, _)) ->
          begin
            match (zmem_read ((ZExecute ()), zppclo, (Big_int.of_int (2)), false, false, false)) with
            | ZMemException (ze) ->
              ZF_Error ((fun (v0, v1) -> (v1, v0)) (!zPC, ze))
            | ZMemValue (zilo) ->
              (if (zisRVC zilo) then (ZF_RVC zilo) else (let zPC_hi = ref ((add_vec_int (!zPC, (Big_int.of_int (2)))) : (bit) list) in
              begin
                match (zext_fetch_check_pc (!zPC, !zPC_hi)) with
                | ZExt_FetchAddr_Error (ze) -> ZF_Ext_Error ze
                | ZExt_FetchAddr_OK (zuse_pc_hi) ->
                  begin
                    match (ztranslateAddr (zuse_pc_hi, (ZExecute ()))) with
                    | ZTR_Failure ((ze, _)) ->
                      ZF_Error ((fun (v0, v1) -> (v1, v0)) (!zPC_hi, ze))
                    | ZTR_Address ((zppchi, _)) ->
                      begin
                        match (zmem_read ((ZExecute ()), zppchi, (Big_int.of_int (2)), false, false, false)) with
                        | ZMemException (ze) ->
                          ZF_Error ((fun (v0, v1) -> (v1, v0)) (!zPC_hi, ze))
                        | ZMemValue (zihi) -> ZF_Base (append (zihi, zilo))
                      end
                  end
              end))
          end
      end))
  end)

and ztry_execute (zx : (zast)) : zRetired = sail_call (fun r ->
  begin
    try (zexecute zx) with
    | ZError_not_rv32e_register (()) ->
      begin zhandle_illegal (); ZRETIRE_FAIL end
    | ze -> raise ze
  end)

and zstep (zstep_no : (Big_int.num)) : bool = sail_call (fun r ->
  begin
    zext_pre_step_hook ();
    (zminstret_increment := (eq_list ((z_get_Counterin_IR !zmcountinhibit), [B0])));
    let (zretired, zstepped) = (begin
      match (zdispatchInterrupt !zcur_privilege) with
      | ZSome ((zintr, zpriv)) ->
        begin
          (if ((Platform.get_config_print_instr ()) || (Platform.get_config_print_exception ())) then (print_endline (concat_str ("Handling interrupt PC=", (concat_str ((string_of_bits !zPC), (concat_str (" IRQ=", (string_of_bits (zinterruptType_to_bits zintr))))))))) else ());
          zhandle_interrupt (zintr, zpriv);
          ((fun (v0, v1) -> (v1, v0)) (false, ZRETIRE_FAIL))
        end
      | ZNone (()) ->
        let zf = (zext_fetch_hook (zfetch ())) in
        begin
          match zf with
          | ZF_Ext_Error (ze) ->
            begin
              zext_handle_fetch_check_error ze;
              ((fun (v0, v1) -> (v1, v0)) (false, ZRETIRE_FAIL))
            end
          | ZF_Error ((ze, zaddr)) ->
            begin
              zhandle_mem_exception (zaddr, ze);
              ((fun (v0, v1) -> (v1, v0)) (false, ZRETIRE_FAIL))
            end
          | ZF_RVC (zh) ->
            begin
              (zinstbits := (zzzero_extend ((Big_int.of_int (32)), zh)));
              let zast = (zext_decode_compressed zh) in
              begin
                (if (Platform.get_config_print_instr ()) then (Platform.print_instr (concat_str ("[", (concat_str ((dec_str zstep_no), (concat_str ("] [", (concat_str ((zprivLevel_to_str !zcur_privilege), (concat_str ("]: ", (concat_str ((string_of_bits !zPC), (concat_str (" (", (concat_str ((string_of_bits zh), (concat_str (") ", (zprint_insn zast)))))))))))))))))))) else ());
                (if (zhaveRVC ()) then (begin
                  (znextPC := (add_vec_int (!zPC, (Big_int.of_int (2)))));
                  ((fun (v0, v1) -> (v1, v0)) (true, ztry_execute zast))
                end) else (begin
                  zhandle_illegal ();
                  ((fun (v0, v1) -> (v1, v0)) (true, ZRETIRE_FAIL))
                end))
              end
            end
          | ZF_Base (zw) ->
            begin
              (zinstbits := (zzzero_extend ((Big_int.of_int (32)), zw)));
              let zast = (zext_decode zw) in
              begin
                (if (Platform.get_config_print_instr ()) then (Platform.print_instr (concat_str ("[", (concat_str ((dec_str zstep_no), (concat_str ("] [", (concat_str ((zprivLevel_to_str !zcur_privilege), (concat_str ("]: ", (concat_str ((string_of_bits !zPC), (concat_str (" (", (concat_str ((string_of_bits zw), (concat_str (") ", (zprint_insn zast)))))))))))))))))))) else ());
                (znextPC := (add_vec_int (!zPC, (Big_int.of_int (4)))));
                ((fun (v0, v1) -> (v1, v0)) (true, ztry_execute zast))
              end
            end
        end
    end) in
    begin
      ztick_pc ();
      begin
        match zretired with
        | ZRETIRE_SUCCESS -> zretire_instruction ()
        | ZRETIRE_FAIL -> ()
      end;
      zext_post_step_hook ();
      zstepped
    end
  end)

and zloop (() : (unit)) : unit = sail_call (fun r ->
  let zinsns_per_tick = (Platform.insns_per_tick ()) in
  let zi = ref (Big_int.zero : Big_int.num) in
  let zstep_no = ref (Big_int.zero : Big_int.num) in
  let rec loop () =
    if (znot !zhtif_done) then ((let zstepped = (zstep !zstep_no) in
    begin
      (if zstepped then ((zstep_no := (add_int (!zstep_no, (Big_int.of_int (1)))))) else ());
      (if !zhtif_done then (let zexit_val = (uint !zhtif_exit_code) in
      (if (eq_int (zexit_val, Big_int.zero)) then (print_endline "SUCCESS") else (print_int ("FAILURE: ", zexit_val)))) else (begin
        (zi := (add_int (!zi, (Big_int.of_int (1)))));
        (if (eq_int (!zi, zinsns_per_tick)) then (begin
          ztick_clock ();
          ztick_platform ();
          (zi := (Big_int.zero))
        end) else ())
      end))
    end); loop ()) else ()
  in
  loop ())

and zinit_model (() : (unit)) : unit = sail_call (fun r ->
  begin
    zinit_platform ();
    zinit_sys ();
    zinit_vmem ();
    zext_init ();
    zext_init_regs ()
  end)

and zinitializze_registers (() : (unit)) : unit = sail_call (fun r ->
  begin
    (zelen := (undefined_bitvector (Big_int.of_int (1))));
    (zvlen := (undefined_bitvector (Big_int.of_int (4))));
    (zPC := (undefined_bitvector (Big_int.of_int (32))));
    (znextPC := (undefined_bitvector (Big_int.of_int (32))));
    (zinstbits := (undefined_bitvector (Big_int.of_int (32))));
    (zx1 := (zundefined_Capability ()));
    (zx2 := (zundefined_Capability ()));
    (zx3 := (zundefined_Capability ()));
    (zx4 := (zundefined_Capability ()));
    (zx5 := (zundefined_Capability ()));
    (zx6 := (zundefined_Capability ()));
    (zx7 := (zundefined_Capability ()));
    (zx8 := (zundefined_Capability ()));
    (zx9 := (zundefined_Capability ()));
    (zx10 := (zundefined_Capability ()));
    (zx11 := (zundefined_Capability ()));
    (zx12 := (zundefined_Capability ()));
    (zx13 := (zundefined_Capability ()));
    (zx14 := (zundefined_Capability ()));
    (zx15 := (zundefined_Capability ()));
    (zcur_privilege := (zundefined_Privilege ()));
    (zcur_inst := (undefined_bitvector (Big_int.of_int (32))));
    (zmisa := (zundefined_Misa ()));
    (zmstatush := (zundefined_Mstatush ()));
    (zmstatus := (zundefined_Mstatus ()));
    (zmip := (zundefined_Minterrupts ()));
    (zmie := (zundefined_Minterrupts ()));
    (zmideleg := (zundefined_Minterrupts ()));
    (zmedeleg := (zundefined_Medeleg ()));
    (zmtvec := (zundefined_Mtvec ()));
    (zmcause := (zundefined_Mcause ()));
    (zmepc := (undefined_bitvector (Big_int.of_int (32))));
    (zmtval := (undefined_bitvector (Big_int.of_int (32))));
    (zmscratch := (undefined_bitvector (Big_int.of_int (32))));
    (zmcounteren := (zundefined_Counteren ()));
    (zscounteren := (zundefined_Counteren ()));
    (zmcountinhibit := (zundefined_Counterin ()));
    (zmcycle := (undefined_bitvector (Big_int.of_int (64))));
    (zmtime := (undefined_bitvector (Big_int.of_int (64))));
    (zminstret := (undefined_bitvector (Big_int.of_int (64))));
    (zminstret_increment := (undefined_bool ()));
    (zmvendorid := (undefined_bitvector (Big_int.of_int (32))));
    (zmimpid := (undefined_bitvector (Big_int.of_int (32))));
    (zmarchid := (undefined_bitvector (Big_int.of_int (32))));
    (zmhartid := (undefined_bitvector (Big_int.of_int (32))));
    (zsedeleg := (zundefined_Sedeleg ()));
    (zsideleg := (zundefined_Sinterrupts ()));
    (zstvec := (zundefined_Mtvec ()));
    (zsscratch := (undefined_bitvector (Big_int.of_int (32))));
    (zsepc := (undefined_bitvector (Big_int.of_int (32))));
    (zscause := (zundefined_Mcause ()));
    (zstval := (undefined_bitvector (Big_int.of_int (32))));
    (ztselect := (undefined_bitvector (Big_int.of_int (32))));
    (zmenvcfg := (zundefined_Envcfg ()));
    (zsenvcfg := (zundefined_Envcfg ()));
    (zvstart := (undefined_bitvector (Big_int.of_int (16))));
    (zvxsat := (undefined_bitvector (Big_int.of_int (1))));
    (zvxrm := (undefined_bitvector (Big_int.of_int (2))));
    (zvl := (undefined_bitvector (Big_int.of_int (32))));
    (zvlenb := (undefined_bitvector (Big_int.of_int (32))));
    (zvtype := (zundefined_Vtype ()));
    (zpmpcfg_n := (undefined_vector ((Big_int.of_int (64)), (zundefined_Pmpcfg_ent ()))));
    (zpmpaddr_n := (undefined_vector ((Big_int.of_int (64)), (undefined_bitvector (Big_int.of_int (32))))));
    (zmccsr := (zundefined_ccsr ()));
    (zsccsr := (zundefined_ccsr ()));
    (zuccsr := (zundefined_ccsr ()));
    (zMSHWMB := (undefined_bitvector (Big_int.of_int (32))));
    (zMSHWM := (undefined_bitvector (Big_int.of_int (32))));
    (zPCC := (zundefined_Capability ()));
    (znextPCC := (zundefined_Capability ()));
    (zMTCC := (zundefined_Capability ()));
    (zMTDC := (zundefined_Capability ()));
    (zMScratchC := (zundefined_Capability ()));
    (zMEPCC := (zundefined_Capability ()));
    (zvr0 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr1 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr2 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr3 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr4 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr5 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr6 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr7 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr8 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr9 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr10 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr11 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr12 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr13 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr14 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr15 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr16 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr17 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr18 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr19 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr20 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr21 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr22 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr23 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr24 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr25 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr26 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr27 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr28 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr29 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr30 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvr31 := (undefined_bitvector (Big_int.of_int (65536))));
    (zvcsr := (zundefined_Vcsr ()));
    (zutvec := (zundefined_Mtvec ()));
    (zuscratch := (undefined_bitvector (Big_int.of_int (32))));
    (zuepc := (undefined_bitvector (Big_int.of_int (32))));
    (zucause := (zundefined_Mcause ()));
    (zutval := (undefined_bitvector (Big_int.of_int (32))));
    (zmtimecmp := (undefined_bitvector (Big_int.of_int (64))));
    (zhtif_tohost := (undefined_bitvector (Big_int.of_int (64))));
    (zhtif_done := (undefined_bool ()));
    (zhtif_exit_code := (undefined_bitvector (Big_int.of_int (64))));
    (zhtif_cmd_write := (undefined_bit ()));
    (zhtif_payload_writes := (undefined_bitvector (Big_int.of_int (4))));
    (zsatp := (undefined_bitvector (Big_int.of_int (32))))
  end)

type generators = {
  gen_zast: generators -> zast;
  gen_zbits: generators -> int -> zbits;
  gen_zbitvector: generators -> int -> (bit) list;
  gen_zbool: generators -> bool;
  gen_zbop: generators -> zbop;
  gen_zcregidx: generators -> zcregidx;
  gen_zcsrop: generators -> zcsrop;
  gen_zhalf: generators -> zhalf;
  gen_ziop: generators -> ziop;
  gen_zregidx: generators -> zregidx;
  gen_zrop: generators -> zrop;
  gen_zropw: generators -> zropw;
  gen_zscreg: generators -> zscreg;
  gen_zsop: generators -> zsop;
  gen_zsopw: generators -> zsopw;
  gen_zunit: generators -> unit;
  gen_zuop: generators -> zuop;
  gen_zword: generators -> zword;
  gen_zword_width: generators -> zword_width
}

let rand_zast g =
  let c = rand_choice [
    (fun g -> ZILLEGAL (g.gen_zword g));
    (fun g -> ZC_ILLEGAL (g.gen_zhalf g));
    (fun g -> ZUTYPE (g.gen_zbits g 20, g.gen_zregidx g, g.gen_zuop g));
    (fun g -> ZRISCV_JAL (g.gen_zbits g 21, g.gen_zregidx g));
    (fun g -> ZRISCV_JALR (g.gen_zbits g 12, g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZBTYPE (g.gen_zbits g 13, g.gen_zregidx g, g.gen_zregidx g, g.gen_zbop g));
    (fun g -> ZITYPE (g.gen_zbits g 12, g.gen_zregidx g, g.gen_zregidx g, g.gen_ziop g));
    (fun g -> ZSHIFTIOP (g.gen_zbits g 6, g.gen_zregidx g, g.gen_zregidx g, g.gen_zsop g));
    (fun g -> ZRTYPE (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g, g.gen_zrop g));
    (fun g -> ZLOAD (g.gen_zbits g 12, g.gen_zregidx g, g.gen_zregidx g, g.gen_zbool g, g.gen_zword_width g, g.gen_zbool g, g.gen_zbool g));
    (fun g -> ZSTORE (g.gen_zbits g 12, g.gen_zregidx g, g.gen_zregidx g, g.gen_zword_width g, g.gen_zbool g, g.gen_zbool g));
    (fun g -> ZADDIW (g.gen_zbits g 12, g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZRTYPEW (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g, g.gen_zropw g));
    (fun g -> ZSHIFTIWOP (g.gen_zbits g 5, g.gen_zregidx g, g.gen_zregidx g, g.gen_zsopw g));
    (fun g -> ZFENCE (g.gen_zbits g 4, g.gen_zbits g 4));
    (fun g -> ZFENCE_TSO (g.gen_zbits g 4, g.gen_zbits g 4));
    (fun g -> ZFENCEI (g.gen_zunit g));
    (fun g -> ZECALL (g.gen_zunit g));
    (fun g -> ZMRET (g.gen_zunit g));
    (fun g -> ZSRET (g.gen_zunit g));
    (fun g -> ZEBREAK (g.gen_zunit g));
    (fun g -> ZWFI (g.gen_zunit g));
    (fun g -> ZSFENCE_VMA (g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZC_NOP (g.gen_zunit g));
    (fun g -> ZC_ADDI4SPN (g.gen_zcregidx g, g.gen_zbits g 8));
    (fun g -> ZC_LW (g.gen_zbits g 5, g.gen_zcregidx g, g.gen_zcregidx g));
    (fun g -> ZC_LD (g.gen_zbits g 5, g.gen_zcregidx g, g.gen_zcregidx g));
    (fun g -> ZC_SW (g.gen_zbits g 5, g.gen_zcregidx g, g.gen_zcregidx g));
    (fun g -> ZC_SD (g.gen_zbits g 5, g.gen_zcregidx g, g.gen_zcregidx g));
    (fun g -> ZC_ADDI (g.gen_zbits g 6, g.gen_zregidx g));
    (fun g -> ZC_JAL (g.gen_zbits g 11));
    (fun g -> ZC_ADDIW (g.gen_zbits g 6, g.gen_zregidx g));
    (fun g -> ZC_LI (g.gen_zbits g 6, g.gen_zregidx g));
    (fun g -> ZC_ADDI16SP (g.gen_zbits g 6));
    (fun g -> ZC_LUI (g.gen_zbits g 6, g.gen_zregidx g));
    (fun g -> ZC_SRLI (g.gen_zbits g 6, g.gen_zcregidx g));
    (fun g -> ZC_SRAI (g.gen_zbits g 6, g.gen_zcregidx g));
    (fun g -> ZC_ANDI (g.gen_zbits g 6, g.gen_zcregidx g));
    (fun g -> ZC_SUB (g.gen_zcregidx g, g.gen_zcregidx g));
    (fun g -> ZC_XOR (g.gen_zcregidx g, g.gen_zcregidx g));
    (fun g -> ZC_OR (g.gen_zcregidx g, g.gen_zcregidx g));
    (fun g -> ZC_AND (g.gen_zcregidx g, g.gen_zcregidx g));
    (fun g -> ZC_SUBW (g.gen_zcregidx g, g.gen_zcregidx g));
    (fun g -> ZC_ADDW (g.gen_zcregidx g, g.gen_zcregidx g));
    (fun g -> ZC_J (g.gen_zbits g 11));
    (fun g -> ZC_BEQZ (g.gen_zbits g 8, g.gen_zcregidx g));
    (fun g -> ZC_BNEZ (g.gen_zbits g 8, g.gen_zcregidx g));
    (fun g -> ZC_SLLI (g.gen_zbits g 6, g.gen_zregidx g));
    (fun g -> ZC_LWSP (g.gen_zbits g 6, g.gen_zregidx g));
    (fun g -> ZC_LDSP (g.gen_zbits g 6, g.gen_zregidx g));
    (fun g -> ZC_SWSP (g.gen_zbits g 6, g.gen_zregidx g));
    (fun g -> ZC_SDSP (g.gen_zbits g 6, g.gen_zregidx g));
    (fun g -> ZC_JR (g.gen_zregidx g));
    (fun g -> ZC_JALR (g.gen_zregidx g));
    (fun g -> ZC_MV (g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZC_EBREAK (g.gen_zunit g));
    (fun g -> ZC_ADD (g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZMUL (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g, g.gen_zbool g, g.gen_zbool g, g.gen_zbool g));
    (fun g -> ZDIV (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g, g.gen_zbool g));
    (fun g -> ZREM (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g, g.gen_zbool g));
    (fun g -> ZMULW (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZDIVW (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g, g.gen_zbool g));
    (fun g -> ZREMW (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g, g.gen_zbool g));
    (fun g -> ZCSR (g.gen_zbits g 12, g.gen_zregidx g, g.gen_zregidx g, g.gen_zbool g, g.gen_zcsrop g));
    (fun g -> ZC_NOP_HINT (g.gen_zbits g 6));
    (fun g -> ZC_ADDI_HINT (g.gen_zregidx g));
    (fun g -> ZC_LI_HINT (g.gen_zbits g 6));
    (fun g -> ZC_LUI_HINT (g.gen_zbits g 6));
    (fun g -> ZC_MV_HINT (g.gen_zregidx g));
    (fun g -> ZC_ADD_HINT (g.gen_zregidx g));
    (fun g -> ZC_SLLI_HINT (g.gen_zbits g 6, g.gen_zregidx g));
    (fun g -> ZC_SRLI_HINT (g.gen_zcregidx g));
    (fun g -> ZC_SRAI_HINT (g.gen_zcregidx g));
    (fun g -> ZFENCE_RESERVED (g.gen_zbits g 4, g.gen_zbits g 4, g.gen_zbits g 4, g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZFENCEI_RESERVED (g.gen_zbits g 12, g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZAUIPCC (g.gen_zbits g 20, g.gen_zregidx g));
    (fun g -> ZAUICGP (g.gen_zbits g 20, g.gen_zregidx g));
    (fun g -> ZCJAL (g.gen_zbits g 21, g.gen_zregidx g));
    (fun g -> ZCJALR (g.gen_zbits g 12, g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCGetPerm (g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCGetType (g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCGetBase (g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCGetLen (g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCGetTag (g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCGetAddr (g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCGetHigh (g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCGetTop (g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCSetHigh (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCSpecialRW (g.gen_zregidx g, g.gen_zscreg g, g.gen_zregidx g));
    (fun g -> ZCAndPerm (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCSub (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCIncAddr (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCIncAddrImmediate (g.gen_zregidx g, g.gen_zregidx g, g.gen_zbits g 12));
    (fun g -> ZCSetAddr (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCSetBounds (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCSetBoundsImmediate (g.gen_zregidx g, g.gen_zregidx g, g.gen_zbits g 12));
    (fun g -> ZCSetBoundsExact (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCSetBoundsRoundDown (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCClearTag (g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCMove (g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCRRL (g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCRAM (g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCTestSubset (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCSEQX (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCSeal (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZCUnseal (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g));
    (fun g -> ZLoadCapImm (g.gen_zregidx g, g.gen_zregidx g, g.gen_zbits g 12));
    (fun g -> ZStoreCapImm (g.gen_zregidx g, g.gen_zregidx g, g.gen_zbits g 12));
    (fun g -> ZC_CLC (g.gen_zcregidx g, g.gen_zcregidx g, g.gen_zbits g 9));
    (fun g -> ZC_CLCSP (g.gen_zregidx g, g.gen_zbits g 10));
    (fun g -> ZC_CSC (g.gen_zcregidx g, g.gen_zcregidx g, g.gen_zbits g 9));
    (fun g -> ZC_CSCSP (g.gen_zregidx g, g.gen_zbits g 10));
    (fun g -> ZC_CIncAddr16CSP (g.gen_zbits g 10));
    (fun g -> ZC_CIncAddr4CSPN (g.gen_zcregidx g, g.gen_zbits g 10));
    (fun g -> ZC_CJALR (g.gen_zregidx g));
    (fun g -> ZC_CJR (g.gen_zregidx g));
    (fun g -> ZC_CJAL (g.gen_zbits g 12));
    (fun g -> ZNOT_CAPMODE (g.gen_zword g));
    (fun g -> ZNOT_C_CAPMODE (g.gen_zhalf g))
  ] in c g
let constructors_zast = [
  "ILLEGAL";
  "C_ILLEGAL";
  "UTYPE";
  "RISCV_JAL";
  "RISCV_JALR";
  "BTYPE";
  "ITYPE";
  "SHIFTIOP";
  "RTYPE";
  "LOAD";
  "STORE";
  "ADDIW";
  "RTYPEW";
  "SHIFTIWOP";
  "FENCE";
  "FENCE_TSO";
  "FENCEI";
  "ECALL";
  "MRET";
  "SRET";
  "EBREAK";
  "WFI";
  "SFENCE_VMA";
  "C_NOP";
  "C_ADDI4SPN";
  "C_LW";
  "C_LD";
  "C_SW";
  "C_SD";
  "C_ADDI";
  "C_JAL";
  "C_ADDIW";
  "C_LI";
  "C_ADDI16SP";
  "C_LUI";
  "C_SRLI";
  "C_SRAI";
  "C_ANDI";
  "C_SUB";
  "C_XOR";
  "C_OR";
  "C_AND";
  "C_SUBW";
  "C_ADDW";
  "C_J";
  "C_BEQZ";
  "C_BNEZ";
  "C_SLLI";
  "C_LWSP";
  "C_LDSP";
  "C_SWSP";
  "C_SDSP";
  "C_JR";
  "C_JALR";
  "C_MV";
  "C_EBREAK";
  "C_ADD";
  "MUL";
  "DIV";
  "REM";
  "MULW";
  "DIVW";
  "REMW";
  "CSR";
  "C_NOP_HINT";
  "C_ADDI_HINT";
  "C_LI_HINT";
  "C_LUI_HINT";
  "C_MV_HINT";
  "C_ADD_HINT";
  "C_SLLI_HINT";
  "C_SRLI_HINT";
  "C_SRAI_HINT";
  "FENCE_RESERVED";
  "FENCEI_RESERVED";
  "AUIPCC";
  "AUICGP";
  "CJAL";
  "CJALR";
  "CGetPerm";
  "CGetType";
  "CGetBase";
  "CGetLen";
  "CGetTag";
  "CGetAddr";
  "CGetHigh";
  "CGetTop";
  "CSetHigh";
  "CSpecialRW";
  "CAndPerm";
  "CSub";
  "CIncAddr";
  "CIncAddrImmediate";
  "CSetAddr";
  "CSetBounds";
  "CSetBoundsImmediate";
  "CSetBoundsExact";
  "CSetBoundsRoundDown";
  "CClearTag";
  "CMove";
  "CRRL";
  "CRAM";
  "CTestSubset";
  "CSEQX";
  "CSeal";
  "CUnseal";
  "LoadCapImm";
  "StoreCapImm";
  "C_CLC";
  "C_CLCSP";
  "C_CSC";
  "C_CSCSP";
  "C_CIncAddr16CSP";
  "C_CIncAddr4CSPN";
  "C_CJALR";
  "C_CJR";
  "C_CJAL";
  "NOT_CAPMODE";
  "NOT_C_CAPMODE"
  ]
let build_zast g c = match c with
  | "ILLEGAL" -> ZILLEGAL (g.gen_zword g)
  | "C_ILLEGAL" -> ZC_ILLEGAL (g.gen_zhalf g)
  | "UTYPE" -> ZUTYPE (g.gen_zbits g 20, g.gen_zregidx g, g.gen_zuop g)
  | "RISCV_JAL" -> ZRISCV_JAL (g.gen_zbits g 21, g.gen_zregidx g)
  | "RISCV_JALR" -> ZRISCV_JALR (g.gen_zbits g 12, g.gen_zregidx g, g.gen_zregidx g)
  | "BTYPE" -> ZBTYPE (g.gen_zbits g 13, g.gen_zregidx g, g.gen_zregidx g, g.gen_zbop g)
  | "ITYPE" -> ZITYPE (g.gen_zbits g 12, g.gen_zregidx g, g.gen_zregidx g, g.gen_ziop g)
  | "SHIFTIOP" -> ZSHIFTIOP (g.gen_zbits g 6, g.gen_zregidx g, g.gen_zregidx g, g.gen_zsop g)
  | "RTYPE" -> ZRTYPE (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g, g.gen_zrop g)
  | "LOAD" -> ZLOAD (g.gen_zbits g 12, g.gen_zregidx g, g.gen_zregidx g, g.gen_zbool g, g.gen_zword_width g, g.gen_zbool g, g.gen_zbool g)
  | "STORE" -> ZSTORE (g.gen_zbits g 12, g.gen_zregidx g, g.gen_zregidx g, g.gen_zword_width g, g.gen_zbool g, g.gen_zbool g)
  | "ADDIW" -> ZADDIW (g.gen_zbits g 12, g.gen_zregidx g, g.gen_zregidx g)
  | "RTYPEW" -> ZRTYPEW (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g, g.gen_zropw g)
  | "SHIFTIWOP" -> ZSHIFTIWOP (g.gen_zbits g 5, g.gen_zregidx g, g.gen_zregidx g, g.gen_zsopw g)
  | "FENCE" -> ZFENCE (g.gen_zbits g 4, g.gen_zbits g 4)
  | "FENCE_TSO" -> ZFENCE_TSO (g.gen_zbits g 4, g.gen_zbits g 4)
  | "FENCEI" -> ZFENCEI (g.gen_zunit g)
  | "ECALL" -> ZECALL (g.gen_zunit g)
  | "MRET" -> ZMRET (g.gen_zunit g)
  | "SRET" -> ZSRET (g.gen_zunit g)
  | "EBREAK" -> ZEBREAK (g.gen_zunit g)
  | "WFI" -> ZWFI (g.gen_zunit g)
  | "SFENCE_VMA" -> ZSFENCE_VMA (g.gen_zregidx g, g.gen_zregidx g)
  | "C_NOP" -> ZC_NOP (g.gen_zunit g)
  | "C_ADDI4SPN" -> ZC_ADDI4SPN (g.gen_zcregidx g, g.gen_zbits g 8)
  | "C_LW" -> ZC_LW (g.gen_zbits g 5, g.gen_zcregidx g, g.gen_zcregidx g)
  | "C_LD" -> ZC_LD (g.gen_zbits g 5, g.gen_zcregidx g, g.gen_zcregidx g)
  | "C_SW" -> ZC_SW (g.gen_zbits g 5, g.gen_zcregidx g, g.gen_zcregidx g)
  | "C_SD" -> ZC_SD (g.gen_zbits g 5, g.gen_zcregidx g, g.gen_zcregidx g)
  | "C_ADDI" -> ZC_ADDI (g.gen_zbits g 6, g.gen_zregidx g)
  | "C_JAL" -> ZC_JAL (g.gen_zbits g 11)
  | "C_ADDIW" -> ZC_ADDIW (g.gen_zbits g 6, g.gen_zregidx g)
  | "C_LI" -> ZC_LI (g.gen_zbits g 6, g.gen_zregidx g)
  | "C_ADDI16SP" -> ZC_ADDI16SP (g.gen_zbits g 6)
  | "C_LUI" -> ZC_LUI (g.gen_zbits g 6, g.gen_zregidx g)
  | "C_SRLI" -> ZC_SRLI (g.gen_zbits g 6, g.gen_zcregidx g)
  | "C_SRAI" -> ZC_SRAI (g.gen_zbits g 6, g.gen_zcregidx g)
  | "C_ANDI" -> ZC_ANDI (g.gen_zbits g 6, g.gen_zcregidx g)
  | "C_SUB" -> ZC_SUB (g.gen_zcregidx g, g.gen_zcregidx g)
  | "C_XOR" -> ZC_XOR (g.gen_zcregidx g, g.gen_zcregidx g)
  | "C_OR" -> ZC_OR (g.gen_zcregidx g, g.gen_zcregidx g)
  | "C_AND" -> ZC_AND (g.gen_zcregidx g, g.gen_zcregidx g)
  | "C_SUBW" -> ZC_SUBW (g.gen_zcregidx g, g.gen_zcregidx g)
  | "C_ADDW" -> ZC_ADDW (g.gen_zcregidx g, g.gen_zcregidx g)
  | "C_J" -> ZC_J (g.gen_zbits g 11)
  | "C_BEQZ" -> ZC_BEQZ (g.gen_zbits g 8, g.gen_zcregidx g)
  | "C_BNEZ" -> ZC_BNEZ (g.gen_zbits g 8, g.gen_zcregidx g)
  | "C_SLLI" -> ZC_SLLI (g.gen_zbits g 6, g.gen_zregidx g)
  | "C_LWSP" -> ZC_LWSP (g.gen_zbits g 6, g.gen_zregidx g)
  | "C_LDSP" -> ZC_LDSP (g.gen_zbits g 6, g.gen_zregidx g)
  | "C_SWSP" -> ZC_SWSP (g.gen_zbits g 6, g.gen_zregidx g)
  | "C_SDSP" -> ZC_SDSP (g.gen_zbits g 6, g.gen_zregidx g)
  | "C_JR" -> ZC_JR (g.gen_zregidx g)
  | "C_JALR" -> ZC_JALR (g.gen_zregidx g)
  | "C_MV" -> ZC_MV (g.gen_zregidx g, g.gen_zregidx g)
  | "C_EBREAK" -> ZC_EBREAK (g.gen_zunit g)
  | "C_ADD" -> ZC_ADD (g.gen_zregidx g, g.gen_zregidx g)
  | "MUL" -> ZMUL (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g, g.gen_zbool g, g.gen_zbool g, g.gen_zbool g)
  | "DIV" -> ZDIV (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g, g.gen_zbool g)
  | "REM" -> ZREM (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g, g.gen_zbool g)
  | "MULW" -> ZMULW (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g)
  | "DIVW" -> ZDIVW (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g, g.gen_zbool g)
  | "REMW" -> ZREMW (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g, g.gen_zbool g)
  | "CSR" -> ZCSR (g.gen_zbits g 12, g.gen_zregidx g, g.gen_zregidx g, g.gen_zbool g, g.gen_zcsrop g)
  | "C_NOP_HINT" -> ZC_NOP_HINT (g.gen_zbits g 6)
  | "C_ADDI_HINT" -> ZC_ADDI_HINT (g.gen_zregidx g)
  | "C_LI_HINT" -> ZC_LI_HINT (g.gen_zbits g 6)
  | "C_LUI_HINT" -> ZC_LUI_HINT (g.gen_zbits g 6)
  | "C_MV_HINT" -> ZC_MV_HINT (g.gen_zregidx g)
  | "C_ADD_HINT" -> ZC_ADD_HINT (g.gen_zregidx g)
  | "C_SLLI_HINT" -> ZC_SLLI_HINT (g.gen_zbits g 6, g.gen_zregidx g)
  | "C_SRLI_HINT" -> ZC_SRLI_HINT (g.gen_zcregidx g)
  | "C_SRAI_HINT" -> ZC_SRAI_HINT (g.gen_zcregidx g)
  | "FENCE_RESERVED" -> ZFENCE_RESERVED (g.gen_zbits g 4, g.gen_zbits g 4, g.gen_zbits g 4, g.gen_zregidx g, g.gen_zregidx g)
  | "FENCEI_RESERVED" -> ZFENCEI_RESERVED (g.gen_zbits g 12, g.gen_zregidx g, g.gen_zregidx g)
  | "AUIPCC" -> ZAUIPCC (g.gen_zbits g 20, g.gen_zregidx g)
  | "AUICGP" -> ZAUICGP (g.gen_zbits g 20, g.gen_zregidx g)
  | "CJAL" -> ZCJAL (g.gen_zbits g 21, g.gen_zregidx g)
  | "CJALR" -> ZCJALR (g.gen_zbits g 12, g.gen_zregidx g, g.gen_zregidx g)
  | "CGetPerm" -> ZCGetPerm (g.gen_zregidx g, g.gen_zregidx g)
  | "CGetType" -> ZCGetType (g.gen_zregidx g, g.gen_zregidx g)
  | "CGetBase" -> ZCGetBase (g.gen_zregidx g, g.gen_zregidx g)
  | "CGetLen" -> ZCGetLen (g.gen_zregidx g, g.gen_zregidx g)
  | "CGetTag" -> ZCGetTag (g.gen_zregidx g, g.gen_zregidx g)
  | "CGetAddr" -> ZCGetAddr (g.gen_zregidx g, g.gen_zregidx g)
  | "CGetHigh" -> ZCGetHigh (g.gen_zregidx g, g.gen_zregidx g)
  | "CGetTop" -> ZCGetTop (g.gen_zregidx g, g.gen_zregidx g)
  | "CSetHigh" -> ZCSetHigh (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g)
  | "CSpecialRW" -> ZCSpecialRW (g.gen_zregidx g, g.gen_zscreg g, g.gen_zregidx g)
  | "CAndPerm" -> ZCAndPerm (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g)
  | "CSub" -> ZCSub (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g)
  | "CIncAddr" -> ZCIncAddr (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g)
  | "CIncAddrImmediate" -> ZCIncAddrImmediate (g.gen_zregidx g, g.gen_zregidx g, g.gen_zbits g 12)
  | "CSetAddr" -> ZCSetAddr (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g)
  | "CSetBounds" -> ZCSetBounds (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g)
  | "CSetBoundsImmediate" -> ZCSetBoundsImmediate (g.gen_zregidx g, g.gen_zregidx g, g.gen_zbits g 12)
  | "CSetBoundsExact" -> ZCSetBoundsExact (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g)
  | "CSetBoundsRoundDown" -> ZCSetBoundsRoundDown (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g)
  | "CClearTag" -> ZCClearTag (g.gen_zregidx g, g.gen_zregidx g)
  | "CMove" -> ZCMove (g.gen_zregidx g, g.gen_zregidx g)
  | "CRRL" -> ZCRRL (g.gen_zregidx g, g.gen_zregidx g)
  | "CRAM" -> ZCRAM (g.gen_zregidx g, g.gen_zregidx g)
  | "CTestSubset" -> ZCTestSubset (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g)
  | "CSEQX" -> ZCSEQX (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g)
  | "CSeal" -> ZCSeal (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g)
  | "CUnseal" -> ZCUnseal (g.gen_zregidx g, g.gen_zregidx g, g.gen_zregidx g)
  | "LoadCapImm" -> ZLoadCapImm (g.gen_zregidx g, g.gen_zregidx g, g.gen_zbits g 12)
  | "StoreCapImm" -> ZStoreCapImm (g.gen_zregidx g, g.gen_zregidx g, g.gen_zbits g 12)
  | "C_CLC" -> ZC_CLC (g.gen_zcregidx g, g.gen_zcregidx g, g.gen_zbits g 9)
  | "C_CLCSP" -> ZC_CLCSP (g.gen_zregidx g, g.gen_zbits g 10)
  | "C_CSC" -> ZC_CSC (g.gen_zcregidx g, g.gen_zcregidx g, g.gen_zbits g 9)
  | "C_CSCSP" -> ZC_CSCSP (g.gen_zregidx g, g.gen_zbits g 10)
  | "C_CIncAddr16CSP" -> ZC_CIncAddr16CSP (g.gen_zbits g 10)
  | "C_CIncAddr4CSPN" -> ZC_CIncAddr4CSPN (g.gen_zcregidx g, g.gen_zbits g 10)
  | "C_CJALR" -> ZC_CJALR (g.gen_zregidx g)
  | "C_CJR" -> ZC_CJR (g.gen_zregidx g)
  | "C_CJAL" -> ZC_CJAL (g.gen_zbits g 12)
  | "NOT_CAPMODE" -> ZNOT_CAPMODE (g.gen_zword g)
  | "NOT_C_CAPMODE" -> ZNOT_C_CAPMODE (g.gen_zhalf g)

let rand_zbits g zz7n =
  g.gen_zbitvector g zz7n



let rand_zbop g =
  rand_choice [
    ZRISCV_BEQ;
    ZRISCV_BNE;
    ZRISCV_BLT;
    ZRISCV_BGE;
    ZRISCV_BLTU;
    ZRISCV_BGEU
  ]
let constructors_zbop = [
  "RISCV_BEQ";
  "RISCV_BNE";
  "RISCV_BLT";
  "RISCV_BGE";
  "RISCV_BLTU";
  "RISCV_BGEU"
  ]
let build_zbop g c = match c with
  | "RISCV_BEQ" -> ZRISCV_BEQ
  | "RISCV_BNE" -> ZRISCV_BNE
  | "RISCV_BLT" -> ZRISCV_BLT
  | "RISCV_BGE" -> ZRISCV_BGE
  | "RISCV_BLTU" -> ZRISCV_BLTU
  | "RISCV_BGEU" -> ZRISCV_BGEU

let rand_zcregidx g =
  g.gen_zbits g 3

let rand_zcsrop g =
  rand_choice [ZCSRRW; ZCSRRS; ZCSRRC]
let constructors_zcsrop = [
  "CSRRW";
  "CSRRS";
  "CSRRC"
  ]
let build_zcsrop g c = match c with
  | "CSRRW" -> ZCSRRW
  | "CSRRS" -> ZCSRRS
  | "CSRRC" -> ZCSRRC

let rand_zhalf g =
  g.gen_zbits g 16

let rand_ziop g =
  rand_choice [
    ZRISCV_ADDI;
    ZRISCV_SLTI;
    ZRISCV_SLTIU;
    ZRISCV_XORI;
    ZRISCV_ORI;
    ZRISCV_ANDI
  ]
let constructors_ziop = [
  "RISCV_ADDI";
  "RISCV_SLTI";
  "RISCV_SLTIU";
  "RISCV_XORI";
  "RISCV_ORI";
  "RISCV_ANDI"
  ]
let build_ziop g c = match c with
  | "RISCV_ADDI" -> ZRISCV_ADDI
  | "RISCV_SLTI" -> ZRISCV_SLTI
  | "RISCV_SLTIU" -> ZRISCV_SLTIU
  | "RISCV_XORI" -> ZRISCV_XORI
  | "RISCV_ORI" -> ZRISCV_ORI
  | "RISCV_ANDI" -> ZRISCV_ANDI

let rand_zregidx g =
  g.gen_zbits g 5

let rand_zrop g =
  rand_choice [
    ZRISCV_ADD;
    ZRISCV_SUB;
    ZRISCV_SLL;
    ZRISCV_SLT;
    ZRISCV_SLTU;
    ZRISCV_XOR;
    ZRISCV_SRL;
    ZRISCV_SRA;
    ZRISCV_OR;
    ZRISCV_AND
  ]
let constructors_zrop = [
  "RISCV_ADD";
  "RISCV_SUB";
  "RISCV_SLL";
  "RISCV_SLT";
  "RISCV_SLTU";
  "RISCV_XOR";
  "RISCV_SRL";
  "RISCV_SRA";
  "RISCV_OR";
  "RISCV_AND"
  ]
let build_zrop g c = match c with
  | "RISCV_ADD" -> ZRISCV_ADD
  | "RISCV_SUB" -> ZRISCV_SUB
  | "RISCV_SLL" -> ZRISCV_SLL
  | "RISCV_SLT" -> ZRISCV_SLT
  | "RISCV_SLTU" -> ZRISCV_SLTU
  | "RISCV_XOR" -> ZRISCV_XOR
  | "RISCV_SRL" -> ZRISCV_SRL
  | "RISCV_SRA" -> ZRISCV_SRA
  | "RISCV_OR" -> ZRISCV_OR
  | "RISCV_AND" -> ZRISCV_AND

let rand_zropw g =
  rand_choice [ZRISCV_ADDW; ZRISCV_SUBW; ZRISCV_SLLW; ZRISCV_SRLW; ZRISCV_SRAW]
let constructors_zropw = [
  "RISCV_ADDW";
  "RISCV_SUBW";
  "RISCV_SLLW";
  "RISCV_SRLW";
  "RISCV_SRAW"
  ]
let build_zropw g c = match c with
  | "RISCV_ADDW" -> ZRISCV_ADDW
  | "RISCV_SUBW" -> ZRISCV_SUBW
  | "RISCV_SLLW" -> ZRISCV_SLLW
  | "RISCV_SRLW" -> ZRISCV_SRLW
  | "RISCV_SRAW" -> ZRISCV_SRAW

let rand_zscreg g =
  g.gen_zbits g 5

let rand_zsop g =
  rand_choice [ZRISCV_SLLI; ZRISCV_SRLI; ZRISCV_SRAI]
let constructors_zsop = [
  "RISCV_SLLI";
  "RISCV_SRLI";
  "RISCV_SRAI"
  ]
let build_zsop g c = match c with
  | "RISCV_SLLI" -> ZRISCV_SLLI
  | "RISCV_SRLI" -> ZRISCV_SRLI
  | "RISCV_SRAI" -> ZRISCV_SRAI

let rand_zsopw g =
  rand_choice [ZRISCV_SLLIW; ZRISCV_SRLIW; ZRISCV_SRAIW]
let constructors_zsopw = [
  "RISCV_SLLIW";
  "RISCV_SRLIW";
  "RISCV_SRAIW"
  ]
let build_zsopw g c = match c with
  | "RISCV_SLLIW" -> ZRISCV_SLLIW
  | "RISCV_SRLIW" -> ZRISCV_SRLIW
  | "RISCV_SRAIW" -> ZRISCV_SRAIW


let rand_zuop g =
  rand_choice [ZRISCV_LUI; ZRISCV_AUIPC]
let constructors_zuop = [
  "RISCV_LUI";
  "RISCV_AUIPC"
  ]
let build_zuop g c = match c with
  | "RISCV_LUI" -> ZRISCV_LUI
  | "RISCV_AUIPC" -> ZRISCV_AUIPC

let rand_zword g =
  g.gen_zbits g 32

let rand_zword_width g =
  rand_choice [ZBYTE; ZHALF; ZWORD; ZDOUBLE]
let constructors_zword_width = [
  "BYTE";
  "HALF";
  "WORD";
  "DOUBLE"
  ]
let build_zword_width g c = match c with
  | "BYTE" -> ZBYTE
  | "HALF" -> ZHALF
  | "WORD" -> ZWORD
  | "DOUBLE" -> ZDOUBLE

let rand_gens : generators = {
  gen_zast = rand_zast;
  gen_zbits = rand_zbits;
  gen_zbitvector = rand_zbitvector;
  gen_zbool = rand_zbool;
  gen_zbop = rand_zbop;
  gen_zcregidx = rand_zcregidx;
  gen_zcsrop = rand_zcsrop;
  gen_zhalf = rand_zhalf;
  gen_ziop = rand_ziop;
  gen_zregidx = rand_zregidx;
  gen_zrop = rand_zrop;
  gen_zropw = rand_zropw;
  gen_zscreg = rand_zscreg;
  gen_zsop = rand_zsop;
  gen_zsopw = rand_zsopw;
  gen_zunit = rand_zunit;
  gen_zuop = rand_zuop;
  gen_zword = rand_zword;
  gen_zword_width = rand_zword_width
}
